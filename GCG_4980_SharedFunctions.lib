Program.Sub.Preflight.Start
Program.Sub.Preflight.End

'GCG_4980_SharedFunctions.lib
'Trey S
'2020-01-03
'Part of the standard nesting interface
'This is a library of functions that are used by several of the nesting scripts

Program.Sub.CheckDirectories.Start
'check if the given directories exist
'create them if they don't

F.Intrinsic.Control.Try

V.Local.sDirectories.Declare(String)
V.Local.sPath.Declare(String)
V.Local.bExists.Declare(Boolean)
V.Local.iCounter.Declare(Long)

V.Local.sDirectories.Set(V.Args.Directories)
F.Intrinsic.String.Split(V.Local.sDirectories, "*!*", V.Local.sDirectories)

F.Intrinsic.Control.For(V.Local.iCounter, 0, V.Local.sDirectories.UBound, 1)
	V.Local.sPath.Set(V.Local.sDirectories(V.Local.iCounter))
	F.Intrinsic.File.DirExists(V.Local.sPath, V.Local.bExists)
	F.Intrinsic.Control.If(V.Local.bExists.Not)
		F.Intrinsic.File.CreateDir(V.Local.sPath)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Next(V.Local.iCounter)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.CheckDirectories.End

Program.Sub.GetSetting.Start
'returns a setting from  the GCG_4980_SETTINGS table as a string

F.Intrinsic.Control.Try

V.Local.sSQL.Declare(String)
V.Local.sType.Declare(String)
V.Local.sSetting.Declare(String)
V.Local.sFilter.Declare(String)
V.Local.sRet.Declare(String, "")
V.Local.bRecreate.Declare(Boolean, False)
V.Local.bClose.Declare(Boolean, False)

F.Intrinsic.Control.If(V.DataTable.dtSettings.Exists)
	F.Intrinsic.Control.If(V.DataTable.dtSettings.RowCount, >, 0)
		F.Intrinsic.Control.If(V.DataTable.dtSettings(0).PROFILE!FieldValTrim, !=, V.Args.Profile.Trim)
			V.Local.bRecreate.Set(True)
			V.Local.bClose.Set(True)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.ElseIf(V.DataTable.dtSettings.RowCount, =, 0)
		V.Local.bRecreate.Set(True)
		V.Local.bClose.Set(True)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Else
	V.Local.bRecreate.Set(True)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Local.bClose)
	F.Data.DataTable.Close("dtSettings")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Local.bRecreate)
	F.Intrinsic.String.Build("Select * from GCG_4980_SETTINGS where PROFILE = '{0}'", V.Args.Profile.Trim, V.Local.sSQL)
	F.Data.DataTable.CreateFromSQl("dtSettings", "Con", V.Local.sSQL, True)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.DataView.dtSettings!dvSettingCheck.Exists, =, False)
	F.Data.DataView.Create("dtSettings", "dvSettingCheck", 22)
F.Intrinsic.Control.EndIf

V.Local.sType.Set(V.Args.Type)
V.Local.sSetting.Set(V.Args.Setting)

F.Intrinsic.String.Build("[TYPE] = '{0}' and [SETTING] = '{1}'", V.Local.sType, V.Local.sSetting, V.Local.sFilter)
F.Data.DataView.SetFilter("dtSettings", "dvSettingCheck", V.Local.sFilter)
F.Intrinsic.Control.If(V.DataView.dtSettings!dvSettingCheck.RowCount, >, 0)
	V.Local.sRet.Set(V.DataView.dtSettings!dvSettingCheck(0).VALUE!FieldValTrim)
F.Intrinsic.Control.EndIf

F.Intrinsic.Variable.AddRV("SETTING", V.Local.sRet)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.GetSetting.End

Program.Sub.SetIcon.Start
F.Intrinsic.Control.Try

V.Local.sForm.Declare(String)
V.Local.bExists.Declare(Boolean)
V.Local.sIcon.Declare(String)
V.Local.iCounter.Declare(Long)

F.Intrinsic.String.Build("{0}\ART\gss2.ico",V.Caller.GlobalDir,v.Local.sIcon)
F.Intrinsic.File.Exists(V.Local.sIcon, V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists.Not)
	F.Intrinsic.String.Build("{0}\GAB\GAS\gss2.ico",V.Caller.PluginsDir,v.Local.sIcon)
	F.Intrinsic.File.Exists(V.Local.sIcon, V.Local.bExists)
	F.Intrinsic.Control.If(V.Local.bExists.Not)
		F.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Intrinsic.UI.GetFormList(V.Local.sForm)
F.Intrinsic.String.Split(V.Local.sForm, "*!*", V.Local.sForm)

F.Intrinsic.Control.For(V.Local.iCounter, 0, V.Local.sForm.UBound, 1)
	Gui.[V.Local.sForm(V.Local.iCounter)]..Icon(V.Local.sIcon)
F.Intrinsic.Control.Next(V.Local.iCounter)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.SetIcon.End

Program.Sub.CloseSettingsDT.Start
'close dtSettings, dvSettingCheck

F.Intrinsic.Control.Try

F.Intrinsic.Control.If(V.DataTable.dtSettings.Exists)
	F.Intrinsic.Control.If(V.DataView.dtSettings!dvSettingCheck.Exists)
		F.Data.DataView.Close("dtSettings", "dvSettingCheck")
	F.Intrinsic.Control.EndIf

	F.Data.DataTable.Close("dtSettings")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.CloseSettingsDT.End

Program.Sub.AddLog.Start
'pass a project #, and a message
'date and time will be automatically added
'pass PROJECT (Folder, log name)
'MESSAGE (what to log)

F.Intrinsic.Control.Try

V.Local.sProject.Declare(String)
V.Local.sMessage.Declare(String)
V.Local.bExists.Declare(Boolean)
V.Local.sPath.Declare(String)
V.Local.sFile.Declare(String)
V.Local.sContents.Declare(String)
V.Local.sTask.Declare(String)

V.Local.sProject.Set(V.Args.Project.Trim)
V.Local.sMessage.Set(V.Args.Message.Trim)
V.Local.sTask.Set(V.Args.Task)

F.Intrinsic.String.Replace(V.Local.sMessage, V.Ambient.NewLine, ", ", V.Local.sMessage)

F.Intrinsic.File.MakeFilenameFriendly(V.Local.sProject, V.Local.sProject)
F.Intrinsic.String.Build("{0}\Custom\{1}\{2}\Log\", V.Caller.GlobalDir, V.Local.sProject, V.Caller.CompanyCode, V.Local.sPath)
F.Intrinsic.Control.CallSub(CheckDirectories, "DIRECTORIES", V.Local.sPath)

F.Intrinsic.String.Build("{0}\{1}_Log.txt", V.Local.sPath, V.Local.sTask, V.Local.sFile)
F.Intrinsic.File.Exists(V.Local.sFile, V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists.Not)
	F.Intrinsic.String.Build("{0} {1}: Log Start", V.Ambient.Date.FormatYYYY-MM-DD, V.Ambient.Time.Format!HH:NN:SS, V.Local.sContents)
	F.Intrinsic.File.String2File(V.Local.sFile, V.Local.sContents)
F.Intrinsic.Control.EndIf

F.Intrinsic.String.Build("{0} {1}: {2}", V.Ambient.Date.FormatYYYY-MM-DD, V.Ambient.Time.Format!HH:NN:SS, V.Local.sMessage, V.Local.sContents)
F.Intrinsic.File.Append2FileNewLine(V.Local.sFile, V.Local.sContents)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.AddLog.End

Program.Sub.UnattendedErrorMessage.Start
'send a short error message, add the log
'pass project ID, project title (for message box title), and error message

F.Intrinsic.Control.Try

V.Local.sMessage.Declare(String)

V.Local.sMessage.Set(V.Args.Message.Trim)
F.Intrinsic.String.Replace(V.Local.sMessage, V.Ambient.NewLine, ", ", V.Local.sMessage)

F.Intrinsic.UI.InvokeWaitDialog(V.Local.sMessage, V.Args.ProjectTitle)
F.Intrinsic.UI.Sleep(10)
F.Intrinsic.UI.CloseWaitDialog

F.Intrinsic.Control.CallSub(AddLog, "Project", V.Args.Project, "TASK", V.Args.Task, "Message", V.Local.sMessage)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.UnattendedErrorMessage.End

Program.Sub.ScriptPIDCheck.Start
'check if the process is already running
'pass TASK

F.Intrinsic.Control.Try

V.Local.sFile.Declare(String)
V.Local.bPIDRunning.Declare(Boolean, False)
V.Local.sContents.Declare(String)
V.Local.iPID.Declare(Long, -1)

F.Intrinsic.File.GetFileNameFromFQN(V.Caller.ScriptFile, V.Local.sFile)

F.Global.Registry.ReadValue(-1, V.Caller.CompanyCode, V.Local.sFile, V.Args.Project, 0, 1, -1, V.Local.iPID)
F.Intrinsic.Control.If(V.Local.iPID, <>, -1)
	'check if PID is actually running
	F.Intrinsic.Task.PIDRunning(V.Local.iPID, V.Local.bPIDRunning)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Local.bPIDRunning)
	'if it's already running, end here
	F.Intrinsic.Control.End
F.Intrinsic.Control.Else
	'create lock file contents
	F.Intrinsic.String.Build("PID: {0}{1}Launch Time: {2}{1}GSS User: {3}{1}Terminal: {4}{1}Windows User: {5}{1}Machine: {6}{1}Hook: {7}{1}Caller: {8}{1}Script: {9}{1}Company Code: {10}", V.Ambient.PID, V.Ambient.NewLine, V.Ambient.Now, V.Caller.User, V.Caller.Terminal, V.System.UserName, V.System.ComputerName, V.Caller.Hook, V.Caller.Caller, V.Caller.ScriptFile, V.Caller.CompanyCode, V.Local.sContents)
	F.Global.Registry.AddValue(-1, V.Caller.CompanyCode, V.Local.sFile, V.Args.Project, 0, False, "", False, V.Ambient.PID, 0, V.Ambient.Date, V.Ambient.Now, V.Local.sContents)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.ScriptPIDCheck.End

Program.Sub.ScriptPIDClear.Start
'delete the is running lock, so the next time the program runs it knows it isn't currently running
'pass project

F.Intrinsic.Control.Try

V.Local.sFile.Declare(String)

F.Intrinsic.File.GetFileNameFromFQN(V.Caller.ScriptFile, V.Local.sFile)
F.Global.Registry.AddValue(-1, V.Caller.CompanyCode, V.Local.sFile, V.Args.Project, 0, False, "", False, -1, 0, V.Ambient.Date, V.Ambient.Now, "")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.ScriptPIDClear.End

Program.Sub.Connection.Start
'open or close connection if necessary, keep track of all connections

F.Intrinsic.Control.Try

V.Static.iConnections.Declare(Long)

F.Intrinsic.Control.If(V.Args.Connect)
	F.Intrinsic.Control.If(V.Static.iConnections, =, 0)
		F.ODBC.Connection!Con.OpenCompanyConnection(500)
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Math.Add(V.Static.iConnections, 1, V.Static.iConnections)
F.Intrinsic.Control.Else
	F.Intrinsic.Control.If(V.Static.iConnections, >, 0)
		F.Intrinsic.Math.Sub(V.Static.iConnections, 1, V.Static.iConnections)
		
		F.Intrinsic.Control.If(V.Static.iConnections, =, 0)
			F.ODBC.Connection!Con.Close
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.Connection.End

Program.Sub.Serialize.Start
'pass FORM, GRIDCONTROL, GRIDVIEW, REGID

F.Intrinsic.Control.Try

V.Local.sSerialize.Declare(String)
V.Local.sForm.Declare(String)
V.Local.sGridControl.Declare(String)
V.Local.sGridView.Declare(String)
V.Local.sREGID.Declare(String)

V.Local.sForm.Set(V.Args.Form.Trim)
V.Local.sGridControl.Set(V.Args.GridControl.Trim)
V.Local.sGridView.Set(V.Args.GridView.Trim)
V.Local.sREGID.Set(V.Args.REGID.Trim)

GUI.[V.Local.sForm].[V.Local.sGridControl].Serialize(V.Local.sGridView, V.Local.sSerialize)
F.Global.Registry.AddValue(V.Caller.User, V.Caller.CompanyCode, V.Local.sGridView, V.Local.sREGID, 1000, False, "Serialize", False, 0, -999.0 , 1/1/1980, 12:00:00 AM, V.Local.sSerialize)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.Serialize.End

Program.Sub.Deserialize.Start
'pass FORM, GRIDCONTROL, GRIDVIEW, REGID

F.Intrinsic.Control.Try

V.Local.sSerialize.Declare(String)
V.Local.sForm.Declare(String)
V.Local.sGridControl.Declare(String)
V.Local.sGridView.Declare(String)
V.Local.sREGID.Declare(String)

V.Local.sForm.Set(V.Args.Form.Trim)
V.Local.sGridControl.Set(V.Args.GridControl.Trim)
V.Local.sGridView.Set(V.Args.GridView.Trim)
V.Local.sREGID.Set(V.Args.REGID.Trim)

F.Global.Registry.ReadValue(V.Caller.User, V.Caller.CompanyCode, V.Local.sGridView, V.Local.sREGID, 1000, 6, "", V.Local.sSerialize)
F.Intrinsic.Control.If(V.Local.sSerialize.Trim,<>,"")
	Gui.[V.Local.sForm].[V.Local.sGridControl].Deserialize(V.Local.sSerialize)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.If(V.Ambient.ErrorNumber, =, 121000)
		F.Intrinsic.Control.ClearErrors
		F.Intrinsic.Control.CallSub(ResetSerialization, "RegId", V.Args.REGID, "GridView", V.Args.GridView)
	F.Intrinsic.Control.Else
		F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndTry
Program.Sub.Deserialize.End

Program.Sub.ResetSerialization.Start
'pass REGID, GRIDVIEW

F.Intrinsic.Control.Try

F.Global.Registry.AddValue(V.Caller.User, V.Caller.CompanyCode, V.Args.GridView, V.Args.REGID, 1000, False, "Serialize", False, 0, -999.0 , 1/1/1980, 12:00:00 AM, "")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.ResetSerialization.End

Program.Sub.CommonConnection.Start
'open or close common connection if necessary, keep track of all connections

F.Intrinsic.Control.Try

V.Static.iConnections.Declare(Long)

F.Intrinsic.Control.If(V.Args.Connect)
	F.Intrinsic.Control.If(V.Static.iConnections, =, 0)
		F.ODBC.Connection!Comm.OpenCommonConnection
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Math.Add(V.Static.iConnections, 1, V.Static.iConnections)
F.Intrinsic.Control.Else
	F.Intrinsic.Control.If(V.Static.iConnections, >, 0)
		F.Intrinsic.Math.Sub(V.Static.iConnections, 1, V.Static.iConnections)
		
		F.Intrinsic.Control.If(V.Static.iConnections, =, 0)
			F.ODBC.Connection!Comm.Close
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.CommonConnection.End

Program.Sub.Export.Start
'generic export
'pass Form, GridControl, and Filename base

F.Intrinsic.Control.Try

V.Local.sFileExport.Declare(String)
V.Local.bExcel.Declare(Boolean)
V.Local.bFileLocked.Declare(Boolean)
V.Local.sMessage.Declare(String)
V.Local.sType.Declare(String)
V.Local.sForm.Declare(String)
V.Local.sGridControl.Declare(String)
V.Local.sFileName.Declare(String)
V.Local.bExists.Declare(Boolean)

V.Local.sForm.Set(V.Args.Form)
V.Local.sGridControl.Set(V.Args.GridControl)
V.Local.sFileName.Set(V.Args.FileName)

F.Intrinsic.Variable.ArgExists("TYPE", V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists)
	V.Local.sType.Set(V.Args.TYPE.Trim)
F.Intrinsic.Control.Else
	F.Automation.MSExcel.CheckPresence(V.Local.bExcel)
	F.Intrinsic.Control.If(V.Local.bExcel)
		V.Local.sType.Set("xlsx")
	F.Intrinsic.Control.Else
		V.Local.sType.Set("csv")
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Intrinsic.File.MakeFilenameFriendly(V.Local.sFileName, V.Local.sFileName)
F.Intrinsic.String.Build("{0}{1}_Export_{2}.{3}", V.Caller.LocalGssTempDir, V.Local.sFileName, V.Ambient.Date.FormatMM-DD-YYYY, V.Local.sType, V.Local.sFileExport)
F.Intrinsic.File.IsFileLocked(V.Local.sFileExport, V.Local.bFileLocked)

F.Intrinsic.Control.If(V.Local.bFileLocked)
	F.Intrinsic.String.Build("File is already open. Please close and export again.{0}File: {1}", V.Ambient.NewLine, V.Local.sFileExport, V.Local.sMessage)
	F.Intrinsic.UI.Msgbox(V.Local.sMessage,"File In Use")
F.Intrinsic.Control.Else
	Gui.[V.Local.sForm].[V.Local.sGridControl].Export(V.Local.sFileExport, V.Local.sType)
	F.Intrinsic.Task.ShellExec(0, "", V.Local.sFileExport, "", "", 1)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.Export.End

Program.Sub.AddLogFile.Start
'pass a project #, and a message
'date and time will be automatically added
'pass PROJECT (Folder)
'pass type (subfolder)
'MESSAGE (what to log)

F.Intrinsic.Control.Try

V.Local.sProject.Declare(String)
V.Local.sMessage.Declare(String)
V.Local.bExists.Declare(Boolean)
V.Local.sPath.Declare(String)
V.Local.sFile.Declare(String)
V.Local.sContents.Declare(String)
V.Local.sType.Declare(String)
V.Local.sName.Declare(String)

V.Local.sProject.Set(V.Args.Project.Trim)
V.Local.sMessage.Set(V.Args.Message.Trim)
V.Local.sType.Set(V.Args.Type)

F.Intrinsic.File.MakeFilenameFriendly(V.Local.sProject, V.Local.sProject)
F.Intrinsic.String.Build("{0}\Custom\{1}\{2}\Log\{3}\", V.Caller.GlobalDir, V.Local.sProject, V.Caller.CompanyCode, V.Local.sType, V.Local.sPath)
F.Intrinsic.Control.CallSub(CheckDirectories, "DIRECTORIES", V.Local.sPath)

F.Intrinsic.String.StripCharacters(V.Ambient.Now, V.Local.sName)

F.Intrinsic.String.Build("{0}\{1}_Log.txt", V.Local.sPath, V.Local.sName, V.Local.sFile)
F.Intrinsic.File.String2File(V.Local.sFile, V.Local.sMessage)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.AddLogFile.End

Program.Sub.ErrorMessage.Start
'basic error message for replacing catch block
'this is really just for when printing the message and ending program
'pass error number, error description, current subroutine
'optional callback sub, this will be called before ending
'optional unattended parameters, those subs may not exist if not using them but won't be called
F.Intrinsic.Control.Try

V.Local.iError.Declare(Long)
V.Local.sErrorDescription.Declare(String)
V.Local.sSubroutine.Declare(String)
V.Local.sError.Declare(String)
V.Local.bExists.Declare(Boolean)
V.Local.sCallback.Declare(String)
V.Local.sDoubleNewLine.Declare(String)
V.Local.sLine.Declare(String)

V.Local.iError.Set(V.Args.ErrorNumber)
V.Local.sErrorDescription.Set(V.Args.ErrorDescription)
V.Local.sSubroutine.Set(V.Args.Subroutine)

F.Intrinsic.Control.Try
	V.Local.sLine.Set(V.Ambient.ErrorLine)
F.Intrinsic.Control.Catch
	'just means they aren't updated, we don't need to do anything
F.Intrinsic.Control.EndTry

F.Intrinsic.String.Build("{6}{1}{1}Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}", V.Caller.ScriptFile, V.Ambient.Newline, V.Local.sSubroutine, V.Local.iError, V.Local.sErrorDescription, V.Ambient.GABVersion, V.Ambient.Now, V.Local.sError)

F.Intrinsic.Variable.ArgExists("UNATTENDED", V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists)
	F.Intrinsic.Control.If(V.Args.UNATTENDED)
		F.Intrinsic.Control.CallSub(UnattendedErrorMessage, "MESSAGE", V.Local.sError, "PROJECT", V.Args.PROJECT, "PROJECTTITLE", V.Args.PROJECTTITLE, "TASK", V.Args.Task)
	F.Intrinsic.Control.Else
		F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Else
	F.Intrinsic.UI.Msgbox(V.Local.sError)
F.Intrinsic.Control.EndIf

F.Intrinsic.Variable.ArgExists("WRITE_LOG_FILE", V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists)
	F.Intrinsic.Control.If(V.Args.WRITE_LOG_FILE)
		F.Intrinsic.String.Build("{0}{0}", V.Ambient.NewLine, V.Local.sDoubleNewLine)
		F.Intrinsic.String.Replace(V.Local.sError, V.Local.sDoubleNewLine, V.Ambient.NewLine, V.Local.sError)
		
		F.Intrinsic.String.Build("Time: {0}{1}User: {2}{1}Windows User: {3}{1}Machine: {4}{1}PID: {5}{1}Terminal: {6}{1}Caller: {7}{1}Synchronous: {8}{1}Thread ID: {9}{1}Pervasive Client: {10}{1}GAB Version: {11}{1}GSS Version: {12}{1}Error: {13}{1}Error Description: {14}{1}Script: {15}{1}Subroutine: {16}{1}Line: {17}", V.Ambient.Now, V.Ambient.NewLine, V.Caller.User, V.System.UserName, V.System.ComputerName, V.Ambient.PID, V.Caller.Terminal, V.Caller.Caller, V.Caller.Sync,  V.Ambient.ThreadID, V.Ambient.PervasiveClientVersion, V.Ambient.GABVersion, V.Caller.GSSVersion, V.Args.ErrorNumber, V.Args.ErrorDescription, V.Caller.ScriptFile, V.Args.Subroutine, V.Local.sLine, V.Local.sError)
		
		F.Intrinsic.Control.CallSub(AddLogFile, "PROJECT", V.Args.Project, "TYPE", V.Args.Task, "MESSAGE", V.Local.sError)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Intrinsic.Variable.ArgExists("Callback", V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists)
	V.Local.sCallback.Set(V.Args.Callback.Trim)
	F.Intrinsic.Control.CallSub(V.Local.sCallback)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.End

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Caller.ScriptFile,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.End
F.Intrinsic.Control.EndTry
Program.Sub.ErrorMessage.End

Program.Sub.MoveFile.Start
'move file to the given directory
'create the directory if it doesn't exist
'if file already exists there, add a suffix

F.Intrinsic.Control.Try

V.Local.sFile.Declare(String)
V.Local.sNewPath.Declare(String)
V.Local.bExists.Declare(boolean)
V.Local.iCounter.Declare(Long, 0)
V.Local.sFileName.Declare(String)
V.Local.sNewFile.Declare(String)
V.Local.sNewFileTemp.Declare(String)
V.Local.sSlash.Declare(String, "")
V.Local.bMoved.Declare(Boolean)
V.Local.sNewName.Declare(String, "")
V.Local.sExtension.Declare(String)

V.Local.sFile.Set(V.Args.FILE)
V.Local.sNewPath.Set(V.Args.NEW_PATH)
F.Intrinsic.Variable.ArgExists("NEW_NAME", V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists)
	V.Local.sNewName.Set(V.Args.NEW_NAME)
F.Intrinsic.Control.EndIf

F.Intrinsic.File.Exists(V.Args.File, V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists.Not)
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(CheckDirectories, "DIRECTORIES", V.Local.sNewPath)

F.Intrinsic.Control.If(V.Local.sNewPath.Right1, !=, "\")
	V.Local.sSlash.Set("\")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Local.sNewName.Trim, =, "")
	F.Intrinsic.File.GetFileNameFromFQN(V.Local.sFile, V.Local.sFileName)
F.Intrinsic.Control.Else
	V.Local.sFileName.Set(V.Local.sNewName)
F.Intrinsic.Control.EndIf
F.Intrinsic.String.Build("{0}{1}{2}", V.Local.sNewPath, V.Local.sSlash, V.Local.sFileName, V.Local.sNewFile)

F.Intrinsic.String.Split(V.Local.sNewFile, ".", V.Local.sExtension)
F.Intrinsic.String.Build(".{0}", V.Local.sExtension(V.Local.sExtension.UBound), V.Local.sExtension)

F.Intrinsic.File.Exists(V.Local.sNewFile, V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists)
	F.Intrinsic.Control.DoUntil(V.Local.bExists.Not)
		F.Intrinsic.Math.Add(V.Local.iCounter, 1, V.Local.iCounter)
		F.Intrinsic.Control.CallSub(AppendFileName, "File", V.Local.sNewFile, "Append", V.Local.iCounter)
		F.Intrinsic.File.Exists(V.Args.New_Name, V.Local.bExists)
	F.Intrinsic.Control.Loop
	V.Local.sNewFile.Set(V.Args.New_Name)
F.Intrinsic.Control.EndIf

F.Intrinsic.File.MoveFile(V.Local.sFile, V.Local.sNewFile, V.Local.bMoved)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.MoveFile.End

Program.Sub.AppendFileName.Start
'pass FILE
'pass APPEND
'returns NEW_NAME

F.Intrinsic.Control.Try

V.Local.sExtension.Declare(String)
V.Local.sFile.Declare(String)
V.Local.sNewName.Declare(String)

F.Intrinsic.File.GetExtensionComponent(V.Args.File, V.Local.sExtension)
F.Intrinsic.String.Build(".{0}", V.Local.sExtension, V.Local.sExtension)
F.Intrinsic.String.Replace(V.Args.File, V.Local.sExtension, "", V.Local.sNewName)
F.Intrinsic.String.Build("{0}_{1}{2}", V.Local.sNewName, V.Args.Append, V.Local.sExtension, V.Local.sNewName)

F.Intrinsic.Variable.AddRV("NEW_NAME", V.Local.sNewName)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.AppendFileName.End

Program.Sub.BackUpFile.Start
'pass TYPE
'pass PROJECT
'pass File

F.Intrinsic.Control.Try

V.Local.sPath.Declare(String)
V.Local.sName.Declare(String)
V.Local.bExists.Declare(Boolean)

F.Intrinsic.String.Build("{0}\Custom\{1}\{2}\File Backups\{3}", V.Caller.GlobalDir, V.Args.Project, V.Caller.CompanyCode, V.Args.Type, V.Local.sPath)
F.Intrinsic.Control.CallSub(CheckDirectories, "Directories", V.Local.sPath)

F.Intrinsic.File.GetFileNameFromFQN(V.Args.File, V.Local.sName)
F.Intrinsic.Control.CallSub(AppendFileName, "File", V.Local.sName, "Append", V.Ambient.Now.FormatYYYY-MM-DD-HH-NN-SS)

F.Intrinsic.String.Build("{0}\{1}", V.Local.sPath, V.Args.New_Name, V.Local.sPath)

F.Intrinsic.File.Exists(V.Args.File, V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists)
	F.Intrinsic.File.CopyFile(V.Args.File, V.Local.sPath)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine)
F.Intrinsic.Control.EndTry
Program.Sub.BackUpFile.End

Program.Sub.Comments.Start
${$5$}$2.0.0.0$}$2
${$6$}$rseddon$}$20231220142955976$}$DkKb6sybY9hE3N0enyRwKJuHSlMGTgRb6bPjzlpUVhvmZEmBkcveeeWgUDtWtGx6Et4r+7KSGxA=
Program.Sub.Comments.End