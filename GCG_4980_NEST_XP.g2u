Program.Sub.ScreenSU.Start
GUI.FNestExport..Create
GUI.FNestExport..Caption("Standard Nesting Export Interface [4980]")
GUI.FNestExport..Size(20910,11910)
GUI.FNestExport..MinX(20910)
GUI.FNestExport..MinY(6000)
GUI.FNestExport..Position(0,0)
GUI.FNestExport..BackColor(-2147483633)
GUI.FNestExport..MousePointer(0)
GUI.FNestExport..Event(UnLoad,FNestExport_UnLoad)
GUI.FNestExport.GsGCJobs.Create(GsGridControl)
GUI.FNestExport.GsGCJobs.Size(20820,10365)
GUI.FNestExport.GsGCJobs.Position(0,540)
GUI.FNestExport.GsGCJobs.Event(ColumnFilterChanged,GsGCJobs_ColumnFilterChanged)
GUI.FNestExport.GsGCJobs.Anchor(15)
GUI.FNestExport.GsGCJobs.Event(RowCellClick,GsGCJobs_RowCellClick)
GUI.FNestExport.dtpFromDate.Create(DatePicker)
GUI.FNestExport.dtpFromDate.Size(2880,285)
GUI.FNestExport.dtpFromDate.Position(2655,150)
GUI.FNestExport.dtpFromDate.TabStop(True)
GUI.FNestExport.dtpFromDate.TabIndex(1)
GUI.FNestExport.cmdXP.Create(Button)
GUI.FNestExport.cmdXP.Size(1290,405)
GUI.FNestExport.cmdXP.Position(19485,10935)
GUI.FNestExport.cmdXP.Caption("Export")
GUI.FNestExport.cmdXP.FontSize(12)
GUI.FNestExport.cmdXP.Event(Click,cmdXP_Click)
GUI.FNestExport.cmdXP.Anchor(10)
GUI.FNestExport.cmdXP.TabStop(True)
GUI.FNestExport.cmdXP.TabIndex(8)
GUI.FNestExport.dtpToDate.Create(DatePicker)
GUI.FNestExport.dtpToDate.Size(2880,285)
GUI.FNestExport.dtpToDate.Position(8160,150)
GUI.FNestExport.dtpToDate.TabStop(True)
GUI.FNestExport.dtpToDate.TabIndex(2)
GUI.FNestExport.lbl1.Create(Label,"Scheduled Start Date",True,2625,255,0,60,240,True,0,"Arial",12,-2147483633,0)
GUI.FNestExport.lbl1.FontStyle(True,False,False,False,False)
GUI.FNestExport.lbl1.ToolTip("Scheduled date only")
GUI.FNestExport.lbl2.Create(Label,"Scheduled End Date",True,2505,255,0,5640,240,True,0,"Arial",12,-2147483633,0)
GUI.FNestExport.lbl2.FontStyle(True,False,False,False,False)
GUI.FNestExport.lbl2.ToolTip("Scheduled date only")
GUI.FNestExport.cmdPopGrid.Create(Button)
GUI.FNestExport.cmdPopGrid.Size(1290,405)
GUI.FNestExport.cmdPopGrid.Position(19485,90)
GUI.FNestExport.cmdPopGrid.Caption("Refresh")
GUI.FNestExport.cmdPopGrid.FontSize(12)
GUI.FNestExport.cmdPopGrid.Event(Click,cmdPopGrid_Click)
GUI.FNestExport.cmdPopGrid.Anchor(9)
GUI.FNestExport.cmdPopGrid.TabStop(True)
GUI.FNestExport.cmdPopGrid.TabIndex(4)
GUI.FNestExport.chkIncludeXP.Create(CheckBox)
GUI.FNestExport.chkIncludeXP.Size(2025,360)
GUI.FNestExport.chkIncludeXP.Position(11115,180)
GUI.FNestExport.chkIncludeXP.Caption("Include Exported Jobs")
GUI.FNestExport.chkIncludeXP.Value(1)
GUI.FNestExport.chkIncludeXP.TabStop(True)
GUI.FNestExport.chkIncludeXP.TabIndex(3)
GUI.FNestExport.ddlProfile.Create(DropDownList)
GUI.FNestExport.ddlProfile.Size(2640,330)
GUI.FNestExport.ddlProfile.Position(14475,10980)
GUI.FNestExport.ddlProfile.Anchor(10)
GUI.FNestExport.ddlProfile.TabStop(True)
GUI.FNestExport.ddlProfile.TabIndex(6)
GUI.FNestExport.lbl5.Create(Label,"Export Profile",True,1185,255,0,13260,11085,True,0,"Arial",8,-2147483633,0)
GUI.FNestExport.lbl5.Anchor(10)
GUI.FNestExport.chkPrintBCWODetail.Create(CheckBox)
GUI.FNestExport.chkPrintBCWODetail.Size(2205,360)
GUI.FNestExport.chkPrintBCWODetail.Position(17235,10995)
GUI.FNestExport.chkPrintBCWODetail.Caption("Print BarCode WO Detail")
GUI.FNestExport.chkPrintBCWODetail.Event(Click,chkPrintBCWODetail_Click)
GUI.FNestExport.chkPrintBCWODetail.Anchor(10)
GUI.FNestExport.chkPrintBCWODetail.TabStop(True)
GUI.FNestExport.chkPrintBCWODetail.TabIndex(7)
GUI.FNestExport.lblSelected.Create(Label,"Selected:",True,870,255,0,30,11085,True,0,"Arial",8,-2147483633,0)
GUI.FNestExport.lblSelected.Anchor(6)
GUI.FNestExport.lblFiltered.Create(Label,"Filtered:",True,825,255,0,1785,11085,True,0,"Arial",8,-2147483633,0)
GUI.FNestExport.lblFiltered.Anchor(6)
GUI.FNestExport.lblTotal.Create(Label,"Total:",True,660,255,0,3375,11085,True,0,"Arial",8,-2147483633,0)
GUI.FNestExport.lblTotal.Anchor(6)
GUI.FNestExport.txtSelected.Create(TextBox,"0",True,825,300,0,885,10980,False,1,"Arial",8,-2147483643,1)
GUI.FNestExport.txtSelected.Anchor(6)
GUI.FNestExport.txtFiltered.Create(TextBox,"0",True,825,300,0,2490,10995,False,1,"Arial",8,-2147483643,1)
GUI.FNestExport.txtFiltered.Anchor(6)
GUI.FNestExport.txtTotal.Create(TextBox,"0",True,825,300,0,3870,10995,False,1,"Arial",8,-2147483643,1)
GUI.FNestExport.txtTotal.Anchor(6)
GUI.FNestExport.lblScanWO.Create(Label,"Scan Job",True,900,255,0,9795,11085,True,0,"Arial",8,-2147483633,0)
GUI.FNestExport.lblScanWO.Anchor(10)
GUI.FNestExport.txtScanJob.Create(TextBox,"",True,2190,300,0,10740,10995,False,0,"Arial",8,-2147483628,1)
GUI.FNestExport.txtScanJob.Anchor(10)
GUI.FNestExport.txtScanJob.Event(KeyPressEnter,txtScanJob_KeyPressEnter)
GUI.FNestExport.txtScanJob.Event(GotFocus,txtScanJob_GotFocus)
GUI.FNestExport.txtScanJob.Event(LostFocus,txtScanJob_LostFocus)
GUI.FNestExport.txtScanJob.MaxLength(20)
GUI.FNestExport.txtScanJob.TabStop(True)
GUI.FNestExport.txtScanJob.TabIndex(5)
Program.Sub.ScreenSU.End

Program.Sub.Preflight.Start
V.Global.sXPtype.Declare
V.Global.sProfile.Declare
V.Global.sXPPATH.Declare
V.Global.sBarCodePath.Declare
V.Global.sFilter.Declare
V.Global.bCustom.Declare
V.Global.bImported.Declare
V.Global.bAutoExport.Declare(Boolean, False)
V.Global.bIncludeExported.Declare(Boolean, False)
V.Global.bUnattended.Declare(Boolean, False)
V.Global.bError.Declare(Boolean, False)
V.Global.bLoadData.Declare(Boolean, True)
V.Global.bViewWO.Declare(Boolean, False)
V.Global.bEditWO.Declare(Boolean, False)
V.Global.bViewPart.Declare(Boolean, False)
V.Global.bEditPart.Declare(Boolean, False)
Program.External.Include.Library("GCG_4980_SharedFunctions.lib")
Program.Sub.Preflight.End

Program.Sub.Main.Start
'GCG_4980_NEST_XP.g2u
'Ashwin D, Trey S
'This script is the export portion of the standard nesting interface
'It can either be run as a menu item where the user can choose which jobs to export
'or run from online update and automatically export eligible jobs

F.Intrinsic.Control.Try

F.Intrinsic.Control.CallSub(SetIcon)

F.Intrinsic.Control.SelectCase(V.Caller.Hook)
	F.Intrinsic.Control.Case(38130)
		'post online update hook
		V.Global.bUnattended.Set(True)
		F.Intrinsic.Control.CallSub(OnlineUpdate)
	
	F.Intrinsic.Control.CaseElse
		F.Intrinsic.Control.CallSub(CheckPermissions)
		
		F.Intrinsic.Control.CallSub(Connection, "CONNECT", True)
		
		F.Intrinsic.Control.CallSub(LoadProfile)
		F.Intrinsic.Control.CallSub(PreFolderCheck)
		F.Intrinsic.Control.CallSub(LoadContextMenu)
		
		F.Intrinsic.Control.CallSub(cmdPopGrid_Click)
		F.Intrinsic.Control.CallSub(SetFromDate)
		GUI.FNestExport..Show	
F.Intrinsic.Control.EndSelect

F.Intrinsic.Control.If(V.Ambient.IsInIDE)
	GUI.FNestExport.dtpFromDate.Value(V.Ambient.MinDate)
	GUI.FNestExport.dtpToDate.Value("2400-01-01")
	F.Intrinsic.Control.CallSub(cmdPopGrid_Click)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Callback", "FNestExport_Unload", "PROJECT", "4980", "PROJECTTITLE", "GCG_4980_NEST_XP", "TASK", "GCG_4980_NEST_XP")
F.Intrinsic.Control.EndTry
Program.Sub.Main.End

Program.Sub.SetFromDate.Start
F.Intrinsic.Control.Try

V.Local.dDate.Declare(Date)

F.Intrinsic.Date.DateAdd("d", -7, V.Ambient.Date, V.Local.dDate)
GUI.FNestExport.dtpFromDate.Value(V.Local.dDate)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Callback", "FNestExport_Unload", "PROJECT", "4980", "PROJECTTITLE", "GCG_4980_NEST_XP", "TASK", "GCG_4980_NEST_XP")
F.Intrinsic.Control.EndTry
Program.Sub.SetFromDate.End

Program.Sub.FormatJobGrid.Start
F.Intrinsic.Control.Try

'load gridview
GUI.FNestExport.GsGCJobs.AddGridviewFromDataview("gvJobs","dtJobData","dvJobData")

'gridview properties
GUI.FNestExport.GsGCJobs.SetGridviewProperty("gvJobs","Enableappearanceoddrow",True)
GUI.FNestExport.GsGCJobs.SetGridviewProperty("gvJobs","OptionsFindAlwaysVisible",False)
GUI.FNestExport.GsGCJobs.SetGridviewProperty("gvJobs","Showgrouppanel",False)
GUI.FNestExport.GsGCJobs.SetGridviewProperty("gvJobs","OptionsViewShowAutoFilterRow",True)
GUI.FNestExport.GsGCJobs.SetGridviewProperty("gvJobs", "OptionsViewColumnAutoWidth", False)

F.Intrinsic.Control.If(V.Caller.GSSVersion, >=, "2019.1")
	GUI.FNestExport.GsGCJobs.SetGridviewProperty("gvJobs", "SuppressNothingDates", True)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Caller.GSSVersion, >=, "2020.1")
	GUI.FNestExport.GsGCJobs.SetGridviewProperty("gvJobs", "ShowConditionalFormattingItem", True)
F.Intrinsic.Control.EndIf

'column properties
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","JSS","AllowShowHide", False)

GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","Selected","headerforecolor", V.Color.PRI-GSS-00)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","Selected","headerfontbold", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","Selected","caption","Selected")
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","Selected","readonly", True)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","Selected","allowedit", False)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","Selected","MinWidth", 45)

GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","Job","headerforecolor", V.Color.PRI-GSS-00)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","Job","headerfontbold", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","Job","caption","Job")
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","Job","readonly", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","Job","allowedit", false)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","Job","MinWidth", 45)
'GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","Job","CellForeColor", "Blue")

GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","Suffix","headerforecolor", V.Color.PRI-GSS-00)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","Suffix","headerfontbold", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","Suffix","caption","Suffix")
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","Suffix","readonly", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","Suffix","allowedit", false)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","Suffix","MinWidth", 45)
'GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","Suffix","CellForeColor", "Blue")

GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","Seq","headerforecolor", V.Color.PRI-GSS-00)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","Seq","headerfontbold", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","Seq","caption","Seq")
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","Seq","readonly", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","Seq","allowedit", false)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","Seq","MinWidth", 45)

GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","FGPART","headerforecolor", V.Color.PRI-GSS-00)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","FGPART","headerfontbold", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","FGPART","caption","FG Part")
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","FGPART","readonly", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","FGPART","allowedit", false)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","FGPART","MinWidth", 80)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","FGPART","CellForeColor", "Blue")

GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","LONG_PART","headerforecolor", V.Color.PRI-GSS-00)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","LONG_PART","headerfontbold", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","LONG_PART","caption","FG Part (Long)")
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","LONG_PART","readonly", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","LONG_PART","allowedit", false)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","LONG_PART","MinWidth", 80)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","LONG_PART","CellForeColor", "Blue")
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","LONG_PART","Visible", False)

GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","LONG_REVISION","headerforecolor", V.Color.PRI-GSS-00)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","LONG_REVISION","headerfontbold", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","LONG_REVISION","caption","Rev (Long)")
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","LONG_REVISION","readonly", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","LONG_REVISION","allowedit", false)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","LONG_REVISION","MinWidth", 40)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","LONG_REVISION","Visible", False)

GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","LOCATION","headerforecolor", V.Color.PRI-GSS-00)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","LOCATION","headerfontbold", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","LOCATION","caption","Loc")
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","LOCATION","readonly", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","LOCATION","allowedit", false)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","LOCATION","MinWidth", 40)

GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","description","headerforecolor", V.Color.PRI-GSS-00)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","description","headerfontbold", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","description","caption","FG Description")
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","description","readonly", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","description","allowedit", false)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","description","MinWidth", 120)

GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","EXTRA_DESCRIPTION","headerforecolor", V.Color.PRI-GSS-00)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","EXTRA_DESCRIPTION","headerfontbold", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","EXTRA_DESCRIPTION","caption","Extra Description")
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","EXTRA_DESCRIPTION","readonly", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","EXTRA_DESCRIPTION","allowedit", false)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","EXTRA_DESCRIPTION","MinWidth", 120)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","EXTRA_DESCRIPTION","Visible", False)

GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","DATE_DUE","headerforecolor", V.Color.PRI-GSS-00)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","DATE_DUE","headerfontbold", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","DATE_DUE","caption","Date Due")
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","DATE_DUE","DisplayCustomDatetime", "d")
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","DATE_DUE","readonly", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","DATE_DUE","allowedit", false)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","DATE_DUE","MinWidth", 80)

GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs", "DATE_OPENED", "headerforecolor", V.Color.PRI-GSS-00)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs", "DATE_OPENED", "headerfontbold", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs", "DATE_OPENED", "caption", "Date Created")
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs", "DATE_OPENED", "DisplayCustomDatetime", "d")
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs", "DATE_OPENED", "readonly", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs", "DATE_OPENED", "allowedit", false)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs", "DATE_OPENED", "MinWidth", 80)

GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","WC","headerforecolor", V.Color.PRI-GSS-00)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","WC","headerfontbold", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","WC","caption","WC")
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","WC","readonly", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","WC","allowedit", false)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","WC","MinWidth", 45)

GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","CUSTOMER","headerforecolor", V.Color.PRI-GSS-00)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","CUSTOMER","headerfontbold", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","CUSTOMER","caption","Customer ID")
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","CUSTOMER","readonly", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","CUSTOMER","allowedit", false)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","CUSTOMER","MinWidth", 60)

GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","NAME_CUSTOMER","headerforecolor", V.Color.PRI-GSS-00)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","NAME_CUSTOMER","headerfontbold", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","NAME_CUSTOMER","caption","Customer Name")
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","NAME_CUSTOMER","readonly", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","NAME_CUSTOMER","allowedit", false)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","NAME_CUSTOMER","MinWidth", 120)

GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","RAW_MAT","headerforecolor", V.Color.PRI-GSS-00)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","RAW_MAT","headerfontbold", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","RAW_MAT","caption","Raw Mat")
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","RAW_MAT","readonly", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","RAW_MAT","allowedit", false)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","RAW_MAT","MinWidth", 100)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","RAW_MAT","CellForeColor", "Blue")

GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","LONG_MATERIAL","headerforecolor", V.Color.PRI-GSS-00)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","LONG_MATERIAL","headerfontbold", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","LONG_MATERIAL","caption","Raw Mat (Long)")
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","LONG_MATERIAL","readonly", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","LONG_MATERIAL","allowedit", false)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","LONG_MATERIAL","MinWidth", 100)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","LONG_MATERIAL","CellForeColor", "Blue")
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","LONG_MATERIAL","Visible", False)

GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","LONG_MATERIAL_REVISION","headerforecolor", V.Color.PRI-GSS-00)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","LONG_MATERIAL_REVISION","headerfontbold", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","LONG_MATERIAL_REVISION","caption","Raw Mat Rev (Long)")
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","LONG_MATERIAL_REVISION","readonly", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","LONG_MATERIAL_REVISION","allowedit", false)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","LONG_MATERIAL_REVISION","MinWidth", 40)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","LONG_MATERIAL_REVISION","Visible", False)

GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","RAWMAT_QTY","headerforecolor", V.Color.PRI-GSS-00)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","RAWMAT_QTY","headerfontbold", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","RAWMAT_QTY","caption","RM Qty")
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","RAWMAT_QTY","readonly", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","RAWMAT_QTY","allowedit", false)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","RAWMAT_QTY","MinWidth", 40)

GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","ON_HAND","headerforecolor", V.Color.PRI-GSS-00)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","ON_HAND","headerfontbold", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","ON_HAND","caption","On Hand")
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","ON_HAND","readonly", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","ON_HAND","allowedit", false)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","ON_HAND","MinWidth", 40)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","ON_HAND","DisplayCustomNumeric", "#,##0.00")

GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","UNITS_OPEN","headerforecolor", V.Color.PRI-GSS-00)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","UNITS_OPEN","headerfontbold", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","UNITS_OPEN","caption","WO Qty")
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","UNITS_OPEN","readonly", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","UNITS_OPEN","allowedit", false)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","UNITS_OPEN","MinWidth", 40)

GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","CODE_SORT","headerforecolor", V.Color.PRI-GSS-00)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","CODE_SORT","headerfontbold", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","CODE_SORT","caption","Sort Code")
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","CODE_SORT","readonly", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","CODE_SORT","allowedit", false)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","CODE_SORT","MinWidth", 80)

GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","PRIORITY","headerforecolor", V.Color.PRI-GSS-00)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","PRIORITY","headerfontbold", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","PRIORITY","caption","Priority")
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","PRIORITY","readonly", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","PRIORITY","allowedit", false)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","PRIORITY","MinWidth", 45)

GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","PROJECT","headerforecolor", V.Color.PRI-GSS-00)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","PROJECT","headerfontbold", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","PROJECT","caption","Project")
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","PROJECT","readonly", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","PROJECT","allowedit", false)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","PROJECT","MinWidth", 60)

GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","Phase","headerforecolor", V.Color.PRI-GSS-00)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","Phase","headerfontbold", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","Phase","caption","Phase")
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","Phase","readonly", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","Phase","allowedit", false)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","Phase","MinWidth", 40)

GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","Department","headerforecolor", V.Color.PRI-GSS-00)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","Department","headerfontbold", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","Department","caption","Dept")
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","Department","readonly", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","Department","allowedit", false)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","Department","MinWidth", 45)

GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","SO_HD_LN","headerforecolor", V.Color.PRI-GSS-00)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","SO_HD_LN","headerfontbold", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","SO_HD_LN","caption","SO")
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","SO_HD_LN","readonly", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","SO_HD_LN","allowedit", false)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","SO_HD_LN","MinWidth", 60)

GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","sales_Order","headerforecolor", V.Color.PRI-GSS-00)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","sales_Order","headerfontbold", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","sales_Order","caption","SO HD")
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","sales_Order","readonly", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","sales_Order","allowedit", false)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","sales_Order","MinWidth", 50)

GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","CustPO","headerforecolor", V.Color.PRI-GSS-00)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","CustPO","headerfontbold", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","CustPO","caption","Cust. PO")
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","CustPO","readonly", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","CustPO","allowedit", false)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","CustPO","MinWidth", 50)

GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","sales_Order_line","headerforecolor", V.Color.PRI-GSS-00)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","sales_Order_line","headerfontbold", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","sales_Order_line","caption","SO LN")
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","sales_Order_line","readonly", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","sales_Order_line","allowedit", false)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","sales_Order_line","MinWidth", 40)

GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","CURRENT_SEQUENCE","headerforecolor", V.Color.PRI-GSS-00)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","CURRENT_SEQUENCE","headerfontbold", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","CURRENT_SEQUENCE","caption","Curr. Seq")
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","CURRENT_SEQUENCE","readonly", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","CURRENT_SEQUENCE","allowedit", false)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","CURRENT_SEQUENCE","MinWidth", 60)

GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","CURRENT_OPERATION","headerforecolor", V.Color.PRI-GSS-00)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","CURRENT_OPERATION","headerfontbold", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","CURRENT_OPERATION","caption","Curr. Op")
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","CURRENT_OPERATION","readonly", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","CURRENT_OPERATION","allowedit", false)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","CURRENT_OPERATION","MinWidth", 60)

GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","CURRENT_WORKCENTER","headerforecolor", V.Color.PRI-GSS-00)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","CURRENT_WORKCENTER","headerfontbold", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","CURRENT_WORKCENTER","caption","Curr. WC")
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","CURRENT_WORKCENTER","readonly", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","CURRENT_WORKCENTER","allowedit", false)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","CURRENT_WORKCENTER","MinWidth", 40)

GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","JSS","Visible", False)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","JSS","headerforecolor", V.Color.PRI-GSS-00)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","JSS","headerfontbold", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","JSS","caption","JSS")
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","JSS","readonly", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","JSS","allowedit", false)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","JSS","MinWidth", 60)

GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","CURRENTLY_NESTING","headerforecolor", V.Color.PRI-GSS-00)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","CURRENTLY_NESTING","headerfontbold", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","CURRENTLY_NESTING","caption","Ready?")
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","CURRENTLY_NESTING","readonly", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","CURRENTLY_NESTING","allowedit", false)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","CURRENTLY_NESTING","MinWidth", 60)

GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","DOCUMENT_CONTROL","headerforecolor", V.Color.PRI-GSS-00)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","DOCUMENT_CONTROL","headerfontbold", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","DOCUMENT_CONTROL","Caption", "Document Control")
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","DOCUMENT_CONTROL","MinWidth", 40)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","DOCUMENT_CONTROL","readonly", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","DOCUMENT_CONTROL","allowedit", false)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","DOCUMENT_CONTROL","Icon","DCS-ON")

F.Intrinsic.Control.If(V.Caller.GSSVersion,<>,"2016.2")	
	GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","FLAG_WO_RELEASED","headerforecolor", V.Color.PRI-GSS-00)
	GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","FLAG_WO_RELEASED","headerfontbold", true)
	GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","FLAG_WO_RELEASED","caption","Released?")
	GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","FLAG_WO_RELEASED","readonly", true)
	GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","FLAG_WO_RELEASED","allowedit", false)
	GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","FLAG_WO_RELEASED","MinWidth", 60)
F.Intrinsic.Control.EndIf

GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","exported","headerforecolor", V.Color.PRI-GSS-00)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","exported","headerfontbold", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","exported","caption","XP?")
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","exported","readonly", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","exported","allowedit", false)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","exported","MinWidth", 30)

GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","BDATE","headerforecolor", V.Color.PRI-GSS-00)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","BDATE","headerfontbold", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","BDATE","caption","Schedule Date")
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","BDATE","DisplayCustomDatetime", "d")
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","BDATE","readonly", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","BDATE","allowedit", false)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","BDATE","MinWidth", 80)

GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs", "EXPORT_DATE", "headerforecolor", V.Color.PRI-GSS-00)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs", "EXPORT_DATE", "headerfontbold", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs", "EXPORT_DATE", "caption", "Export On")
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs", "EXPORT_DATE", "readonly", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs", "EXPORT_DATE", "allowedit", false)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs", "EXPORT_DATE", "MinWidth", 80)

GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs", "EXPORT_USER", "headerforecolor", V.Color.PRI-GSS-00)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs", "EXPORT_USER", "headerfontbold", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs", "EXPORT_USER", "caption", "Exported By")
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs", "EXPORT_USER", "readonly", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs", "EXPORT_USER", "allowedit", false)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs", "EXPORT_USER", "MinWidth", 80)

GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs", "EXPORT_FILE", "headerforecolor", V.Color.PRI-GSS-00)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs", "EXPORT_FILE", "headerfontbold", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs", "EXPORT_FILE", "caption", "Exported To")
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs", "EXPORT_FILE", "readonly", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs", "EXPORT_FILE", "allowedit", false)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs", "EXPORT_FILE", "MinWidth", 80)

GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs", "LAST_SCHEDULE_DATE", "headerforecolor", V.Color.PRI-GSS-00)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs", "LAST_SCHEDULE_DATE", "headerfontbold", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs", "LAST_SCHEDULE_DATE", "caption", "Last Scheduled")
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs", "LAST_SCHEDULE_DATE", "DisplayCustomDatetime", "d")
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs", "LAST_SCHEDULE_DATE", "readonly", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs", "LAST_SCHEDULE_DATE", "allowedit", false)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs", "LAST_SCHEDULE_DATE", "MinWidth", 80)

GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs", "SCHEDULED_COMPLETION_DATE", "headerforecolor", V.Color.PRI-GSS-00)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs", "SCHEDULED_COMPLETION_DATE", "headerfontbold", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs", "SCHEDULED_COMPLETION_DATE", "caption", "Scheduled Completion")
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs", "SCHEDULED_COMPLETION_DATE", "DisplayCustomDatetime", "d")
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs", "SCHEDULED_COMPLETION_DATE", "readonly", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs", "SCHEDULED_COMPLETION_DATE", "allowedit", false)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs", "SCHEDULED_COMPLETION_DATE", "MinWidth", 80)

GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs", "SEQ_DUE", "headerforecolor", V.Color.PRI-GSS-00)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs", "SEQ_DUE", "headerfontbold", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs", "SEQ_DUE", "caption", "Seq. Due Date")
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs", "SEQ_DUE", "DisplayCustomDatetime", "d")
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs", "SEQ_DUE", "readonly", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs", "SEQ_DUE", "allowedit", false)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs", "SEQ_DUE", "MinWidth", 80)

GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs", "PARENT_DUE", "headerforecolor", V.Color.PRI-GSS-00)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs", "PARENT_DUE", "headerfontbold", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs", "PARENT_DUE", "caption", "Parent Due Date")
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs", "PARENT_DUE", "DisplayCustomDatetime", "d")
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs", "PARENT_DUE", "readonly", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs", "PARENT_DUE", "allowedit", false)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs", "PARENT_DUE", "MinWidth", 80)

GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","PARENT_WO","headerforecolor", V.Color.PRI-GSS-00)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","PARENT_WO","headerfontbold", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","PARENT_WO","caption","Parent WO")
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","PARENT_WO","readonly", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","PARENT_WO","allowedit", false)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","PARENT_WO","MinWidth", 40)

GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","LATE","headerforecolor", V.Color.PRI-GSS-00)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","LATE", "headerfontbold", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","LATE","caption","Late")
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","LATE","readonly", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","LATE","allowedit", false)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","LATE","MinWidth", 40)

GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","FLAG_HOLD","headerforecolor", V.Color.PRI-GSS-00)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","FLAG_HOLD", "headerfontbold", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","FLAG_HOLD","caption","Job Hold")
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","FLAG_HOLD","readonly", true)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","FLAG_HOLD","allowedit", false)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","FLAG_HOLD","MinWidth", 40)

GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","PRINTED","HeaderForeColor", V.Color.PRI-GSS-00)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","PRINTED", "HeaderFontBold", True)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","PRINTED","Caption","Printed")
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","PRINTED","ReadOnly", True)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","FLAG_HOLD","AllowEdit", False)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","PRINTED","MinWidth", 40)
GUI.FNestExport.GsGCJobs.SetColumnProperty("gvJobs","PRINTED","Visible", True)

'conditional formatting
GUI.FNestExport.GsGCJobs.AddStyleFormatCondition("gvJobs","Selected", "SelectTag", "equal", true)
GUI.FNestExport.GsGCJobs.setstyleFormatConditionproperty("gvJobs","Selected", "SelectTag", "backcolor", "PaleGreen")
GUI.FNestExport.GsGCJobs.SetStyleFormatConditionProperty("gvJobs", "Selected", "SelectTag", "ApplyToRow", True)
F.Intrinsic.Control.If(V.Caller.GSSVersion,<>,"2016.2")	
	GUI.FNestExport.GsGCJobs.AddStyleFormatCondition("gvJobs","FLAG_WO_RELEASED", "Warntag", "equal", 1)
	GUI.FNestExport.GsGCJobs.setstyleFormatConditionproperty("gvJobs","FLAG_WO_RELEASED", "Warntag", "backcolor", "LightCyan")
F.Intrinsic.Control.EndIf

GUI.FNestExport.GsGCJobs.AddStyleFormatCondition("gvJobs","exported", "XPTag", "equal", 1)
GUI.FNestExport.GsGCJobs.setstyleFormatConditionproperty("gvJobs","exported", "XPTag", "backcolor", "LightCoral")

GUI.FNestExport.GsGCJobs.AddStyleFormatCondition("gvJobs", "Job", "LateJob", "Expression", "SCHEDULED_COMPLETION_DATE > DATE_DUE")
GUI.FNestExport.GsGCJobs.SetStyleFormatConditionproperty("gvJobs", "Job", "LateJob", "ForeColor", "Red")
GUI.FNestExport.GsGCJobs.AddStyleFormatCondition("gvJobs", "Job", "NormalJob", "Expression", "SCHEDULED_COMPLETION_DATE <= DATE_DUE")
GUI.FNestExport.GsGCJobs.SetStyleFormatConditionproperty("gvJobs", "Job", "NormalJob", "ForeColor", "Blue")
GUI.FNestExport.GsGCJobs.AddStyleFormatCondition("gvJobs", "Suffix", "LateSuffix", "Expression", "SCHEDULED_COMPLETION_DATE > DATE_DUE")
GUI.FNestExport.GsGCJobs.SetStyleFormatConditionproperty("gvJobs", "Suffix", "LateSuffix", "ForeColor", "Red")
GUI.FNestExport.GsGCJobs.AddStyleFormatCondition("gvJobs", "Suffix", "NormalSuffix", "Expression", "SCHEDULED_COMPLETION_DATE <= DATE_DUE")
GUI.FNestExport.GsGCJobs.SetStyleFormatConditionproperty("gvJobs", "Suffix", "NormalSuffix", "ForeColor", "Blue")

GUI.FNestExport.GsGCJobs.AddStyleFormatCondition("gvJobs", "Late", "LateLate", "Equal", "True")
GUI.FNestExport.GsGCJobs.SetStyleFormatConditionproperty("gvJobs", "Late", "LateLate", "BackColor", "LightCoral")

'load main view
GUI.FNestExport.GsGCJobs.MainView("gvJobs")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Callback", "FNestExport_Unload", "PROJECT", "4980", "PROJECTTITLE", "GCG_4980_NEST_XP", "TASK", "GCG_4980_NEST_XP")
F.Intrinsic.Control.EndTry
Program.Sub.FormatJobGrid.End

Program.Sub.LoadProfile.Start
F.Intrinsic.Control.Try

F.Data.DataTable.CreateFromSQL("ProfDT","Con","Select PROFILE,XPTYPE,DEFAULT_PROFILE,EXPORT_FOLDER,CUSTOM_EXPORT,XP_ON_GENWO,FULL_PART_FLAG,FULL_PART_PATH from GCG_4980_NESTPROFILE where PROFILE in (SELECT DISTINCT PROFILE from GCG_4980_NESTPROFILE where RTRIM(XPTYPE) <> '') order by DEFAULT_PROFILE DESC, PROFILE",true)
F.Intrinsic.Control.If(V.DataTable.ProfDT.RowCount,=,0)
	F.Intrinsic.UI.Msgbox("You need to setup your profiles in the standard nesting maintenance menu.")
	F.Intrinsic.Control.CallSub(Connection, "CONNECT", False)
	F.Intrinsic.Control.End
F.Intrinsic.Control.EndIf
F.Intrinsic.Control.BlockEvents

GUI.FNestExport.ddlProfile.AddItems("DataTable","ProfDT","PROFILE","PROFILE")
F.Data.DataView.Create("ProfDT","ProfVw",22,"DEFAULT_PROFILE = True","")
F.Intrinsic.Control.UnBlockEvents
F.Intrinsic.Control.If(V.DataView.ProfDT!ProfVw.RowCount,>,0)
	GUI.FNestExport.ddlProfile.Text(V.DataView.ProfDT!ProfVw(0).PROFILE!fieldVal)
	V.Global.sProfile.Set(V.DataView.ProfDT!ProfVw(0).PROFILE!fieldVal)
	V.Global.bCustom.Set(V.DataView.ProfDT!ProfVw(0).CUSTOM_EXPORT!fieldVal)
	V.Global.sXPPATH.Set(V.DataView.ProfDT!ProfVw(0).EXPORT_FOLDER!fieldValTrim)
	V.Global.sXPtype.Set(V.DataView.ProfDT!ProfVw(0).XPTYPE!fieldValTrim)
F.Intrinsic.Control.Else
	GUI.FNestExport.ddlProfile.Text(V.DataTable.ProfDT(0).PROFILE!fieldVal)
	V.Global.sProfile.Set(V.DataTable.ProfDT(0).PROFILE!fieldVal)
	V.Global.bCustom.Set(V.DataTable.ProfDT(0).CUSTOM_EXPORT!fieldVal)
	V.Global.sXPPATH.Set(V.DataTable.ProfDT(0).EXPORT_FOLDER!fieldValTrim)
	V.Global.sXPTYPE.Set(V.DataTable.ProfDT(0).EXPORT_FOLDER!fieldValTrim)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.DataTable.ProfDT.RowCount, =, 1)
	GUI.FNestExport.ddlProfile.Enabled(False)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Callback", "FNestExport_Unload", "PROJECT", "4980", "PROJECTTITLE", "GCG_4980_NEST_XP", "TASK", "GCG_4980_NEST_XP")
F.Intrinsic.Control.EndTry
Program.Sub.LoadProfile.End

Program.Sub.GetProfileDetails.Start
F.Intrinsic.Control.Try

V.Local.sSQL.Declare
V.Local.sFilter.Declare

F.Intrinsic.String.Build("PROFILE = '{0}'",V.Screen.FNestExport!ddlProfile.text,V.Local.sFilter)
F.Data.DataView.SetFilter("ProfDT","ProfVw",V.Local.sFilter)

V.Global.sProfile.Set(V.Screen.FNestExport!ddlProfile.text)
V.Global.bCustom.Set(V.DataView.ProfDT!ProfVw(0).CUSTOM_EXPORT!fieldVal)
V.Global.sXPPATH.Set(V.DataView.ProfDT!ProfVw(0).EXPORT_FOLDER!fieldValTrim)
V.Global.sXPtype.Set(V.DataView.ProfDT!ProfVw(0).XPTYPE!fieldValTrim)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Callback", "FNestExport_Unload", "PROJECT", "4980", "PROJECTTITLE", "GCG_4980_NEST_XP", "TASK", "GCG_4980_NEST_XP")
F.Intrinsic.Control.EndTry
Program.Sub.GetProfileDetails.End

Program.Sub.EmptyJobData.Start
F.Intrinsic.Control.Try

F.Data.DataTable.Create("dtJobData",true)
F.Data.DataTable.AddColumn("dtJobData","SELECTED","Boolean")
F.Data.DataTable.AddColumn("dtJobData","EXPORTED","Boolean", False)
F.Data.DataTable.AddColumn("dtJobData","JOB","String")
F.Data.DataTable.AddColumn("dtJobData","SUFFIX","String")
F.Data.DataTable.AddColumn("dtJobData","SEQ","String")
F.Data.DataTable.AddColumn("dtJobData","FGPART","String")
F.Data.DataTable.AddColumn("dtJobData","DESCRIPTION","String")
F.Intrinsic.Control.If(V.Caller.GSSVersion,>,"2016.2")
	F.Data.DataTable.AddColumn("dtJobData","FLAG_WO_RELEASED","Boolean", False)
F.Intrinsic.Control.EndIf
F.Data.DataTable.AddColumn("dtJobData","DATE_DUE","Date")
F.Data.DataTable.AddColumn("dtJobData","CUSTOMER","String")
F.Data.DataTable.AddColumn("dtJobData","NAME_CUSTOMER","String")
F.Data.DataTable.AddColumn("dtJobData","WC","String")
F.Data.DataTable.AddColumn("dtJobData","RAW_MAT","String")
F.Data.DataTable.AddColumn("dtJobData","RAWMAT_QTY","Float")
F.Data.DataTable.AddColumn("dtJobData","CODE_SORT","String")
F.Data.DataTable.AddColumn("dtJobData","PRIORITY","String")
F.Data.DataTable.AddColumn("dtJobData","PROJECT","String")
F.Data.DataTable.AddColumn("dtJobData","PHASE","String")
F.Data.DataTable.AddColumn("dtJobData","DEPARTMENT","String")
F.Data.DataTable.AddColumn("dtJobData","SO_HD_LN","String")
F.Data.DataTable.AddColumn("dtJobData","SALES_ORDER","String")
F.Data.DataTable.AddColumn("dtJobData","SALES_ORDER_LINE","String")
F.Data.DataTable.AddColumn("dtJobData","JSS","String")
F.Data.DataTable.AddColumn("dtJobData","CUSTPO","String")
F.Data.DataTable.AddColumn("dtJobData","BDATE","Date")
F.Data.DataTable.AddColumn("dtJobData","DATE_OPENED","Date")
F.Data.DataTable.AddColumn("dtJobData","UNITS_OPEN","Float")
F.Data.DataTable.AddColumn("dtJobData","CURRENT_OPERATION","String")
F.Data.DataTable.AddColumn("dtJobData","CURRENT_SEQUENCE","String")
F.Data.DataTable.AddColumn("dtJobData","CURRENT_WORKCENTER","String")
F.Data.DataTable.AddColumn("dtJobData", "CURRENTLY_NESTING", "Boolean", False)
F.Data.DataTable.AddColumn("dtJobData", "LOCATION", "String", "")
F.Data.DataTable.AddColumn("dtJobData", "DOCUMENT_CONTROL", "String", "")
F.Data.DataTable.AddColumn("dtJobData", "EXPORT_DATE", "Date")
F.Data.DataTable.AddColumn("dtJobData", "EXPORT_USER", "String", "")
F.Data.DataTable.AddColumn("dtJobData", "EXPORT_FILE", "String", "")
F.Data.DataTable.AddColumn("dtJobData", "LAST_SCHEDULE_DATE", "String", "")
F.Data.DataTable.AddColumn("dtJobData", "SCHEDULED_COMPLETION_DATE", "Date")
F.Data.DataTable.AddColumn("dtJobData", "SEQ_DUE", "Date")
F.Data.DataTable.AddColumn("dtJobData", "PARENT_DUE", "Date")
F.Data.DataTable.AddColumn("dtJobData", "PARENT_WO", "Date")
F.Data.DataTable.AddColumn("dtJobData", "FLAG_HOLD", "Boolean", False)
F.Data.DataTable.AddColumn("dtJobData", "PRINTED", "Boolean", False)
F.Data.DataTable.AddColumn("dtJobData", "LONG_PART", "String", "")
F.Data.DataTable.AddColumn("dtJobData", "LONG_MATERIAL", "String", "")
F.Data.DataTable.AddColumn("dtJobData", "EXTRA_DESCRIPTION", "String", "")
F.Data.DataTable.AddColumn("dtJobData", "LONG_REVISION", "String", "")
F.Data.DataTable.AddColumn("dtJobData", "LONG_MATERIAL_REVISION", "String", "")
F.Data.DataTable.AddColumn("dtJobData", "ON_HAND", "Float", 0)
F.Data.DataTable.AddExpressionColumn("dtJobData", "LATE", "Boolean", "IIF([SCHEDULED_COMPLETION_DATE] > [DATE_DUE], True, False)")

F.Data.Dataview.Create("dtJobData","dvJobData",22)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Callback", "FNestExport_Unload", "PROJECT", "4980", "PROJECTTITLE", "GCG_4980_NEST_XP", "TASK", "GCG_4980_NEST_XP")
F.Intrinsic.Control.EndTry
Program.Sub.EmptyJobData.End

Program.Sub.cmdPopGrid_Click.Start
F.Intrinsic.Control.Try

V.Local.sSql.Declare
V.Local.sFilter.Declare
V.Local.dFromDt.Declare
V.Local.dToDt.Declare
V.Local.bExists.Declare
V.Local.sListVw.Declare
V.Local.icount.Declare

V.Local.dFromDt.Set(V.Screen.FNestExport!dtpFromDate.value)
V.Local.dToDt.Set(V.Screen.FNestExport!dtpToDate.value)

F.Intrinsic.Control.If(V.Local.dFromDt,>,V.Local.dToDt)
	F.Intrinsic.UI.Msgbox("The from date cannot be greater than the to date")
	GUI.FNestExport..SetFocus
F.Intrinsic.Control.EndIf

GUI.FNestExport..Enabled(false)

F.Intrinsic.UI.InvokeWaitDialog("Loading Grid")

F.Intrinsic.Control.If(V.DataTable.dtJobData.Exists)
	F.Intrinsic.Control.If(V.Global.bLoadData.Not)
		F.Intrinsic.Control.If(V.Global.bUnattended.Not)
			F.Intrinsic.Control.CallSub(Serialize, "FORM", "FNestExport", "GRIDCONTROL", "GsGCJobs", "GRIDVIEW", "gvJobs", "REGID", 4980)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

GUI.FNestExport.GsGCJobs.Visible(False)
F.Intrinsic.Control.If(V.Global.bLoadData)
	F.Intrinsic.Control.CallSub(EmptyJobData)
F.Intrinsic.Control.Else
	V.Global.bLoadData.Set(True)
	F.Intrinsic.Control.CallSub(LoadData)
	
	'enable work order scan
	GUI.FNestExport.txtScanJob.Enabled(True)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(FormatJobGrid)
V.Global.bLoadData.Set(False)

F.Intrinsic.Control.CallSub(Deserialize, "FORM", "FNestExport", "GRIDCONTROL", "GsGCJobs", "GRIDVIEW", "gvJobs", "REGID", 4980)

F.Intrinsic.Control.CallSub(LoadTotals, "SELECTED_OVERRIDE", -1)

F.Intrinsic.UI.CloseWaitDialog
GUI.FNestExport.GsGCJobs.Visible(True)

GUI.FNestExport..Enabled(true)
GUI.FNestExport..SetFocus

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Callback", "FNestExport_Unload", "PROJECT", "4980", "PROJECTTITLE", "GCG_4980_NEST_XP", "TASK", "GCG_4980_NEST_XP")
F.Intrinsic.Control.EndTry
Program.Sub.cmdPopGrid_Click.End

Program.Sub.LoadData.Start
F.Intrinsic.Control.Try

V.Local.sSql.Declare
V.Local.sFilter.Declare
V.Local.dFromDt.Declare
V.Local.dToDt.Declare
V.Local.bExists.Declare
V.Local.sListVw.Declare
V.Local.icount.Declare
V.Local.sRet.Declare(String)
V.Local.sWorkcenters.Declare(String)
V.Local.sJSS.Declare(String)
V.Local.sJS.Declare(String)

V.Local.dFromDt.Set(V.Screen.FNestExport!dtpFromDate.value)
V.Local.dToDt.Set(V.Screen.FNestExport!dtpToDate.value)

F.Intrinsic.Control.If(V.DataTable.dtJobData.Exists)
	F.Data.DataTable.Close("dtJobData")
F.Intrinsic.Control.EndIf

F.ODBC.Connection!Con.ExecuteAndReturn("select Machine from Workcenters where Nesting_Intrfc = 'Y'", V.Local.sWorkcenters)
F.Intrinsic.String.Replace(V.Local.sWorkcenters, "#$#", "','", V.Local.sWorkcenters)

'load APS data
F.Intrinsic.Control.If(V.Screen.FNestExport!chkIncludeXP.CheckedAsBoolean)
	F.Intrinsic.String.Build("Select distinct CAST(0 as bit) as SELECTED,Job, sfx as Suffix,Right(JSS,6) as seq, SAR as WC,ROG as Department, JSS, RTRIM(JOB) + RTRIM(SFX) as JOBSUFF from APSV3_UBDETAIL where SEQ < '995000' and SAR in ('{0}') and bdate >= '{1}' and bdate <= '{2}' ", V.Local.sWorkcenters, V.Local.dFromDt.PervasiveDate,V.Local.dToDt.PervasiveDate,V.Local.sSQL)
F.Intrinsic.Control.Else
	F.Intrinsic.String.Build("Select distinct CAST(0 as bit) as SELECTED,Job, sfx as Suffix,Right(JSS,6) as seq, SAR as WC,ROG as Department, JSS, RTRIM(JOB) + RTRIM(SFX) as JOBSUFF from APSV3_UBDETAIL where SEQ < '995000' and SAR in ('{0}') and bdate >= '{1}' and bdate <= '{2}'  and job + sfx not in (Select Job + suffix as JS from V_JOB_HEADER where exported = 'Y')",  V.Local.sWorkcenters, V.Local.dFromDt.PervasiveDate, V.Local.dToDt.PervasiveDate,V.Local.sSQL)
F.Intrinsic.Control.EndIf

F.data.DataTable.CreateFromSQL("APSDT","Con",V.Local.sSQL, True)
F.Intrinsic.Control.CallSub(GetFilter, "DataTable", "APSDT", "Field", "JSS")
V.Local.sJSS.Set(V.Args.Filter)

'load job operations
F.Intrinsic.String.Build("SELECT A.Job + A.suffix + A.Seq as JSS, A.JOB, A.SUFFIX, A.SEQ, A.DATE_DUE SEQ_DUE, RTRIM(' ') as RAW_MAT, CAST(0 as DOUBLE) as RAWMAT_QTY, RTRIM(' ') as CODE_SORT, A.UNITS_OPEN, RTRIM(A.JOB) + RTRIM(A.SUFFIX) as JS, B.EXPORT_DATE, RTRIM(B.EXPORT_USER) EXPORT_USER, RTRIM(B.EXPORT_FILE) EXPORT_FILE from V_JOB_OPERATIONS AS A left join GCG_4980_EXPORT_DATE B on A.JOB = B.JOB and A.SUFFIX = B.SUFFIX and A.SEQ = B.SEQUENCE WHERE LMO = 'L' AND FLAG_CLOSED <> 'Y' AND SEQ < '995000' and JSS in ('{0}')", V.Args.Filter, V.Local.sSql)
F.Data.DataTable.CreateFromSQL("JobOp", "Con", V.Local.sSQL, True)

F.Intrinsic.Control.CallSub(GetFilter, "DataTable", "JobOp", "Field", "JS")
V.Local.sJS.Set(V.Args.Filter)

'load job headers
F.Intrinsic.Control.If(V.Caller.GSSVersion,=,"2016.2")
	F.Intrinsic.String.Build("Select A.job,A.suffix,RTRIM(A.PART) as FGPART, RTRIM(A.LOCATION) LOCATION,RTRIM(A.Description) as Description,A.Date_due,A.CUSTOMER ,RTRIM(' ') as NAME_CUSTOMER,A.PRIORITY ,A.PRODUCT_LINE, A.PROJECT , A.Phase, concat(IF(A.sales_Order like '%0', '', A.sales_order),concat('-',If(A.Sales_Order_Line like '%0', '', A.sales_order_line))) as SO_HD_LN, IF(A.sales_Order like '%0', '', A.sales_order) as sales_order, If(A.Sales_Order_Line like '%0', '', A.sales_order_line) sales_order_line, CAST(IF(RTRIM(IsNull(A.exported, '')) = 'Y', 1, 0) as BIT) EXPORTED, A.DATE_OPENED, RTRIM(A.CUSTOMER_PO) as CustPO, RTRIM(A.JOB) + RTRIM(A.SUFFIX) as JS, RTRIM(A.PARENT_WO) + IF(RTRIM(ISNULL(A.PARENT_SUFFIX_PARENT, '')) = '' or RTRIM(ISNULL(A.PARENT_WO, '')) = '', '', '-' + RTRIM(A.PARENT_SUFFIX_PARENT)) PARENT_WO, B.DATE_DUE PARENT_DUE, CAST(IF(RTRIM(IsNull(A.FLAG_HOLD, '')) = 'Y', 1, 0) as BIT) FLAG_HOLD, CAST(IF(RTRIM(IsNull(A.FLAG_WO_PRTD, '')) = 'Y', 1, 0) as BIT) PRINTED from V_Job_Header A left join V_JOB_HEADER B on A.PARENT_WO = B.JOB and A.PARENT_SUFFIX_PARENT = B.SUFFIX where JS in ('{0}')", V.Args.Filter, V.Local.sSQL)
F.Intrinsic.Control.Else
	F.Intrinsic.String.Build("Select A.job,A.suffix,RTRIM(A.PART) as FGPART, RTRIM(A.LOCATION) LOCATION,RTRIM(A.Description) as Description,A.Date_due,A.CUSTOMER ,RTRIM(' ') as NAME_CUSTOMER,A.PRIORITY ,A.PRODUCT_LINE, A.PROJECT , A.Phase, concat(IF(A.sales_Order like '%0', '', A.sales_order),concat('-',If(A.Sales_Order_Line like '%0', '', A.sales_order_line))) as SO_HD_LN,IF(A.sales_Order like '%0', '', A.sales_order) as sales_order, If(A.Sales_Order_Line like '%0', '', A.sales_order_line) sales_order_line,CAST(IF(RTRIM(IsNull(A.FLAG_WO_RELEASED, '')) = 'Y', 1, 0) as BIT) FLAG_WO_RELEASED, CAST(IF(RTRIM(IsNull(A.exported, '')) = 'Y', 1, 0) as BIT) EXPORTED, A.DATE_OPENED, RTRIM(A.CUSTOMER_PO) as CustPO, RTRIM(A.JOB) + RTRIM(A.SUFFIX) as JS, RTRIM(A.PARENT_WO) + IF(RTRIM(ISNULL(A.PARENT_SUFFIX_PARENT, '')) = '' or RTRIM(ISNULL(A.PARENT_WO, '')) = '', '', '-' + RTRIM(A.PARENT_SUFFIX_PARENT)) PARENT_WO, B.DATE_DUE PARENT_DUE, CAST(IF(RTRIM(IsNull(A.FLAG_HOLD, '')) = 'Y', 1, 0) as BIT) FLAG_HOLD, CAST(IF(RTRIM(IsNull(A.FLAG_WO_PRTD, '')) = 'Y', 1, 0) as BIT) PRINTED from V_Job_Header A left join V_JOB_HEADER B on A.PARENT_WO = B.JOB and A.PARENT_SUFFIX_PARENT = B.SUFFIX where JS in ('{0}')", V.Args.Filter, V.Local.sSQL)
F.Intrinsic.Control.EndIf

'create dictionary for sales order info
F.data.DataTable.CreateFromSQL("JobHD","Con",V.Local.sSQL, True)
F.Data.DataView.Create("JobHD","JobTempVw",22,"Sales_order <> ''","")
F.Data.DataView.ToDataTable("JobHD","JobTempVw","JobHD4Dict")
F.Data.DataView.Close("JobHD","JobTempVw")

'fill in customer names
F.Intrinsic.Control.CallSub(GetFilter, "DataTable", "JobHD", "Field", "CUSTOMER")
F.Intrinsic.String.Build("Select Customer, RTRIM(Name_Customer) from V_CUSTOMER_MASTER where CUSTOMER in ('{0}')", V.Args.Filter, V.Local.sSql)
F.Data.Dictionary.CreateFromSQL("CustDict","Con", V.Local.sSql)
F.Data.Dictionary.SetDefaultReturn("CustDict","")
F.Data.DataTable.FillFromDictionary("JobHD","CustDict","CUSTOMER","NAME_CUSTOMER")
F.Data.Dictionary.Close("CustDict")

F.Intrinsic.Control.If(V.Caller.GSSVersion,>,"2016.2")	
	F.Data.linq.Join("InnerJoin","DataTable","JobOp*!*a","DataTable","JobHD*!*b","a.job=b.job AND a.suffix = b.suffix","a.Job*!*a.suffix*!*a.Seq*!*a.RAW_MAT*!*a.RAWMAT_QTY*!*a.CODE_SORT*!*b.FGPART*!*B.LOCATION*!*b.Description*!*b.Date_due*!*b.CUSTOMER*!*b.NAME_CUSTOMER*!*b.PRIORITY*!*b.PROJECT*!*b.Phase*!*b.SO_HD_LN*!*b.sales_Order*!*b.sales_Order_line*!*a.JSS*!*b.FLAG_WO_RELEASED*!*b.exported*!*B.Date_Opened*!*A.UNITS_OPEN*!*B.CustPO*!*A.EXPORT_DATE*!*A.EXPORT_USER*!*A.EXPORT_FILE*!*A.SEQ_DUE*!*B.PARENT_WO*!*B.PARENT_DUE*!*B.FLAG_HOLD*!*B.PRINTED","","","","JobOpHd",false)
F.Intrinsic.control.Else
	F.Data.linq.Join("InnerJoin","DataTable","JobOp*!*a","DataTable","JobHD*!*b","a.job=b.job AND a.suffix = b.suffix","a.Job*!*a.suffix*!*a.Seq*!*a.RAW_MAT*!*a.RAWMAT_QTY*!*a.CODE_SORT*!*b.FGPART*!*B.LOCATION*!*b.Description*!*b.Date_due*!*b.CUSTOMER*!*b.NAME_CUSTOMER*!*b.PRIORITY*!*b.PROJECT*!*b.Phase*!*b.SO_HD_LN*!*b.sales_Order*!*b.sales_Order_line*!*a.JSS*!*b.exported*!*B.Date_Opened*!*A.UNITS_OPEN*!*B.CustPO*!*A.EXPORT_DATE*!*A.EXPORT_USER*!*A.EXPORT_FILE*!*A.SEQ_DUE*!*B.PARENT_WO*!*B.PARENT_DUE*!*B.FLAG_HOLD*!*B.PRINTED","","","","JobOpHd",false)
F.Intrinsic.Control.EndIf

F.data.DataTable.Close("JobOp")
F.data.DataTable.Close("JobHD")

'fill in Bdate
F.Data.DataTable.AddColumn("APSDT","BDATE","Date")
F.Intrinsic.String.Build("Select distinct JSS,BDate from APSV3_UBDETAIL where JSS in ('{0}') order by bdate,jss desc", V.Local.sJSS, V.Local.sSql)
F.Data.Dictionary.CreateFromSQL("BDateDict","Con", V.Local.sSql)
F.Data.Dictionary.SetDefaultReturn("BDateDict","01/01/1900")
F.Data.DataTable.FillFromDictionary("APSDT","BDateDict","JSS","BDATE")
F.Data.Dictionary.Close("BDateDict")

F.Intrinsic.Control.If(V.Caller.GSSVersion,<>,"2016.2")	
	F.Data.linq.Join("InnerJoin","DataTable","APSDT*!*b","DataTable","JobOpHd*!*a","b.job=a.job AND b.suffix = a.suffix AND a.seq = b.seq","b.SELECTED*!*a.EXPORTED*!*a.JOB*!*a.SUFFIX*!*a.SEQ*!*a.FGPART*!*A.LOCATION*!*a.DESCRIPTION*!*a.FLAG_WO_RELEASED*!*a.DATE_DUE*!*b.BDATE*!*a.CUSTOMER*!*a.NAME_CUSTOMER*!*b.WC*!*a.RAW_MAT*!*a.RAWMAT_QTY*!*a.CODE_SORT*!*a.PRIORITY*!*a.PROJECT*!*a.PHASE*!*b.DEPARTMENT*!*a.SO_HD_LN*!*a.SALES_ORDER*!*a.SALES_ORDER_LINE*!*a.JSS*!*A.DATE_OPENED*!*A.UNITS_OPEN*!*A.CUSTPO*!*A.EXPORT_DATE*!*A.EXPORT_USER*!*A.EXPORT_FILE*!*A.SEQ_DUE*!*A.PARENT_WO*!*A.PARENT_DUE*!*A.FLAG_HOLD*!*A.PRINTED","","","","dtJobData",True)
F.Intrinsic.Control.Else
	F.Data.linq.Join("InnerJoin","DataTable","APSDT*!*b","DataTable","JobOpHd*!*a","b.job=a.job AND b.suffix = a.suffix AND a.seq = b.seq","b.SELECTED*!*a.EXPORTED*!*a.JOB*!*a.SUFFIX*!*a.SEQ*!*a.FGPART*!*A.LOCATION*!*a.DESCRIPTION*!*a.DATE_DUE*!*b.BDATE*!*a.CUSTOMER*!*a.NAME_CUSTOMER*!*b.WC*!*a.RAW_MAT*!*a.RAWMAT_QTY*!*a.CODE_SORT*!*a.PRIORITY*!*a.PROJECT*!*a.PHASE*!*b.DEPARTMENT*!*a.SO_HD_LN*!*a.SALES_ORDER*!*a.SALES_ORDER_LINE*!*a.JSS*!*A.DATE_OPENED*!*A.UNITS_OPEN*!*A.CUSTPO*!*A.EXPORT_DATE*!*A.EXPORT_USER*!*A.EXPORT_FILE*!*A.SEQ_DUE*!*A.PARENT_WO*!*A.PARENT_DUE*!*A.FLAG_HOLD*!*A.PRINTED","","","","dtJobData",True)
F.Intrinsic.Control.EndIf

F.data.DataTable.Close("APSDT")
F.data.DataTable.Close("JobOpHd")

'load material sequences
F.Intrinsic.String.Build("Select job,suffix,seq,part,Hours_Estimated, RTRIM(JOB) + RTRIM(SUFFIX) JS from V_job_operations where LMO = 'M' and SEQ < '995000' and JS in ('{0}')", V.Local.sJS, V.Local.sSql)
F.Data.DataTable.CreateFromSQL("MatSeq","Con", V.Local.sSQL)
F.Data.DataView.Create("MatSeq","TempVw","22")

F.Intrinsic.Control.If(V.DataTable.dtJobData.RowCount,>,0)
	F.Intrinsic.Control.For(V.Local.iCount,0,V.DataTable.dtJobData.RowCount--,1)
		F.Intrinsic.String.Build("Job = '{0}' AND Suffix = '{1}' AND SEQ < '{2}'",V.DataTable.dtJobData(V.Local.icount).job!fieldVal,V.DataTable.dtJobData(V.Local.icount).suffix!fieldVal,V.DataTable.dtJobData(V.Local.icount).Seq!fieldVal,V.Local.sFilter)
		F.Data.DataView.SetFilter("MatSeq","TempVw",V.Local.sFilter)
		F.Data.DataView.SetSort("MatSeq","TempVw","SEQ DESC")
		F.Intrinsic.Control.If(V.DataView.MatSeq!TempVw.RowCount,>,0)
			F.Data.DataTable.SetValue("dtJobData",V.Local.iCount,"RAW_MAT",V.Dataview.MatSeq!TempVw(0).Part!FieldValTrim,"RAWMAT_QTY",V.Dataview.MatSeq!TempVw(0).Hours_Estimated!fieldValFloat)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Next(V.Local.iCount)
F.Intrinsic.Control.EndIf
F.Data.DataView.Close("MatSeq","TempVw")
F.Data.DataTable.Close("MatSeq")

F.Data.Dictionary.createfromdatatable("SODIct","JobHD4Dict","Job","SO_HD_LN")
F.Data.Dictionary.SetDefaultReturn("SODict","")
F.Data.DataTable.FillFromDictionary("dtJobData","SODIct","JOB","SO_HD_LN")
F.Data.dictionary.Close("SODict")

F.Data.Dictionary.createfromdatatable("SODIct","JobHD4Dict","Job","sales_Order")
F.Data.Dictionary.SetDefaultReturn("SODict","")
F.Data.DataTable.FillFromDictionary("dtJobData","SODIct","JOB","sales_Order")
F.Data.dictionary.Close("SODict")

F.Data.Dictionary.createfromdatatable("SODIct","JobHD4Dict","Job","Sales_Order_Line")
F.Data.Dictionary.SetDefaultReturn("SODict","")
F.Data.DataTable.FillFromDictionary("dtJobData","SODIct","JOB","Sales_Order_Line")
F.Data.dictionary.Close("SODict")

F.Data.DataTable.Close("JobHD4Dict")

'inventory fields
F.Data.DataTable.CreateFromSQL("dtInventoryFields", "Con", "select RTRIM(A.PART) PART, RTRIM(CODE_SORT) CODE_SORT, A.QTY_ONHAND, RTRIM(B.TEXT) TEXT from V_INVENTORY_MSTR A Left join V_INV_EXTRA_TEXT B on A.PART = B.PART")

F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtInventoryFields", "PART", "CODE_SORT")
F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
F.Data.DataTable.FillFromDictionary("dtJobData", "dictTemp", "RAW_MAT", "CODE_SORT")
F.Data.Dictionary.Close("dictTemp")

F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtInventoryFields", "PART", "QTY_ONHAND")
F.Data.Dictionary.SetDefaultReturn("dictTemp", 0)
F.Data.DataTable.AddColumn("dtJobData", "ON_HAND", "Float", 0)
F.Data.DataTable.FillFromDictionary("dtJobData", "dictTemp", "RAW_MAT", "ON_HAND")
F.Data.Dictionary.Close("dictTemp")


F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtInventoryFields", "PART", "TEXT")
F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
F.Data.DataTable.AddColumn("dtJobData", "EXTRA_DESCRIPTION", "String", "")
F.Data.DataTable.FillFromDictionary("dtJobData", "dictTemp", "FGPART", "EXTRA_DESCRIPTION")
F.Data.Dictionary.Close("dictTemp")

F.Data.DataTable.Close("dtInventoryFields")

'load current sequence
F.Data.DataTable.AddExpressionColumn("dtJobData", "JOBSUFF", "String", "Trim([JOB]) + TRIM([SUFFIX])")
F.Intrinsic.String.Build("select RTRIM(JOB) + RTRIM(SUFFIX) as JS, RTRIM(SEQ) as SEQ, RTRIM(PART) as WC, RTRIM(OPERATION) as OPERATION from V_JOB_OPERATIONS where FLAG_CLOSED <> 'Y' and LMO = 'L' and SEQ < '990000' and JS in ('{0}') order by JS, SEQ", V.Local.sJS, V.Local.sSql)
F.Data.DataTable.CreateFromSQL("dtCurrentSequence", "Con", V.Local.sSql)

F.Data.Dictionary.CreateFromDataTable("dictCurrentSequence", "dtCurrentSequence", "JS", "SEQ")
F.Data.Dictionary.SetDefaultReturn("dictCurrentSequence", "")
F.Data.DataTable.AddColumn("dtJobData", "CURRENT_SEQUENCE", String)
F.Data.DataTable.FillFromDictionary("dtJobData", "dictCurrentSequence", "JOBSUFF", "CURRENT_SEQUENCE")
F.Data.Dictionary.Close("dictCurrentSequence")

F.Data.Dictionary.CreateFromDataTable("dictCurrentWC", "dtCurrentSequence", "JS", "WC")
F.Data.Dictionary.SetDefaultReturn("dictCurrentWC", "")
F.Data.DataTable.AddColumn("dtJobData", "CURRENT_WORKCENTER", String)
F.Data.DataTable.FillFromDictionary("dtJobData", "dictCurrentWC", "JOBSUFF", "CURRENT_WORKCENTER")
F.Data.Dictionary.Close("dictCurrentWC")

F.Data.Dictionary.CreateFromDataTable("dictCurrentOP", "dtCurrentSequence", "JS", "OPERATION")
F.Data.Dictionary.SetDefaultReturn("dictCurrentOP", "")
F.Data.DataTable.AddColumn("dtJobData", "CURRENT_OPERATION", String)
F.Data.DataTable.FillFromDictionary("dtJobData", "dictCurrentOP", "JOBSUFF", "CURRENT_OPERATION")
F.Data.Dictionary.Close("dictCurrentOP")

F.Data.DataTable.Close("dtCurrentSequence")

'load last schedule date
F.Intrinsic.String.Build("select RTRIM(JS), LastSchedDate from APSV3_JBMASTER where JS in ('{0}')", V.Local.sJS, V.Local.sSql)
F.Data.Dictionary.CreateFromSQL("dictTemp", "Con", V.Local.sSql)
F.Data.DataTable.AddColumn("dtJobData", "LAST_SCHEDULE_DATE", "Date")
F.Data.Dictionary.SetDefaultReturn("dictTemp", V.Ambient.MinDate)
F.Data.DataTable.FillFromDictionary("dtJobData", "dictTemp", "JOBSUFF", "LAST_SCHEDULE_DATE")
F.Data.Dictionary.Close("dictTemp")

'load scheduled completion date
F.Intrinsic.String.Build("select RTRIM(JS), SchedEnd from APSV3_JBMASTER where JS in ('{0}')", V.Local.sJS, V.Local.sSql)
F.Data.Dictionary.CreateFromSQL("dictTemp", "Con", V.Local.sSql)
F.Data.DataTable.AddColumn("dtJobData", "SCHEDULED_COMPLETION_DATE", "Date")
F.Data.Dictionary.SetDefaultReturn("dictTemp", V.Ambient.MinDate)
F.Data.DataTable.FillFromDictionary("dtJobData", "dictTemp", "JOBSUFF", "SCHEDULED_COMPLETION_DATE")
F.Data.Dictionary.Close("dictTemp")

F.Data.DataTable.RemoveColumn("dtJobData", "JOBSUFF")

'add column for if it is currently on a nesting step
F.Data.DataTable.AddExpressionColumn("dtJobData", "CURRENTLY_NESTING", "Boolean", "CURRENT_SEQUENCE = SEQ")

F.Data.DataTable.AddColumn("dtJobData", "DOCUMENT_CONTROL", "String", "")
F.Data.DataTable.AddExpressionColumn("dtJobData", "LATE", "Boolean", "IIF([SCHEDULED_COMPLETION_DATE] > [DATE_DUE], True, False)")

F.Data.DataTable.AddDisplayPartColumn("dtJobData", V.Enum.LongPartType!Part, "FGPART", "LONG_PART", "LONG_REVISION")
F.Data.DataTable.AddDisplayPartColumn("dtJobData", V.Enum.LongPartType!Part, "RAW_MAT", "LONG_MATERIAL", "LONG_MATERIAL_REVISION")

F.Data.Dataview.Create("dtJobData","dvJobData",22)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Callback", "FNestExport_Unload", "PROJECT", "4980", "PROJECTTITLE", "GCG_4980_NEST_XP", "TASK", "GCG_4980_NEST_XP")
F.Intrinsic.Control.EndTry
Program.Sub.LoadData.End

Program.Sub.cmdXP_Click.Start
F.Intrinsic.Control.Try

V.Local.sFilePath.Declare
V.Local.sCustom.Declare
V.Local.bExists.Declare
V.Local.sXPPath.Declare
V.Local.sAppend.Declare(String)
V.Local.sBackup.Declare(String)
V.Local.sFileName.Declare(String)
V.Local.sFullPath.Declare(String)
V.Local.sSQl.Declare(String)

GUI.FNestExport..Enabled(false)

F.Intrinsic.Control.CallSub(GetProfileDetails)

F.Intrinsic.Control.If(V.DataTable.dtJobData.Exists,=,false)

	F.Intrinsic.Control.If(V.Global.bAutoExport)
		F.Intrinsic.Control.CallSub(UnattendedErrorMessage, "MESSAGE", "No valid Jobs found.", "PROJECTTITLE", "Nesting Export", "PROJECT", "4980")
	F.Intrinsic.Control.Else
		F.Intrinsic.UI.Msgbox("No Jobs Populated in grid for Export!")
		GUI.FNestExport..Enabled(true)
		GUI.FNestExport..SetFocus
		F.Intrinsic.Control.ExitSub	
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.DataView.dtJobData!SelJobVw.Exists)
	F.Data.DataView.Close("dtJobData","SelJobVw")
F.Intrinsic.Control.EndIf
F.Data.DataView.Create("dtJobData","SelJobVw",22,"Selected = 1","")
F.Intrinsic.Control.If(V.DataView.dtJobData!SelJobVw.RowCount,=,0)
	
	F.Intrinsic.Control.If(V.Global.bAutoExport)
		F.Intrinsic.Control.CallSub(UnattendedErrorMessage, "MESSAGE", "No valid Jobs found.", "PROJECTTITLE", "Nesting Export", "PROJECT", "4980")
	F.Intrinsic.Control.Else
		F.Intrinsic.UI.Msgbox("No Jobs selected for Export!")
		GUI.FNestExport..Enabled(true)
		GUI.FNestExport..SetFocus
		F.Intrinsic.Control.ExitSub	
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.DataTable.ProfDT.Exists, =, False)
	F.Intrinsic.Control.CallSub(LoadProfile)
F.Intrinsic.Control.EndIf

F.Intrinsic.String.Build("Select IF(MAPID like 'ST%' or MAPID = 'N_A' or MAPID like 'EX%', MAPID,  'C' + RTRIM(MAPID)) MAPID, UCASE(RTRIM(XPFIELD)) as XPFIELD, RTRIM(XPFIELD) XPFIELD_CASE, INDX from GCG_4980_NESTMAINT where enabled = 1 and profile = '{0}' order by INDX ASC ",V.Global.sProfile,V.Local.sSQL)
F.Data.DataTable.CreateFromSQL("dtMapping","Con",V.Local.sSQL, True)

F.intrinsic.UI.InvokeWaitDialog("Compiling Data","Nesting Export")
F.intrinsic.Control.CallSub(Load4XP)
F.Intrinsic.UI.ChangeWaitStatus("Generating Export File")

F.Intrinsic.Control.If(V.DataTable.dtExportJobsData.Exists,=,false)
	GUI.FNestExport..Enabled(true)
	GUI.FNestExport..SetFocus
	F.Intrinsic.UI.CloseWaitDialog
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.SelectCase(V.Global.sXPtype.Trim)
	F.Intrinsic.Control.Case("B")
		F.Intrinsic.Control.CallSub(BoostXP)
		
	F.Intrinsic.Control.Case("S")
		F.Intrinsic.Control.CallSub(RunExport, "Type", "SigmaNest")
		
	F.Intrinsic.Control.Case("E")
		F.Intrinsic.Control.CallSub(RunExport, "Type", "PEP")
		
	F.Intrinsic.Control.Case("N")
		F.Intrinsic.Control.CallSub(RunExport, "Type", "NCELL")
		
	F.Intrinsic.Control.Case("P")
		F.Intrinsic.Control.CallSub(RunExport, "Type", "ProNest")
		
	F.Intrinsic.Control.Case("O")
		F.Intrinsic.Control.CallSub(RunExport, "Type", "OPS")
		
	F.Intrinsic.Control.Case("A")
		F.Intrinsic.Control.CallSub(RunExport, "Type", "DrAbe")
		
	F.Intrinsic.Control.Case("C")
		F.Intrinsic.Control.CallSub(RunExport, "Type", "Custom")
		
	F.Intrinsic.Control.Case("M")
		F.Intrinsic.Control.CallSub(RunExport, "Type", "Metamation")
		
	F.Intrinsic.Control.Case("Y")
		F.Intrinsic.Control.CallSub(BysoftXP)
		
	F.Intrinsic.Control.Case("R")
		F.Intrinsic.Control.CallSub(RunExport, "Type", "Radan")
		
	F.Intrinsic.Control.CaseElse
		
		F.Intrinsic.Control.If(V.Global.bAutoExport)
			F.Intrinsic.Control.CallSub(UnattendedErrorMessage, "MESSAGE", "Please setup the export configuration in the Maintenance form before running an export.", "PROJECTTITLE", "Nesting Export", "PROJECT", "4980")
		F.Intrinsic.Control.Else
			F.Intrinsic.UI.Msgbox("Please setup the export configuration in the Maintenance form before running an export.")
			GUI.FNestExport..Enabled(true)
			GUI.FNestExport..SetFocus
			F.Intrinsic.UI.CloseWaitDialog
			F.Intrinsic.Control.ExitSub	
		F.Intrinsic.Control.EndIf
		
F.Intrinsic.Control.EndSelect
F.Data.DataTable.Close("dtMapping")

'backup export
F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "EXPORT_OPTION", "SETTING", "BACKUP_EXPORT", "PROFILE", V.Global.sProfile)
F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
	F.Intrinsic.Control.If(V.Args.Setting)
		F.Intrinsic.String.Build("{0}\GSS Export Backup\", V.Global.sXPPATH, V.Local.sBackup)
		F.Intrinsic.Control.CallSub(CheckDirectories, "DIRECTORIES", V.Local.sBackup)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Else
	'default is true
	F.Intrinsic.String.Build("{0}\GSS Export Backup\", V.Global.sXPPATH, V.Local.sBackup)
	F.Intrinsic.Control.CallSub(CheckDirectories, "DIRECTORIES", V.Local.sBackup)
F.Intrinsic.Control.EndIf

F.Intrinsic.File.GetFileNameFromFQN(V.Args.Export_File, V.Local.sFileName)
F.Intrinsic.String.Build("{0}{1}", V.Local.sBackup, V.Local.sFileName, V.Local.sFullPath)
F.Intrinsic.String.Build("_Backup_{0}", V.Ambient.Now.FormatYYYYMMDDHHNNSS, V.Local.sAppend)
F.Intrinsic.Control.CallSub(AppendFileName, "File", V.Local.sFullPath, "Append", V.Local.sAppend)

F.Intrinsic.File.CopyFile(V.Args.Export_File, V.Args.New_Name)

F.Intrinsic.Control.if(V.Screen.FNestExport!chkPrintBCWODetail.checkedasboolean)
	F.Intrinsic.Control.CallSub(PrintBarCodeWODet)
F.Intrinsic.Control.EndIf
F.Intrinsic.Control.CallSub(UpdateXP, "File", V.Args.Export_File)
F.Data.DataTable.Close("dtExportJobsData")

F.Intrinsic.Control.If(V.Global.bAutoExport.Not)
	F.Data.DataView.SetValue("dtJobData","SelJobVw",-1,"EXPORTED", True, "EXPORT_DATE", V.Ambient.Now, "EXPORT_USER", V.Caller.User, "EXPORT_FILE", V.Args.Export_File.Trim)
F.Intrinsic.Control.EndIf

F.Intrinsic.UI.CloseWaitDialog

GUI.FNestExport..AlwaysOnTop(True)
GUI.FNestExport..AlwaysOnTop(False)
F.Intrinsic.Control.If(V.Global.bAutoExport.Not)
	F.Intrinsic.UI.Msgbox("Export Successful!")
F.Intrinsic.Control.EndIf

F.Data.DataTable.SetValue("dtJobData", -1, "SELECTED", False)

GUI.FNestExport..Enabled(true)
GUI.FNestExport..SetFocus

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Callback", "FNestExport_Unload", "PROJECT", "4980", "PROJECTTITLE", "GCG_4980_NEST_XP", "TASK", "GCG_4980_NEST_XP")
F.Intrinsic.Control.EndTry
Program.Sub.cmdXP_Click.End

Program.Sub.Load4XP.Start
F.Intrinsic.Control.Try

V.Local.sSQL.Declare
V.Local.sWO.Declare
V.Local.sJob.Declare
V.Local.sJobs.Declare
V.Local.sSuffix.Declare
V.Local.sSeq.Declare
V.Local.icount.Declare
V.Local.sFilter.Declare
V.Local.sCount.Declare
V.Local.sRet.Declare
V.Local.fUnits.declare
V.Local.iCnt.Declare
V.Local.sWCs.Declare
V.Local.sTempSplit.Declare(String)
V.Local.sFormat.Declare(String, "mm/dd/yy")
V.Local.sJSFilter.Declare(String)
V.Local.sSOFilter.Declare(String)
V.Local.sPartFilter1.Declare(String)
V.Local.sPartFilter2.Declare(String)
V.Local.sJobFilter.Declare(String)
V.Local.sExpression.Declare(String)

F.Intrinsic.Control.If(V.DataTable.dtExportJobsData.Exists)
	F.Data.DataTable.Close("dtExportJobsData")
F.Intrinsic.Control.EndIf

'need to grab expressions to check for columns when leaving columns out
F.Intrinsic.String.Build("select RTRIM(VALUE) EXPRESSION from GCG_4980_SETTINGS where PROFILE = '{0}' and TYPE = 'EXPORT_FIELD' and SETTING like 'EX%'", V.Global.sProfile, V.Local.sSQL)
F.Data.DataTable.CreateFromSQL("dtExpressions", "Con", V.Local.sSQL, True)
F.Data.DataView.Create("dtExpressions", "dvExpressions", 22)

F.Data.DataView.ToDataTable("dtJobData", "SelJobVw", "dtJobDataTemp", True)
F.Intrinsic.Control.CallSub(GetFilter, "DataTable", "dtJobDataTemp", "Field", "JSS")
F.Data.DataTable.Close("dtJobDataTemp")
V.Local.sJobs.Set(V.Args.Filter.Trim)
Function.Intrinsic.UI.ChangeWaitStatus("Loading Data", 0) 

'create mapping check dataview
F.Data.DataView.Create("dtMapping", "dvMapCheck", 22)

F.Intrinsic.Control.If(V.Global.sXPtype.trim,=,"O")
	F.Intrinsic.String.Build("SELECT JOB, SUFFIX, SEQ,RTRIM(' ') as UNITS, concat(Concat(concat(Job,concat('-',suffix)),'-'),SEQ) as C01,JOB + SUFFIX + SEQ AS JSS,(SELECT TOP 1 RTRIM(DESCRIPTION) FROM V_JOB_OPERATIONS WHERE JOB = A.JOB AND SUFFIX = A.SUFFIX AND LMO = 'C' AND SEQ > A.SEQ AND SEQ < ISNULL((SELECT TOP 1 SEQ FROM V_JOB_OPERATIONS WHERE JOB = A.JOB AND SUFFIX = A.SUFFIX AND SEQ > A.SEQ AND SEQ < '995000' AND LMO = 'L' ),'995000'))  as C34,Concat(CONCAT(Substring(LEFT(CONVERT(date_due, sql_char),10),1,4),Substring(LEFT(CONVERT(date_due, sql_char),10),6,2)),Substring(LEFT(CONVERT(date_due, sql_char),10),9,2)) as C00,RTRIM(' ') as C33,RTRIM(' ') as C48, job as C88, RTRIM(Suffix) as C89, Seq as C90,RTRIM(' ') as C91, UNITS_OPEN - UNITS_COMPLETE C94, DATE_START C96, JOB + SUFFIX JS, RTRIM(OPERATION) C222, RTRIM(ROUTER_SEQ) C223, UNITS_OPEN C224, HOURS_ESTIMATED C225, UNITS_COMPLETE C226, UNITS_SCRAP C227 from V_JOB_OPERATIONS AS A WHERE LMO = 'L' AND FLAG_CLOSED <> 'Y' AND SEQ < '995000' and job + suffix + Seq in ('{0}') ",V.Local.sJobs,V.Local.sSql)
F.Intrinsic.Control.ElseIf(V.Global.sXPtype.Trim, =, "A")
	F.Intrinsic.String.Build("SELECT JOB, SUFFIX, SEQ,RTRIM(' ') as UNITS, concat(Concat(concat(Job,concat('-',suffix)),'-'),SEQ) as C01,JOB + SUFFIX + SEQ AS JSS,(SELECT TOP 1 RTRIM(DESCRIPTION) FROM V_JOB_OPERATIONS WHERE JOB = A.JOB AND SUFFIX = A.SUFFIX AND LMO = 'C' AND SEQ > A.SEQ AND SEQ < ISNULL((SELECT TOP 1 SEQ FROM V_JOB_OPERATIONS WHERE JOB = A.JOB AND SUFFIX = A.SUFFIX AND SEQ > A.SEQ AND SEQ < '995000' AND LMO = 'L' ),'995000'))  as C34,SUBSTRING(Cast(DATE_DUE as Char(10)), 6, 2) + '/' + SUBSTRING(Cast(DATE_DUE as Char(10)), 9, 2) + '/' + SUBSTRING(Cast(DATE_DUE as Char(10)), 1, 4) as C00,RTRIM(' ') as C33,RTRIM(' ') as C48, job as C88, RTRIM(Suffix) as C89, Seq as C90,RTRIM(' ') as C91, UNITS_OPEN - UNITS_COMPLETE C94, DATE_START C96, JOB + SUFFIX JS, RTRIM(OPERATION) C222, RTRIM(ROUTER_SEQ) C223, UNITS_OPEN C224, HOURS_ESTIMATED C225, UNITS_COMPLETE C226, UNITS_SCRAP C227 from V_JOB_OPERATIONS AS A WHERE LMO = 'L' AND FLAG_CLOSED <> 'Y' AND SEQ < '995000' and job + suffix + Seq in ('{0}') ",V.Local.sJobs,V.Local.sSql)
F.Intrinsic.Control.Else
	F.Intrinsic.String.Build("SELECT JOB, SUFFIX, SEQ,RTRIM(' ') as UNITS, concat(Concat(concat(Job,concat('-',suffix)),'-'),SEQ) as C01,JOB + SUFFIX + SEQ AS JSS,(SELECT TOP 1 RTRIM(DESCRIPTION) FROM V_JOB_OPERATIONS WHERE JOB = A.JOB AND SUFFIX = A.SUFFIX AND LMO = 'C' AND SEQ > A.SEQ AND SEQ < ISNULL((SELECT TOP 1 SEQ FROM V_JOB_OPERATIONS WHERE JOB = A.JOB AND SUFFIX = A.SUFFIX AND SEQ > A.SEQ AND SEQ < '995000' AND LMO = 'L' ),'995000'))  as C34,DATE_DUE as C00,RTRIM(' ') as C33,RTRIM(' ') as C48, job as C88, RTRIM(Suffix) as C89, Seq as C90,RTRIM(' ') as C91, UNITS_OPEN - UNITS_COMPLETE C94, DATE_START C96, JOB + SUFFIX JS, RTRIM(OPERATION) C222, RTRIM(ROUTER_SEQ) C223, UNITS_OPEN C224, HOURS_ESTIMATED C225, UNITS_COMPLETE C226, UNITS_SCRAP C227 from V_JOB_OPERATIONS AS A WHERE LMO = 'L' AND FLAG_CLOSED <> 'Y' AND SEQ < '995000' and job + suffix + Seq in ('{0}') ",V.Local.sJobs,V.Local.sSql)
F.Intrinsic.Control.EndIf

F.Data.DataTable.CreateFromSQL("JobOp","Con",V.Local.sSQL, True)
F.Intrinsic.Control.CallSub(GetFilter, "DataTable", "JobOp", "Field", "JS")
V.Local.sJSFilter.Set(V.Args.Filter.Trim)

'field C91
F.Intrinsic.String.Build("Select distinct JSS,RTRIM(SAR) as WC from APSV3_UBDETAIL where SEQ < '995000' and SAR in (select Machine from Workcenters where Nesting_Intrfc = 'Y') and JSS in ('{0}') order by bdate desc", V.Local.sJobs, V.Local.sSQL)
F.Data.Dictionary.CreateFromSQL("WCDict", "Con", V.Local.sSQL)
F.Data.Dictionary.SetDefaultReturn("WCDict","")
F.Data.DataTable.FillFromDictionary("JobOp","WCDict","JSS","C91")
F.Data.Dictionary.Close("WCDict")

'fields C48, C33, C198
F.Data.DataTable.AddColumn("JobOp", "C198", "String", "")
F.Data.DataView.SetFilter("dtMapping", "dvMapCheck", "[MAPID] in ('C48', 'C33', 'C198', 'C49', 'C87', 'C50', 'C51', 'C52', 'C53', 'C54', 'C55', 'C56', 'C57', 'C58', 'C59', 'C60', 'C61', 'C62', 'C85', 'C86', 'C203')")
F.Intrinsic.Control.CallSub(GetExpressionFieldFilter, "Fields", "C48*!*C33*!*C198")
F.Data.DataView.SetFilter("dtExpressions", "dvExpressions", V.Args.Filter)
F.Intrinsic.Control.If(V.DataView.dtMapping!dvMapCheck.RowCount, >, 0, "OR", V.DataView.dtExpressions!dvExpressions.RowCount, >, 0)
	F.Intrinsic.String.Build("Select job,suffix,seq,RTRIM(part) as part,Hours_Estimated as Units from V_job_operations where LMO = 'M' and JOB + SUFFIX in ('{0}')", V.Local.sJSFilter, V.Local.sSQL)
	F.Data.DataTable.CreateFromSQL("MatSeq","Con", V.Local.sSQL)
	Function.Intrinsic.UI.ChangeWaitStatus("Loading Corresponding Raw Material", 5) 
	F.Data.DataView.Create("MatSeq","TempVw","22")
	F.Intrinsic.Control.If(V.DataTable.JobOp.RowCount,>,0)
		F.Intrinsic.Control.For(V.Local.iCount,0,V.DataTable.JobOp.RowCount--,1)
			F.Intrinsic.String.Build("Job = '{0}' AND Suffix = '{1}' AND SEQ < '{2}'",V.DataTable.JobOp(V.Local.icount).job!fieldVal, V.DataTable.JobOp(V.Local.icount).suffix!fieldVal, V.DataTable.JobOp(V.Local.icount).Seq!fieldVal, V.Local.sFilter)
			F.Data.DataView.SetFilter("MatSeq","TempVw",V.Local.sFilter)
			F.Data.DataView.SetSort("MatSeq","TempVw","SEQ DESC")
			F.Intrinsic.Control.If(V.DataView.MatSeq!TempVw.RowCount,>,0)
				F.Data.DataTable.SetValue("JobOp",V.Local.iCount,"UNITS",V.Dataview.MatSeq!TempVw(0).Units!fieldValFloat)
				F.Data.DataTable.SetValue("JobOp",V.Local.iCount,"C48",V.Dataview.MatSeq!TempVw(0).Part!fieldValTrim)
				F.Data.DataTable.SetValue("JobOp",V.Local.iCount,"C33",V.Dataview.MatSeq!TempVw(0).Part!fieldValTrim)
				F.Data.DataTable.SetValue("JobOp",V.Local.iCount,"C198",V.DataView.MatSeq!TempVw(0).Seq!fieldValTrim)
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.Next(V.Local.iCount)
	F.Intrinsic.Control.EndIf
	F.Data.DataView.Close("MatSeq","TempVw")
	F.Data.DataTable.Close("MatSeq")
F.Intrinsic.Control.EndIf

Function.Intrinsic.UI.ChangeWaitStatus("Loading Corresponding Raw Material", 35)

Function.Intrinsic.UI.ChangeWaitStatus("Compiling data from Work Orders", 70) 
F.Intrinsic.String.Build("Select A.job,A.suffix,RTRIM(concat(A.Job,concat('-',A.suffix))) as C02,RTRIM(A.Router) as C03, RTRIM(REPLACE(A.Description, '{0}', '')) as C04, RTRIM(A.Part) as C05,RTRIM(LEFT(A.Part,17)) as C82,RTRIM(Right(A.Part,3)) as C83,RTRIM(A.LOCATION) as C84,RTRIM(A.CUSTOMER) as C07,RTRIM(' ') as C08,A.AMT_PRICE_PER_UNIT as C09,RTRIM(A.PRIORITY) as  C10,RTRIM(A.PRODUCT_LINE) as C11, RTRIM(A.PROJECT) as C12, RTRIM(A.Phase) as C13, IF(A.SALES_ORDER like '%0' or A.SALES_ORDER = '', '', RTRIM(A.SALES_ORDER) + '-' + RTRIM(A.SALES_ORDER_LINE)) as C14, A.QTY_ORDER as C15,RTRIM(A.CUSTOMER_PO) as C16, RTRIM(A.COMMENTS_1) as C17, RTRIM(A.COMMENTS_2) as C18, RTRIM(A.Comments_3) as C19, RTRIM(A.Drawing_Customer) as C20,RTRIM(A.part_customer) as C21, IF (RTRIM(A.PARENT_WO )= '', '', RTRIM(A.Parent_WO) + '-' + RTRIM(A.PARENT_SUFFIX_PARENT)) as C22,IF(A.SALES_ORDER like '%0', '', RTRIM(A.sales_Order)) as sales_Order, IF(A.SALES_ORDER_LINE like '%0', '', RTRIM(A.Sales_Order_Line)) as Sales_Order_Line, A.DATE_OPENED as C92, A.QTY_ORDER - A.QTY_COMPLETED C93, A.DATE_START C95, A.DATE_DUE C97, Cast(IF(RTrim(IsNull(A.EXPORTED, '')) = '', 0, 1) as BIT) C201, B.LastSchedDate C204, A.FLAG_HOLD C213 from V_Job_Header A left join APSV3_JBMaster B on A.JOB = B.JOB and A.SUFFIX = B.SFX where JS in ('{1}')", V.Ambient.DblQuote.PSQLFriendly, V.Local.sJSFilter, V.Local.sSQL)
F.data.DataTable.CreateFromSQL("JobHD","Con",V.Local.sSQL)

F.Data.DataView.SetFilter("dtMapping", "dvMapCheck", "[MAPID] = 'C08'")
F.Intrinsic.Control.CallSub(GetExpressionFieldFilter, "Fields", "C08")
F.Data.DataView.SetFilter("dtExpressions", "dvExpressions", V.Args.Filter)
F.Intrinsic.Control.If(V.DataView.dtMapping!dvMapCheck.RowCount, >, 0, "OR", V.DataView.dtExpressions!dvExpressions.RowCount, >, 0)
	'shouldn't need to filter this
	F.Data.Dictionary.CreateFromSQL("CustDict","Con","Select RTRIM(Customer), RTRIM(Name_Customer) as C08 from V_CUSTOMER_MASTER")
	F.Data.Dictionary.SetDefaultReturn("CustDict","")
	F.Data.DataTable.FillFromDictionary("JobHD","CustDict","C07","C08")
	F.Data.Dictionary.Close("CustDict")
F.Intrinsic.Control.EndIf

F.Intrinsic.String.Build("select job,suffix, RTRIM(user_1) as C23, RTRIM(user_2) as C24,RTRIM(user_3) as C25,RTRIM(user_4) as C26,RTRIM(user_5 )as C27,RTRIM(user_6 )as C28,RTRIM(user_7) as C29,RTRIM(user_8) as C30,RTRIM(user_9) as C31,RTRIM(user_10) as C32 from V_WO_USER_FLDS where JOB + SUFFIX in ('{0}')", V.Local.sJSFilter, V.Local.sSQL)
F.Data.DataTable.CreateFromSQL("JobHDUsr","Con", V.Local.sSQL)

F.Data.linq.Join("LeftJoin","DataTable","JobHD*!*a","DataTable","JobHDUsr*!*b","a.JOB=b.JOB AND a.SUFFIX = b.SUFFIX","a.JOB*!*a.SUFFIX*!*a.C02*!*a.C03*!*a.C04*!*a.C05*!*a.C07*!*a.C08*!*a.C09*!*a.C10*!*a.C11*!*a.C12*!*a.C13*!*a.C14*!*a.C15*!*a.C16*!*a.C17*!*a.C18*!*a.C19*!*a.C20*!*a.C21*!*a.C22*!*b.C23*!*b.C24*!*b.C25*!*b.C26*!*b.C27*!*b.C28*!*b.C29*!*b.C30*!*b.C31*!*b.C32*!*a.C82*!*a.C83*!*a.C84*!*a.sales_Order*!*a.sales_Order_line*!*a.C92*!*a.C93*!*a.C95*!*A.C97*!*A.C201*!*A.C204*!*A.C213","","","","JobHDWOPart",True)

F.Data.DataTable.Close("JobHD")
F.Data.DataTable.Close("JobHDUsr")

F.Data.linq.Join("LeftJoin","DataTable","JobOp*!*a","DataTable","JobHDWOPart*!*b","a.job=b.job AND a.suffix = b.suffix","a.job*!*a.suffix*!*a.seq*!*a.C00*!*a.C01*!*b.C02*!*b.C03*!*b.C04*!*b.C05*!*b.C07*!*b.C08*!*b.C09*!*b.C10*!*b.C11*!*b.C12*!*b.C13*!*b.C14*!*b.C15*!*b.C16*!*b.C17*!*b.C18*!*b.C19*!*b.C20*!*b.C21*!*b.C22*!*b.C23*!*b.C24*!*b.C25*!*b.C26*!*b.C27*!*b.C28*!*b.C29*!*b.C30*!*b.C31*!*b.C32*!*a.C33*!*a.C34*!*a.C48*!*b.C82*!*b.C83*!*b.C84*!*a.C88*!*a.C89*!*a.C90*!*a.C91*!*b.sales_Order*!*b.sales_Order_line*!*b.C92*!*b.C93*!*b.C95*!*A.C94*!*A.C96*!*B.C97*!*A.C198*!*B.C201*!*B.C204*!*B.C213*!*A.C222*!*A.C223*!*A.C224*!*A.C225*!*A.C226*!*A.C227","","","","WOSEQPART",True)

F.Data.DataTable.Close("JobHDWOPart")
F.Data.DataTable.Close("JobOp")
Function.Intrinsic.UI.ChangeWaitStatus("Compiling data from Order Entry", 80) 

F.Intrinsic.Control.CallSub(GetFilter, "DataTable", "WOSEQPART", "Field", "sales_Order")
V.Local.sSOFilter.Set(V.Args.Filter.Trim)
F.Intrinsic.String.Build("Select RTRIM(a.order_no) as C63,RTRIM(b.order_type) as C64,RTRIM(b.customer_po) as C65,RTRIM(b.User_1 ) as C66,RTRIM(b.User_2) as C67,RTRIM(b.user_3) as C68,RTRIM(b.user_4) as C69,RTRIM(b.user_5) as C70, RTRIM(Left(a.record_no,3)) as C71, RTRIM(a.LINE_TYPE) as C72,RTRIM(a.part) as C73,RTRIM(a.info_1) as C74,RTRIM(a.info_2 ) as C75,RTRIM(a.GROUP_LINES) as C76,RTRIM(a.user_1) as C77, RTRIM(a.user_2) as C78, RTRIM(a.user_3) as C79, RTRIM(a.user_4) as C80, RTRIM(a.user_5) as C81 from v_order_lines a inner join V_order_header b on a.order_no = b.Order_no where A.ORDER_NO in ('{0}')", V.Local.sSOFilter, V.Local.sSQL)

F.data.DataTable.CreateFromSQL("SODet","Con", V.Local.sSQL, True)

F.Data.linq.Join("LeftJoin","DataTable","WOSEQPART*!*a","DataTable","SODet*!*b","a.sales_Order=b.C63 AND a.sales_Order_line = b.C71","a.job*!*a.suffix*!*a.seq*!*a.C00*!*a.C01*!*a.C02*!*a.C03*!*a.C04*!*a.C05*!*a.C07*!*a.C08*!*a.C09*!*a.C10*!*a.C11*!*a.C12*!*a.C13*!*a.C14*!*a.C15*!*a.C16*!*a.C17*!*a.C18*!*a.C19*!*a.C20*!*a.C21*!*a.C22*!*a.C23*!*a.C24*!*a.C25*!*a.C26*!*a.C27*!*a.C28*!*a.C29*!*a.C30*!*a.C31*!*a.C32*!*a.C33*!*a.C34*!*a.C48*!*b.C63*!*b.C64*!*b.C65*!*b.C66*!*b.C67*!*b.C68*!*b.C69*!*b.C70*!*b.C71*!*b.C72*!*b.C73*!*b.C74*!*b.C75*!*b.C76*!*b.C77*!*b.C78*!*b.C79*!*b.C80*!*b.C81*!*a.C82*!*a.C83*!*a.C84*!*a.C88*!*a.C89*!*a.C90*!*a.C91*!*a.C92*!*a.C93*!*a.C95*!*A.C94*!*A.C96*!*A.C97*!*A.C198*!*A.C201*!*A.C204*!*A.C213*!*A.C222*!*A.C223*!*A.C224*!*A.C225*!*A.C226*!*A.C227","","","","WOSO",True)

F.Data.DataTable.Close("WOSEQPART")
F.Data.DataTable.Close("SODet")

F.Intrinsic.Control.CallSub(GetFilter, "DataTable", "WOSO", "Field", "C05")
V.Local.sPartFilter1.Set(V.Args.Filter.Trim)
F.Intrinsic.String.Build("select RTRIM(a.Part) as part, RTRIM(a.location) as location,RTRIM(REPLACE(REPLACE(a.Description, '{0}', ''), ',', '')) as C06,RTRIM(a.Bin) as C35,RTRIM(a.CODE_SORT) as C36,RTRIM(b.Name_vendor) as C37,RTRIM(b.Text_info1) as C38,RTRIM(b.Text_info2) as C39,RTRIM(b.LBS) as C40,RTRIM(C.Stock_Bin) as C41, b.LENGTH as LENGTH, b.WIDTH as WIDTH, A.LENGTH_RAW_MATL as ALTERNATE_LENGTH, A.WIDTH_RAW_MATL as ALTERNATE_WIDTH,c.thickness as C44,a.Density_raw_matl as C45,RTRIM(REPLACE(b.description_2, '{0}', '')) as C46,RTRIM(REPLACE(b.description_3, '{0}', '')) as C47, RTRIM(a.UM_INVENTORY) C202 from V_INVENTORY_MSTR a left Outer join V_INVENTORY_MST2 b on a.part = b.part and a.location = b.location left outer join V_INVENTORY_MST3 c on a.part = c.part and a.location = c.location where A.PART in ('{1}')", V.Ambient.DblQuote.PSQLFriendly, V.Local.sPartFilter1, V.Local.sSQL)
F.Data.DataTable.CreateFromSQL("InvDT","Con", V.Local.sSQL)

F.Data.linq.Join("LeftJoin","DataTable","WOSO*!*a","DataTable","InvDT*!*b","a.C05=b.part AND a.C84 = b.location","a.job*!*a.suffix*!*a.seq*!*a.C00*!*a.C01*!*a.C02*!*a.C03*!*a.C04*!*a.C05*!*b.C06*!*a.C07*!*a.C08*!*a.C09*!*a.C10*!*a.C11*!*a.C12*!*a.C13*!*a.C14*!*a.C15*!*a.C16*!*a.C17*!*a.C18*!*a.C19*!*a.C20*!*a.C21*!*a.C22*!*a.C23*!*a.C24*!*a.C25*!*a.C26*!*a.C27*!*a.C28*!*a.C29*!*a.C30*!*a.C31*!*a.C32*!*a.C33*!*a.C34*!*b.C35*!*b.C36*!*b.C37*!*b.C38*!*b.C39*!*b.C40*!*b.C41*!*B.LENGTH*!*B.WIDTH*!*B.ALTERNATE_LENGTH*!*B.ALTERNATE_WIDTH*!*b.C44*!*b.C45*!*b.C46*!*b.C47*!*a.C48*!*a.C63*!*a.C64*!*a.C65*!*a.C66*!*a.C67*!*a.C68*!*a.C69*!*a.C70*!*a.C71*!*a.C72*!*a.C73*!*a.C74*!*a.C75*!*a.C76*!*a.C77*!*a.C78*!*a.C79*!*a.C80*!*a.C81*!*a.C82*!*a.C83*!*a.C84*!*a.C88*!*a.C89*!*a.C90*!*a.C91*!*a.C92*!*a.C93*!*a.C95*!*A.C94*!*A.C96*!*A.C97*!*A.C198*!*A.C201*!*B.C202*!*A.C204*!*A.C213*!*A.C222*!*A.C223*!*A.C224*!*A.C225*!*A.C226*!*A.C227","","","","WOSOFG",True)

F.Data.DataTable.Close("WOSO")
F.Data.DataTable.Close("InvDT")

Function.Intrinsic.UI.ChangeWaitStatus("Compiling data from Inventory", 90) 

F.Intrinsic.Control.CallSub(GetFilter, "DataTable", "WOSOFG", "Field", "C48")
V.Local.sPartFilter2.Set(V.Args.Filter.Trim)

F.Intrinsic.String.Build("select RTRIM(a.Part) as Part, RTRIM(a.location) as location,RTRIM(a.Product_line) as C49,RTRIM(REPLACE(a.Description, '{0}', '')) as C87,RTRIM(a.Bin) as C50,RTRIM(a.CODE_SORT) as C51,RTRIM(b.Name_vendor) as C52,RTRIM(b.Text_info1) as C53,RTRIM(b.Text_info2) as C54,b.LBS as C55,RTRIM(C.Stock_Bin) as C56, b.length as C57, b.width as C58,c.thickness as C59,a.Density_raw_matl as C60,RTRIM(REPLACE(b.description_2, '{0}', '')) as C61,RTRIM(REPLACE(b.description_3, '{0}', '')) as C62,RTRIM(left(a.part,17)) as C85, RTRIM(Right(a.part,3)) as C86, RTRIM(a.UM_INVENTORY) C203 from V_INVENTORY_MSTR a left Outer join V_INVENTORY_MST2 b on a.part = b.part and a.location = b.location left outer join V_INVENTORY_MST3 c on a.part = c.part and a.location = c.location where A.PART in ('{1}')", V.Ambient.DblQuote.PSQLFriendly, V.Local.sPartFilter2, V.Local.sSQL)
F.Data.DataTable.CreateFromSQL("InvDT","Con", V.Local.sSQL)

F.Data.linq.Join("LeftJoin","DataTable","WOSOFG*!*a","DataTable","InvDT*!*b","a.C48=b.part AND a.C84 = b.location","a.job*!*a.suffix*!*a.seq*!*a.C00*!*a.C01*!*a.C02*!*a.C03*!*a.C04*!*a.C05*!*a.C06*!*a.C07*!*a.C08*!*a.C09*!*a.C10*!*a.C11*!*a.C12*!*a.C13*!*a.C14*!*a.C15*!*a.C16*!*a.C17*!*a.C18*!*a.C19*!*a.C20*!*a.C21*!*a.C22*!*a.C23*!*a.C24*!*a.C25*!*a.C26*!*a.C27*!*a.C28*!*a.C29*!*a.C30*!*a.C31*!*a.C32*!*a.C33*!*a.C34*!*a.C35*!*a.C36*!*a.C37*!*a.C38*!*a.C39*!*a.C40*!*a.C41*!*A.LENGTH*!*A.WIDTH*!*A.ALTERNATE_LENGTH*!*A.ALTERNATE_WIDTH*!*a.C44*!*a.C45*!*a.C46*!*a.C47*!*a.C48*!*b.C49*!*b.C50*!*b.C51*!*b.C52*!*b.C53*!*b.C54*!*b.C55*!*b.C56*!*b.C57*!*b.C58*!*b.C59*!*b.C60*!*b.C61*!*b.C62*!*a.C63*!*a.C64*!*a.C65*!*a.C66*!*a.C67*!*a.C68*!*a.C69*!*a.C70*!*a.C71*!*a.C72*!*a.C73*!*a.C74*!*a.C75*!*a.C76*!*a.C77*!*a.C78*!*a.C79*!*a.C80*!*a.C81*!*a.C82*!*a.C83*!*a.C84*!*b.C85*!*b.C86*!*b.C87*!*a.C88*!*a.C89*!*a.C90*!*a.C91*!*a.C92*!*a.C93*!*a.C95*!*A.C94*!*A.C96*!*A.C97*!*A.C198*!*A.C201*!*A.C202*!*B.C203*!*A.C204*!*A.C213*!*A.C222*!*A.C223*!*A.C224*!*A.C225*!*A.C226*!*A.C227","","","","dtExportJobsData",True)
F.Data.DataTable.Close("WOSOFG")
F.Data.DataTable.Close("InvDT")

'length/width can be stored in either INVENTORY_MSTR or INVENTORY_MST2 depending on the Advanced Inventory Option "Store Part Dimensions in Inches instead of Feet"
F.Data.DataTable.AddExpressionColumn("dtExportJobsData", "C42", "Float", "IIF([LENGTH] = 0, [ALTERNATE_LENGTH], [LENGTH])")
F.Data.DataTable.AddExpressionColumn("dtExportJobsData", "C43", "Float", "IIF([WIDTH] = 0, [ALTERNATE_WIDTH], [WIDTH])")

F.Data.DataTable.AddColumn("dtExportJobsData", "C98", "String")
F.Data.DataTable.AddColumn("dtExportJobsData", "C199", "String", "")
F.Data.DataTable.AddColumn("dtExportJobsData", "C200", "String", "")

'grab WC list for WO Part
'fields C98, C199, and C200
F.Data.DataView.SetFilter("dtMapping", "dvMapCheck", "[MAPID] in ('C98', 'C199', 'C200')")
F.Intrinsic.Control.CallSub(GetExpressionFieldFilter, "Fields", "C98*!*C199*!*C200")
F.Data.DataView.SetFilter("dtExpressions", "dvExpressions", V.Args.Filter)
F.Intrinsic.Control.If(V.DataView.dtMapping!dvMapCheck.RowCount, >, 0, "OR", V.DataView.dtExpressions!dvExpressions.RowCount, >, 0)
	F.Intrinsic.Control.For(V.Local.iCnt, 0, V.DataTable.dtExportJobsData.RowCount--, 1)
		V.Local.sJob.Set(V.DataTable.dtExportJobsData(V.Local.iCnt).Job!FieldValTrim)
		V.Local.sSuffix.Set(V.DataTable.dtExportJobsData(V.Local.iCnt).Suffix!FieldValTrim)
		V.Local.sSeq.Set(V.DataTable.dtExportJobsData(V.Local.iCnt).Seq!FieldValTrim)
		
		'all WCs
		F.Intrinsic.String.Build("Select Rtrim(Part) as Part from Job_Operations where (LMO = 'L' or LMO = 'O') and PART <> 'TASK' and Job = '{0}' and Suffix = '{1}' and Part <> '' Order By  Seq asc", V.Local.sJob, V.Local.sSuffix, V.Local.sSQL)
		F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sWCs)
		F.Intrinsic.String.Split(V.Local.sWCs, "#$#", V.Local.sWCs)
		F.Intrinsic.String.RemoveArrayDuplicates(V.Local.sWCs, V.Local.sWCs)
		F.Intrinsic.String.Join(V.Local.sWCs, "\", V.Local.sWCs)
		F.Data.DataTable.SetValue("dtExportJobsData", V.Local.iCnt, "C98", V.Local.sWCs)
		
		'previous WCs
		F.Intrinsic.String.Build("Select Rtrim(Part) as Part from Job_Operations where (LMO = 'L' or LMO = 'O') and PART <> 'TASK' and Job = '{0}' and Suffix = '{1}' and Part <> '' and SEQ < '{2}' Order By  Seq asc", V.Local.sJob, V.Local.sSuffix, V.Local.sSeq, V.Local.sSQL)
		F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sWCs)
		F.Intrinsic.String.Split(V.Local.sWCs, "#$#", V.Local.sWCs)
		F.Intrinsic.String.RemoveArrayDuplicates(V.Local.sWCs, V.Local.sWCs)
		F.Intrinsic.String.Join(V.Local.sWCs, "\", V.Local.sWCs)
		F.Data.DataTable.SetValue("dtExportJobsData", V.Local.iCnt, "C199", V.Local.sWCs)
		
		'subsequent WCs
		F.Intrinsic.String.Build("Select Rtrim(Part) as Part from Job_Operations where (LMO = 'L' or LMO = 'O') and PART <> 'TASK' and Job = '{0}' and Suffix = '{1}' and Part <> '' and SEQ > '{2}' Order By Seq asc", V.Local.sJob, V.Local.sSuffix, V.Local.sSeq, V.Local.sSQL)
		F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sWCs)
		F.Intrinsic.String.Split(V.Local.sWCs, "#$#", V.Local.sWCs)
		F.Intrinsic.String.RemoveArrayDuplicates(V.Local.sWCs, V.Local.sWCs)
		F.Intrinsic.String.Join(V.Local.sWCs, "\", V.Local.sWCs)
		F.Data.DataTable.SetValue("dtExportJobsData", V.Local.iCnt, "C200", V.Local.sWCs)
	F.Intrinsic.Control.Next(V.Local.iCnt)
F.Intrinsic.Control.EndIf

'adding bom parent part and PO
'fields C99, C101, C102, C104, C106, C108, C117, C118, C119, C120, C121, C100, C109, C110, C103, C105, C107, C112, C113, C114, C115, C116, C111
F.Data.DataView.SetFilter("dtMapping", "dvMapCheck", "[MAPID] in ('C99', 'C101', 'C102', 'C104', 'C106', 'C108', 'C117', 'C118', 'C119', 'C120', 'C121', 'C100', 'C109', 'C110', 'C103', 'C105', 'C107', 'C112', 'C113', 'C114', 'C115', 'C116', 'C111', 'C136', 'C137')")
F.Intrinsic.Control.CallSub(GetExpressionFieldFilter, "Fields", "C99*!*C101*!*C102*!*C104*!*C106*!*C108*!*C117*!*C118*!*C119*!*C120*!*C121*!*C100*!*C109*!*C110*!*C103*!*C105*!*C107*!*C112*!*C113*!*C114*!*C115*!*C116*!*C111*!*C136*!*C137")
F.Data.DataView.SetFilter("dtExpressions", "dvExpressions", V.Args.Filter)

F.Intrinsic.Control.CallSub(GetFilter, "DataTable", "dtExportJobsData", "Field", "JOB")
V.Local.sJobFilter.Set(V.Args.Filter.Trim)

F.Intrinsic.Control.If(V.DataView.dtMapping!dvMapCheck.RowCount, >, 0, "OR", V.DataView.dtExpressions!dvExpressions.RowCount, >, 0)
	F.Intrinsic.String.Build("select RTRIM(A.JOB) + '-' + RTRIM(A.SUFFIX) JS, JOB, RTRIM(A.SUFFIX) SUFFIX, IF (RTRIM(A.PARENT_WO )= '', '', RTRIM(A.Parent_WO) + RTRIM(A.PARENT_SUFFIX_PARENT)) PARENTJOB, RTRIM(A.PRODUCT_LINE) PRODUCT_LINE, RTRIM(A.PART) PART, RTRIM(A.CUSTOMER_PO) CUSTOMER_PO, IF(A.SALES_ORDER like '%0', '', RTRIM(A.SALES_ORDER)) SALES_ORDER, IF(A.SALES_ORDER_LINE like '%0', '', RTRIM(A.SALES_ORDER_LINE)) SALES_ORDER_LINE, RTRIM(B.USER_1) SO_U1, RTRIM(B.USER_2) SO_U2, RTRIM(B.USER_3) SO_U3, RTRIM(B.USER_4) SO_U4, RTRIM(B.USER_5) SO_U5 from V_JOB_HEADER A left join V_ORDER_HEADER B on A.SALES_ORDER = B.ORDER_NO where A.JOB in ('{0}')", V.Local.sJobFilter, V.Local.sSQL)
	F.Data.DataTable.CreateFromSQL("dtJobHeaderFields", "Con", V.Local.sSQL)
	F.Data.DataTable.AddExpressionColumn("dtJobHeaderFields", "FULL_SO", "String", "IIF([SALES_ORDER] <> '', Trim([SALES_ORDER]) + '-' + TRIM(SALES_ORDER_LINE), '')")
	
	'direct BOM parent fields
	F.Data.Dictionary.CreateFromDataTable("plDictionary", "dtJobHeaderFields", "JS", "PRODUCT_LINE")
	F.Data.Dictionary.SetDefaultReturn("plDictionary", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C99", "String")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "plDictionary", "C22", "C99")
	F.Data.Dictionary.Close("plDictionary")
	
	'part
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtJobHeaderFields", "JS", "PART")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C101_TEMP", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C22", "C101_TEMP")
	F.Data.Dictionary.Close("dictTemp")
	F.Data.DataTable.AddExpressionColumn("dtExportJobsData", "C101", "String", "[C101_TEMP]")
	
	'po
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtJobHeaderFields", "JS", "CUSTOMER_PO")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C102_TEMP", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C22", "C102_TEMP")
	F.Data.Dictionary.Close("dictTemp")
	F.Data.DataTable.AddExpressionColumn("dtExportJobsData", "C102", "String", "[C102_TEMP]")
	
	'so
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtJobHeaderFields", "JS", "SALES_ORDER")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C104_TEMP", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C22", "C104_TEMP")
	F.Data.Dictionary.Close("dictTemp")
	F.Data.DataTable.AddExpressionColumn("dtExportJobsData", "C104", "String", "[C104_TEMP]")
	
	'so line
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtJobHeaderFields", "JS", "SALES_ORDER_LINE")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C106_TEMP", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C22", "C106_TEMP")
	F.Data.Dictionary.Close("dictTemp")
	F.Data.DataTable.AddExpressionColumn("dtExportJobsData", "C106", "String", "[C106_TEMP]")
	
	'full so
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtJobHeaderFields", "JS", "FULL_SO")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C108_TEMP", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C22", "C108_TEMP")
	F.Data.Dictionary.Close("dictTemp")
	F.Data.DataTable.AddExpressionColumn("dtExportJobsData", "C108", "String", "[C108_TEMP]")
	
	'user 1
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtJobHeaderFields", "JS", "SO_U1")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C117", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C22", "C117")
	F.Data.Dictionary.Close("dictTemp")
	
	'user 2
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtJobHeaderFields", "JS", "SO_U2")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C118", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C22", "C118")
	F.Data.Dictionary.Close("dictTemp")
	
	'user 3
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtJobHeaderFields", "JS", "SO_U3")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C119", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C22", "C119")
	F.Data.Dictionary.Close("dictTemp")
	
	'user 4
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtJobHeaderFields", "JS", "SO_U4")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C120", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C22", "C120")
	F.Data.Dictionary.Close("dictTemp")
	
	'user 5
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtJobHeaderFields", "JS", "SO_U5")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C121", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C22", "C121")
	F.Data.Dictionary.Close("dictTemp")
	
	'top level BOM Parent fields
	F.Data.DataView.Create("dtJobHeaderFields", "dvTopParent", 22, "[SUFFIX] = '000'", "")
	F.Data.DataView.ToDataTable("dtJobHeaderFields", "dvTopParent", "dtTopParent")
	F.Data.DataView.Close("dtJobHeaderFields", "dvTopParent")
	
	'pl
	F.Data.Dictionary.CreateFromDataTable("topPlDictionary", "dtTopParent", "JOB", "PRODUCT_LINE")
	F.Data.Dictionary.SetDefaultReturn("topPlDictionary", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C100", "String")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "topPlDictionary", "C88", "C100")
	F.Data.Dictionary.Close("topPlDictionary")
	
	'part
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtTopParent", "JOB", "PART")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C109_TEMP", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C88", "C109_TEMP")
	F.Data.Dictionary.Close("dictTemp")
	F.Data.DataTable.AddExpressionColumn("dtExportJobsData", "C109", "String", "[C109_TEMP]")
	
	'po
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtTopParent", "JOB", "CUSTOMER_PO")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C110_TEMP", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C88", "C110_TEMP")
	F.Data.Dictionary.Close("dictTemp")
	F.Data.DataTable.AddExpressionColumn("dtExportJobsData", "C110", "String", "[C110_TEMP]")
	
	'so
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtTopParent", "JOB", "SALES_ORDER")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C103_TEMP", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C88", "C103_TEMP")
	F.Data.Dictionary.Close("dictTemp")
	F.Data.DataTable.AddExpressionColumn("dtExportJobsData", "C103", "String", "[C103_TEMP]")
	
	'so line
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtTopParent", "JOB", "SALES_ORDER_LINE")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C105_TEMP", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C88", "C105_TEMP")
	F.Data.Dictionary.Close("dictTemp")
	F.Data.DataTable.AddExpressionColumn("dtExportJobsData", "C105", "String", "[C105_TEMP]")
	
	'full so
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtTopParent", "JOB", "FULL_SO")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C107_TEMP", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C88", "C107_TEMP")
	F.Data.Dictionary.Close("dictTemp")
	F.Data.DataTable.AddExpressionColumn("dtExportJobsData", "C107", "String", "[C107_TEMP]")
	
	'user 1
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtTopParent", "JOB", "SO_U1")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C112", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C88", "C112")
	F.Data.Dictionary.Close("dictTemp")
	
	'user 2
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtTopParent", "JOB", "SO_U2")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C113", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C88", "C113")
	F.Data.Dictionary.Close("dictTemp")
	
	'user 3
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtTopParent", "JOB", "SO_U3")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C114", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C88", "C114")
	F.Data.Dictionary.Close("dictTemp")
	
	'user 4
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtTopParent", "JOB", "SO_U4")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C115", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C88", "C115")
	F.Data.Dictionary.Close("dictTemp")
	
	'user 5
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtTopParent", "JOB", "SO_U5")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C116", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C88", "C116")
	F.Data.Dictionary.Close("dictTemp")
	
	F.Data.DataTable.Close("dtTopParent")
	F.Data.DataTable.Close("dtJobHeaderFields")
	
	F.Data.DataTable.AddExpressionColumn("dtExportJobsData", "C111", "String", "IIF([C22] = '', '', [C88] + '-000')")
F.Intrinsic.Control.EndIf

'now load bom so line user fields
'fields C122, C123, C124, C125, C126, C127, C128, C129, C130, C131, C132, C133, C134, C135
F.Data.DataView.SetFilter("dtMapping", "dvMapCheck", "[MAPID] in ('C122', 'C123', 'C124', 'C125', 'C126', 'C127', 'C128', 'C129', 'C130', 'C131', 'C132', 'C133', 'C134', 'C135')")
F.Intrinsic.Control.CallSub(GetExpressionFieldFilter, "Fields", "C122*!*C123*!*C124*!*C125*!*C126*!*C127*!*C128*!*C129*!*C130*!*C131*!*C132*!*C133*!*C134*!*C135")
F.Data.DataView.SetFilter("dtExpressions", "dvExpressions", V.Args.Filter)
F.Intrinsic.Control.If(V.DataView.dtMapping!dvMapCheck.RowCount, >, 0, "OR", V.DataView.dtExpressions!dvExpressions.RowCount, >, 0)
	F.Intrinsic.String.Build("select RTRIM(ORDER_NO) ORDER_NO, SUBSTRING(RECORD_NO, 1, 3) LINE, RTRIM(ORDER_NO) + '-' + SUBSTRING(RECORD_NO, 1, 3) as FULL_SO, RTRIM(USER_1) USER_1, RTRIM(USER_2) USER_2, RTRIM(USER_3) USER_3, RTRIM(USER_4) USER_4, RTRIM(USER_5) USER_5, RTRIM(INFO_1) INFO_1, RTRIM(INFO_2) INFO_2 from V_ORDER_LINES where ORDER_NO in ('{0}')", V.Local.sSOFilter, V.Local.sSQL)
	F.Data.DataTable.CreateFromSQL("dtSOLineFields", "Con", V.Local.sSQL)
	
	F.Data.DataTable.AddColumn("dtExportJobsData", "C122", "String", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C123", "String", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C124", "String", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C125", "String", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C126", "String", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C127", "String", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C128", "String", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C129", "String", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C130", "String", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C131", "String", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C132", "String", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C133", "String", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C134", "String", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C135", "String", "")
	
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtSOLineFields", "FULL_SO", "USER_1")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C107", "C122")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C108", "C129")
	F.Data.Dictionary.Close("dictTemp")
	
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtSOLineFields", "FULL_SO", "USER_2")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C107", "C123")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C108", "C130")
	F.Data.Dictionary.Close("dictTemp")
	
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtSOLineFields", "FULL_SO", "USER_3")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C107", "C124")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C108", "C131")
	F.Data.Dictionary.Close("dictTemp")
	
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtSOLineFields", "FULL_SO", "USER_4")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C107", "C125")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C108", "C132")
	F.Data.Dictionary.Close("dictTemp")
	
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtSOLineFields", "FULL_SO", "USER_5")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C107", "C126")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C108", "C133")
	F.Data.Dictionary.Close("dictTemp")
	
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtSOLineFields", "FULL_SO", "INFO_1")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C107", "C127")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C108", "C134")
	F.Data.Dictionary.Close("dictTemp")
	
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtSOLineFields", "FULL_SO", "INFO_2")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C107", "C128")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C108", "C135")
	F.Data.Dictionary.Close("dictTemp")
	
	F.Data.DataTable.Close("dtSOLineFields")
F.Intrinsic.Control.EndIf

F.Data.DataView.SetFilter("dtMapping", "dvMapCheck", "[MAPID] in ('C136', 'C137')")
F.Intrinsic.Control.CallSub(GetExpressionFieldFilter, "Fields", "C136*!*C137")
F.Data.DataView.SetFilter("dtExpressions", "dvExpressions", V.Args.Filter)
F.Intrinsic.Control.If(V.DataView.dtMapping!dvMapCheck.RowCount, >, 0, "OR", V.DataView.dtExpressions!dvExpressions.RowCount, >, 0)
	F.Data.DataTable.AddColumn("dtExportJobsData", "C136", "String", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C137", "String", "")

	'add WC list for BOM Parent Part and top level BOM Parent part
	'fields C136, C137
	F.Intrinsic.Control.For(V.Local.iCnt, 0, V.DataTable.dtExportJobsData.RowCount--, 1)
		'direct BOM Parent WC list
		F.Intrinsic.Control.If(V.DataTable.dtExportJobsData(V.Local.iCnt).C22!FieldValTrim, !=, "")
			F.Intrinsic.String.Split(V.DataTable.dtExportJobsData(V.Local.iCnt).C22!FieldValTrim, "-", V.Local.sTempSplit)
			V.Local.sJob.Set(V.Local.sTempSplit(0).Trim)
			V.Local.sSuffix.Set(V.Local.sTempSplit(1).Trim)
			
			F.Intrinsic.String.Build("Select Rtrim(Part) as Part from Job_Operations where (LMO = 'L' or LMO = 'O') and PART <> 'TASK' and Job = '{0}' and Suffix = '{1}' and Part <> '' Order By  Seq asc", V.Local.sJob, V.Local.sSuffix, V.Local.sSQL)
			F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sWCs)
			F.Intrinsic.String.Split(V.Local.sWCs, "#$#", V.Local.sWCs)
			F.Intrinsic.String.RemoveArrayDuplicates(V.Local.sWCs, V.Local.sWCs)
			F.Intrinsic.String.Join(V.Local.sWCs, "\", V.Local.sWCs)
			F.Data.DataTable.SetValue("dtExportJobsData", V.Local.iCnt, "C136", V.Local.sWCs)
		F.Intrinsic.Control.EndIf
		
		'top level BOM Parent WC list
		F.Intrinsic.Control.If(V.DataTable.dtExportJobsData(V.Local.iCnt).C111!FieldValTrim, !=, "")
			F.Intrinsic.String.Split(V.DataTable.dtExportJobsData(V.Local.iCnt).C111!FieldValTrim, "-", V.Local.sTempSplit)
			V.Local.sJob.Set(V.Local.sTempSplit(0).Trim)
			V.Local.sSuffix.Set(V.Local.sTempSplit(1).Trim)
			
			F.Intrinsic.String.Build("Select Rtrim(Part) as Part from Job_Operations where (LMO = 'L' or LMO = 'O') and PART <> 'TASK' and Job = '{0}' and Suffix = '{1}' and Part <> '' Order By  Seq asc", V.Local.sJob, V.Local.sSuffix, V.Local.sSQL)
			F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sWCs)
			F.Intrinsic.String.Split(V.Local.sWCs, "#$#", V.Local.sWCs)
			F.Intrinsic.String.RemoveArrayDuplicates(V.Local.sWCs, V.Local.sWCs)
			F.Intrinsic.String.Join(V.Local.sWCs, "\", V.Local.sWCs)
			F.Data.DataTable.SetValue("dtExportJobsData", V.Local.iCnt, "C137", V.Local.sWCs)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Next(V.Local.iCnt)
	V.Local.sTempSplit.Redim(0, 0)
F.Intrinsic.Control.EndIf

'ship to values
'fields C138, C150, C162, C139, C151, C163, C140, C152, C164, C141, C153, C165, C142, C154, C166, C143, C155, C167, C144, C156, C168, C145, C157, C169, C146, C158, C170, C147, C159, C171, C148, C160, C172, C149, C161, C173
F.Data.DataView.SetFilter("dtMapping", "dvMapCheck", "[MAPID] in ('C138', 'C150', 'C162', 'C139', 'C151', 'C163', 'C140', 'C152', 'C164', 'C141', 'C153', 'C165', 'C142', 'C154', 'C166', 'C143', 'C155', 'C167', 'C144', 'C156', 'C168', 'C145', 'C157', 'C169', 'C146', 'C158', 'C170', 'C147', 'C159', 'C171', 'C148', 'C160', 'C172', 'C149', 'C161', 'C173')")
F.Intrinsic.Control.CallSub(GetExpressionFieldFilter, "Fields", "C138*!*C150*!*C162*!*C139*!*C151*!*C163*!*C140*!*C152*!*C164*!*C141*!*C153*!*C165*!*C142*!*C154*!*C166*!*C143*!*C155*!*C167*!*C144*!*C156*!*C168*!*C145*!*C157*!*C169*!*C146*!*C158*!*C170*!*C147*!*C159*!*C171*!*C148*!*C160*!*C172*!*C149*!*C161*!*C173")
F.Data.DataView.SetFilter("dtExpressions", "dvExpressions", V.Args.Filter)
F.Intrinsic.Control.If(V.DataView.dtMapping!dvMapCheck.RowCount, >, 0, "OR", V.DataView.dtExpressions!dvExpressions.RowCount, >, 0)
	F.Intrinsic.String.Build("select RTRIM(ORDER_NO) ORDER_NO, RTRIM(ORDER_SHIP_ID) ORDER_SHIP_ID, RTRIM(NAME_CUSTOMER_SHIP) NAME_CUSTOMER_SHIP, RTRIM(ADDRESS_1_SHIP) ADDRESS_1_SHIP, RTRIM(ADDRESS_2_SHIP) ADDRESS_2_SHIP, RTRIM(ADDRESS_3_SHIP) ADDRESS_3_SHIP, RTRIM(ADDRESS_4_SHIP) ADDRESS_4_SHIP, RTRIM(ADDRESS_5_SHIP) ADDRESS_5_SHIP, RTRIM(CITY_SHIP) CITY_SHIP, RTRIM(STATE_SHIP) STATE_SHIP, RTRIM(CODE_ZIP_SHIP) CODE_ZIP_SHIP, RTRIM(COUNTRY_SHIP) COUNTRY_SHIP, RTRIM(ATTENTION_SHIP) ATTENTION_SHIP from V_ORDER_SHIP_TO where ORDER_NO in ('{0}')", V.Local.sSOFilter, V.Local.sSQL)
	F.Data.DataTable.CreateFromSQL("dtShipFields", "Con", V.Local.sSQL)
	
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtShipFields", "ORDER_NO", "ORDER_SHIP_ID")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C138", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C63", "C138")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C150", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C104", "C150")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C162", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C103", "C162")
	F.Data.Dictionary.Close("dictTemp")
	
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtShipFields", "ORDER_NO", "NAME_CUSTOMER_SHIP")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C139", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C63", "C139")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C151", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C104", "C151")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C163", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C103", "C163")
	F.Data.Dictionary.Close("dictTemp")
	
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtShipFields", "ORDER_NO", "ADDRESS_1_SHIP")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C140", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C63", "C140")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C152", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C104", "C152")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C164", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C103", "C164")
	F.Data.Dictionary.Close("dictTemp")
	
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtShipFields", "ORDER_NO", "ADDRESS_2_SHIP")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C141", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C63", "C141")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C153", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C104", "C153")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C165", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C103", "C165")
	F.Data.Dictionary.Close("dictTemp")
	
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtShipFields", "ORDER_NO", "ADDRESS_3_SHIP")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C142", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C63", "C142")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C154", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C104", "C154")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C166", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C103", "C166")
	F.Data.Dictionary.Close("dictTemp")
	
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtShipFields", "ORDER_NO", "ADDRESS_4_SHIP")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C143", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C63", "C143")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C155", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C104", "C155")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C167", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C103", "C167")
	F.Data.Dictionary.Close("dictTemp")
	
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtShipFields", "ORDER_NO", "ADDRESS_5_SHIP")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C144", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C63", "C144")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C156", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C104", "C156")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C168", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C103", "C168")
	F.Data.Dictionary.Close("dictTemp")
	
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtShipFields", "ORDER_NO", "CITY_SHIP")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C145", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C63", "C145")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C157", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C104", "C157")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C169", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C103", "C169")
	F.Data.Dictionary.Close("dictTemp")
	
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtShipFields", "ORDER_NO", "STATE_SHIP")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C146", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C63", "C146")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C158", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C104", "C158")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C170", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C103", "C170")
	F.Data.Dictionary.Close("dictTemp")
	
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtShipFields", "ORDER_NO", "CODE_ZIP_SHIP")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C147", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C63", "C147")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C159", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C104", "C159")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C171", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C103", "C171")
	F.Data.Dictionary.Close("dictTemp")
	
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtShipFields", "ORDER_NO", "COUNTRY_SHIP")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C148", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C63", "C148")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C160", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C104", "C160")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C172", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C103", "C172")
	F.Data.Dictionary.Close("dictTemp")
	
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtShipFields", "ORDER_NO", "ATTENTION_SHIP")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C149", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C63", "C149")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C161", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C104", "C161")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C173", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C103", "C173")
	F.Data.Dictionary.Close("dictTemp")
	
	F.Data.DataTable.Close("dtShipFields")
F.Intrinsic.Control.EndIf

'grab WG
F.Data.DataView.SetFilter("dtMapping", "dvMapCheck", "[MAPID] = 'C205'")
F.Intrinsic.Control.CallSub(GetExpressionFieldFilter, "Fields", "C205")
F.Data.DataView.SetFilter("dtExpressions", "dvExpressions", V.Args.Filter)
F.Intrinsic.Control.If(V.DataView.dtMapping!dvMapCheck.RowCount, >, 0, "OR", V.DataView.dtExpressions!dvExpressions.RowCount, >, 0)
	'shouldn't need to filter this
	F.Data.Dictionary.CreateFromSQL("dictTemp", "Con", "select RTRIM(WORKCENTER), RTRIM(WORKGROUP) from V_WORKGROUP_LINE")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C205", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C91", "C205")
	F.Data.Dictionary.Close("dictTemp")
F.Intrinsic.Control.EndIf

'get next sequence information
F.Intrinsic.Control.CallSub(GetOtherSequenceInfo)

'grab router info
'fields C206 - C211
'router is C03
F.Data.DataView.SetFilter("dtMapping", "dvMapCheck", "[MAPID] in ('C206', 'C207', 'C208', 'C209', 'C210', 'C211', 'C212')")
F.Intrinsic.Control.CallSub(GetExpressionFieldFilter, "Fields", "C206*!*C207*!*C208*!*C209*!*C210*!*C211*!*C212")
F.Data.DataView.SetFilter("dtExpressions", "dvExpressions", V.Args.Filter)
F.Intrinsic.Control.If(V.DataView.dtMapping!dvMapCheck.RowCount, >, 0, "OR", V.DataView.dtExpressions!dvExpressions.RowCount, >, 0)
	F.Intrinsic.Control.CallSub(GetFilter, "DataTable", "dtExportJobsData", "Field", "C03")
	F.Intrinsic.String.Build("select RTRIM(ROUTER) ROUTER, RTRIM(PROD_LINE) PRODUCT_LINE, SCRAP, RTRIM(CUSTOMER) ROUTER_CUSTOMER, RTRIM(PART_CUSTOMER) PART_CUSTOMER, RTRIM(DRAWING_CUSTOMER) DRAWING_CUSTOMER, RTRIM(SORT_1) SORT_1, RTRIM(SORT_2) SORT_2 from V_ROUTER_HEADER where ROUTER in ('{0}')", V.Args.Filter, V.Local.sSQL)
	F.Data.DataTable.CreateFromSQL("dtRouterInfo", "Con", V.Local.sSQL)
	
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtRouterInfo", "ROUTER", "PRODUCT_LINE")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C206", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C03", "C206")
	F.Data.Dictionary.Close("dictTemp")
	
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtRouterInfo", "ROUTER", "SCRAP")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", 0)
	F.Data.DataTable.AddColumn("dtExportJobsData", "C207", "Float", 0)
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C03", "C207")
	F.Data.Dictionary.Close("dictTemp")
	
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtRouterInfo", "ROUTER", "ROUTER_CUSTOMER")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C208", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C03", "C208")
	F.Data.Dictionary.Close("dictTemp")
	
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtRouterInfo", "ROUTER", "PART_CUSTOMER")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C209", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C03", "C209")
	F.Data.Dictionary.Close("dictTemp")
	
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtRouterInfo", "ROUTER", "DRAWING_CUSTOMER")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C210", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C03", "C210")
	F.Data.Dictionary.Close("dictTemp")
	
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtRouterInfo", "ROUTER", "SORT_1")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C211", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C03", "C211")
	F.Data.Dictionary.Close("dictTemp")
	
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtRouterInfo", "ROUTER", "SORT_2")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C212", "String", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "C03", "C212")
	F.Data.Dictionary.Close("dictTemp")
	
	F.Data.DataTable.Close("dtRouterInfo")
F.Intrinsic.Control.EndIf

'long part fields
F.Data.DataView.SetFilter("dtMapping", "dvMapCheck", "[MAPID] in ('C214', 'C215', 'C216')")
F.Intrinsic.Control.CallSub(GetExpressionFieldFilter, "Fields", "C214*!*C215*!*C216")
F.Data.DataView.SetFilter("dtExpressions", "dvExpressions", V.Args.Filter)
F.Intrinsic.Control.If(V.DataView.dtMapping!dvMapCheck.RowCount, >, 0, "OR", V.DataView.dtExpressions!dvExpressions.RowCount, >, 0)
	F.Data.DataTable.AddDisplayPartColumn("dtExportJobsData", V.Enum.LongPartType!Part, "C05", "C214", "C215")
	F.Data.DataTable.AddDisplayPartColumn("dtExportJobsData", V.Enum.LongPartType!Part, "C33", "C215", "C216")
F.Intrinsic.Control.EndIf

F.Data.DataView.SetFilter("dtMapping", "dvMapCheck", "[MAPID] in ('C217', 'C218', 'C219', 'C220')")
F.Intrinsic.Control.CallSub(GetExpressionFieldFilter, "Fields", "C217*!*C218*!*C219*!*C220*!*C221")
F.Data.DataView.SetFilter("dtExpressions", "dvExpressions", V.Args.Filter)
F.Intrinsic.Control.If(V.DataView.dtMapping!dvMapCheck.RowCount, >, 0, "OR", V.DataView.dtExpressions!dvExpressions.RowCount, >, 0)
	F.Data.DataTable.AddDisplayPartColumn("dtExportJobsData", V.Enum.LongPartType!Part, "C101", "C217", "C218")
	F.Data.DataTable.AddDisplayPartColumn("dtExportJobsData", V.Enum.LongPartType!Part, "C109", "C219", "C220")
F.Intrinsic.Control.EndIf

'date formatting
F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "EXPORT_OPTION", "SETTING", "DATE_FORMAT", "PROFILE", V.Global.sProfile)
F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
	V.Local.sFormat.Set(V.Args.Setting)
F.Intrinsic.Control.EndIf

'add an extra column for each date type and format them
F.Data.DataTable.AddColumn("dtExportJobsData", "C00_FORMAT", "String", "")
F.Data.DataTable.SetValueFormat("dtExportJobsData", -1, "C00", "C00_FORMAT", V.Local.sFormat)
F.Data.DataTable.AddColumn("dtExportJobsData", "C92_FORMAT", "String", "")
F.Data.DataTable.SetValueFormat("dtExportJobsData", -1, "C92", "C92_FORMAT", V.Local.sFormat)
F.Data.DataTable.AddColumn("dtExportJobsData", "C95_FORMAT", "String", "")
F.Data.DataTable.SetValueFormat("dtExportJobsData", -1, "C95", "C95_FORMAT", V.Local.sFormat)
F.Data.DataTable.AddColumn("dtExportJobsData", "C96_FORMAT", "String", "")
F.Data.DataTable.SetValueFormat("dtExportJobsData", -1, "C96", "C96_FORMAT", V.Local.sFormat)
F.Data.DataTable.AddColumn("dtExportJobsData", "C97_FORMAT", "String", "")
F.Data.DataTable.SetValueFormat("dtExportJobsData", -1, "C97", "C97_FORMAT", V.Local.sFormat)

'add any extra formatting columns
F.Intrinsic.Control.If(V.Global.sXPtype, !=, "B", "AND", V.Global.sXPType, !=, "Y", V.Global.sXPtype, !=, "O")
	F.Intrinsic.String.Build("'{0}' + TRIM([C08]) + '{0}'", V.Ambient.DblQuote, V.Local.sExpression)
F.Intrinsic.Control.Else
	V.Local.sExpression.Set("TRIM([C08])")
F.Intrinsic.Control.EndIf
F.Data.DataTable.AddExpressionColumn("dtExportJobsData", "C08_FORMAT", "String", V.Local.sExpression)

F.Data.DataTable.AddColumn("dtExportJobsData","N_A","String")

F.Intrinsic.Control.CallSub(AddExtraFields, "DataTable", "dtExportJobsData")
F.Data.DataView.Close("dtMapping", "dvMapCheck")
F.Data.DataView.Close("dtExpressions", "dvExpressions")
F.Data.DataTable.Close("dtExpressions")

Function.Intrinsic.UI.ChangeWaitStatus("Data Compiled and ready for export", 100)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Callback", "FNestExport_Unload", "PROJECT", "4980", "PROJECTTITLE", "GCG_4980_NEST_XP", "TASK", "GCG_4980_NEST_XP")
F.Intrinsic.Control.EndTry
Program.Sub.Load4XP.End

Program.Sub.GetOtherSequenceInfo.Start
F.Intrinsic.Control.Try

V.Local.sSQL.Declare(String)

'get job information
'fields C174-C197
F.Data.DataView.SetFilter("dtMapping", "dvMapCheck", "[MAPID] >= 'C174' and [MAPID] <= 'C197'")
F.Intrinsic.Control.CallSub(GetExpressionFieldFilter, "Fields", "C174*!*C175*!*C176*!*C177*!*C178*!*C179*!*C180*!*C181*!*C182*!*C183*!*C184*!*C185*!*C186*!*C187*!*C188*!*C189*!*C190*!*C191*!*C192*!*C193*!*C194*!*C195*!*C196*!*C197")
F.Data.DataView.SetFilter("dtExpressions", "dvExpressions", V.Args.Filter)
F.Intrinsic.Control.If(V.DataView.dtMapping!dvMapCheck.RowCount, >, 0, "OR", V.DataView.dtExpressions!dvExpressions.RowCount, >, 0)
	F.Intrinsic.Control.CallSub(GetFilter, "DataTable", "dtExportJobsData", "Field", "C02")
	F.Intrinsic.String.Build("SELECT A.JOB, A.SUFFIX, A.SEQ, RTRIM(A.JOB)+'-'+RTRIM(A.SUFFIX)+'-'+RTRIM(A.SEQ) as JSS, RTRIM(A.JOB)+'-'+RTRIM(A.SUFFIX) JS, A.UNITS_COMPLETE, A.UNITS_SCRAP, A.FLAG_CLOSED, RTRIM(A.OPERATION) as OPERATION, RTRIM(A.PART) as WC, RTRIM(A.DESCRIPTION) DESCRIPTION, RTRIM(ROUTER_SEQ) ROUTER_SEQ, UNITS_OPEN, HOURS_ESTIMATED, DATE_START, DATE_DUE, RTRIM(IF(IsNull(FLAG_CLOSED, '') = 'Y', 'Y', 'N')) FLAG_CLOSED FROM V_JOB_OPERATIONS A WHERE A.LMO = 'L' and JS in ('{0}') and SEQ < '900000' ORDER BY JSS", V.Args.Filter, V.Local.sSQL)
	
	F.Data.DataTable.CreateFromSQL("dtPrevSeq", "Con", V.Local.sSQL)
	F.Data.DataTable.AddColumn("dtPrevSeq", "PREVIOUS_LABOR_INDEX", "Long", -1)
	F.Data.DataTable.AddExpressionColumn("dtPrevSeq", "LABOR_INDEX", "Long", "PREVIOUS_LABOR_INDEX + 1")
	F.Data.DataTable.SetValueOnNextLine("dtPrevSeq", "LABOR_INDEX", "PREVIOUS_LABOR_INDEX", "JS")
	
	'fill labor index
	F.Data.Dictionary.CreateFromDataTable("dictLaborIndex", "dtPrevSeq", "JSS", "LABOR_INDEX")
	F.Data.Dictionary.SetDefaultReturn("dictLaborIndex", -2)
	F.Data.DataTable.AddColumn("dtExportJobsData", "LABOR_INDEX", "Long")
	F.Data.DataTable.AddColumn("dtExportJobsData", "Seq_Format", "String")
	F.Data.DataTable.SetValueFormat("dtExportJobsData", -1, "SEQ", "Seq_Format", "000000")
	F.Data.DataTable.AddExpressionColumn("dtExportJobsData", "JSS", "String", "TRIM([JOB]) + '-' + TRIM([SUFFIX]) + '-' + TRIM([SEQ_FORMAT])")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictLaborIndex", "JSS", "LABOR_INDEX")
	F.Data.Dictionary.Close("dictLaborIndex")
	
	F.Data.DataTable.AddExpressionColumn("dtExportJobsData", "PREV_LABOR_INDEX", "Long", "[LABOR_INDEX] - 1")
	F.Data.DataTable.AddExpressionColumn("dtExportJobsData", "NEXT_LABOR_INDEX", "Long", "[LABOR_INDEX] + 1")
	F.Data.DataTable.AddExpressionColumn("dtExportJobsData", "JS", "String", "Trim(JOB) + '-' + TRIM(SUFFIX)")
	F.Data.DataTable.AddExpressionColumn("dtExportJobsData", "JSLaborIndex", "String", "JS + '-' + [LABOR_INDEX]")
	F.Data.DataTable.AddExpressionColumn("dtExportJobsData", "JSPrevLaborIndex", "String", "JS + '-' + [PREV_LABOR_INDEX]")
	F.Data.DataTable.AddExpressionColumn("dtExportJobsData", "JSNextLaborIndex", "String", "JS + '-' + [NEXT_LABOR_INDEX]")
	F.Data.DataTable.AddExpressionColumn("dtPrevSeq", "JSLaborIndex", "String", "Trim(JOB) + '-' + TRIM(SUFFIX) + '-' + [LABOR_INDEX]")
	
	F.Data.DataTable.AddColumn("dtExportJobsData", "C174", "String", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C175", "String", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C176", "String", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C177", "String", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C178", "String", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C179", "String", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C180", "String", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C181", "String", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C182", "String", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C183", "String", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C184", "String", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C185", "String", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C186", "String", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C187", "String", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C188", "String", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C189", "String", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C190", "String", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C191", "String", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C192", "String", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C193", "String", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C194", "String", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C195", "String", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C196", "String", "")
	F.Data.DataTable.AddColumn("dtExportJobsData", "C197", "String", "")
	
	'fill Operation
	F.Data.Dictionary.CreateFromDataTable("dictPrevOP", "dtPrevSeq", "JSLaborIndex", "Operation")
	F.Data.Dictionary.SetDefaultReturn("dictPrevOP", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictPrevOP", "JSPrevLaborIndex", "C188")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictPrevOP", "JSNextLaborIndex", "C176")
	F.Data.Dictionary.Close("dictPrevOP")
	
	'fill WC
	F.Data.Dictionary.CreateFromDataTable("dictWC", "dtPrevSeq", "JSLaborIndex", "WC")
	F.Data.Dictionary.SetDefaultReturn("dictWC", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictWC", "JSPrevLaborIndex", "C189")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictWC", "JSNextLaborIndex", "C177")
	F.Data.Dictionary.Close("dictWC")
	
	'fill sequence
	F.Data.Dictionary.CreateFromDataTable("dictPrevSeq", "dtPrevSeq", "JSLaborIndex", "SEQ")
	F.Data.Dictionary.SetDefaultReturn("dictPrevSeq", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictPrevSeq", "JSPrevLaborIndex", "C186")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictPrevSeq", "JSNextLaborIndex", "C174")
	F.Data.Dictionary.Close("dictPrevSeq")
	
	'fill units complete
	F.Data.Dictionary.CreateFromDataTable("dictPrevQty", "dtPrevSeq", "JSLaborIndex", "UNITS_COMPLETE")
	F.Data.Dictionary.SetDefaultReturn("dictPrevQty", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictPrevQty", "JSPrevLaborIndex", "C195")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictPrevQty", "JSNextLaborIndex", "C183")
	F.Data.Dictionary.Close("dictPrevQty")
	
	'fill scrap
	F.Data.Dictionary.CreateFromDataTable("dictPrevScrap", "dtPrevSeq", "JSLaborIndex", "UNITS_SCRAP")
	F.Data.Dictionary.SetDefaultReturn("dictPrevScrap", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictPrevScrap", "JSPrevLaborIndex", "C196")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictPrevScrap", "JSNextLaborIndex", "C184")
	F.Data.Dictionary.Close("dictPrevScrap")
	
	'fill closed
	F.Data.Dictionary.CreateFromDataTable("dictPrevClsd", "dtPrevSeq", "JSLaborIndex", "FLAG_CLOSED")
	F.Data.Dictionary.SetDefaultReturn("dictPrevClsd", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictPrevClsd", "JSPrevLaborIndex", "C197")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictPrevClsd", "JSNextLaborIndex", "C185")
	F.Data.Dictionary.Close("dictPrevClsd")
	
	'fill description
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtPrevSeq", "JSLaborIndex", "DESCRIPTION")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "JSPrevLaborIndex", "C187")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "JSNextLaborIndex", "C175")
	F.Data.Dictionary.Close("dictTemp")
	
	'fill router sequence
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtPrevSeq", "JSLaborIndex", "ROUTER_SEQ")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "JSPrevLaborIndex", "C190")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "JSNextLaborIndex", "C178")
	F.Data.Dictionary.Close("dictTemp")
	
	'fill run quantity
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtPrevSeq", "JSLaborIndex", "UNITS_OPEN")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "JSPrevLaborIndex", "C191")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "JSNextLaborIndex", "C179")
	F.Data.Dictionary.Close("dictTemp")
	
	'fill estimated hours
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtPrevSeq", "JSLaborIndex", "HOURS_ESTIMATED")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "JSPrevLaborIndex", "C192")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "JSNextLaborIndex", "C180")
	F.Data.Dictionary.Close("dictTemp")
	
	'fill start date
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtPrevSeq", "JSLaborIndex", "DATE_START")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "JSPrevLaborIndex", "C193")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "JSNextLaborIndex", "C181")
	F.Data.Dictionary.Close("dictTemp")
	
	'fill due date
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtPrevSeq", "JSLaborIndex", "DATE_DUE")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "JSPrevLaborIndex", "C194")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "JSNextLaborIndex", "C182")
	F.Data.Dictionary.Close("dictTemp")
	
	'fill closed
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtPrevSeq", "JSLaborIndex", "FLAG_CLOSED")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "JSPrevLaborIndex", "C197")
	F.Data.DataTable.FillFromDictionary("dtExportJobsData", "dictTemp", "JSNextLaborIndex", "C185")
	F.Data.Dictionary.Close("dictTemp")
	
	F.Data.DataTable.Close("dtPrevSeq")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Callback", "FNestExport_Unload", "PROJECT", "4980", "PROJECTTITLE", "GCG_4980_NEST_XP", "TASK", "GCG_4980_NEST_XP")
F.Intrinsic.Control.EndTry
Program.Sub.GetOtherSequenceInfo.End

Program.Sub.GetExpressionFieldFilter.Start
'pass fields

F.Intrinsic.Control.Try

V.Local.sFilter.Declare(String)
V.Local.iCounter.Declare(Long)
V.Local.sFields.Declare(String)
V.Local.sTemp.Declare(String)

F.Intrinsic.String.Split(V.Args.Fields, "*!*", V.Local.sFields)
F.Intrinsic.Control.For(V.Local.iCounter, 0, V.Local.sFields.UBound, 1)
	F.Intrinsic.String.Replace(V.Local.sFields(V.Local.iCounter), "[", "", V.Local.sTemp)
	F.Intrinsic.String.Replace(V.Local.sTemp, "]", "", V.Local.sTemp)
	F.Intrinsic.String.Build("[[]{0}[]]", V.Local.sTemp, V.Local.sTemp)
	F.Intrinsic.Control.If(V.Local.iCounter, =, 0)
		F.Intrinsic.String.Build("[EXPRESSION] like '%{0}%'", V.Local.sTemp, V.Local.sFilter)
	F.Intrinsic.Control.Else
		F.Intrinsic.String.Build("{0} OR [EXPRESSION] like '%{1}%'", V.Local.sFilter, V.Local.sTemp, V.Local.sFilter)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Next(V.Local.iCounter)
V.Local.sFields.Redim(0, 0)

F.Intrinsic.Variable.AddRV("FILTER", V.Local.sFilter)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Callback", "FNestExport_Unload", "PROJECT", "4980", "PROJECTTITLE", "GCG_4980_NEST_XP", "TASK", "GCG_4980_NEST_XP")
F.Intrinsic.Control.EndTry
Program.Sub.GetExpressionFieldFilter.End

Program.Sub.BoostXP.Start
F.Intrinsic.Control.Try

V.Local.sSQL.Declare
V.Local.sFilter.Declare
V.Local.sMAPID.Declare
V.Local.sManCheck.Declare
V.Local.iCount.Declare
V.local.sOrderNo.declare
V.local.sDescription.declare
V.local.sCustomerOrderNo.declare
V.local.sCustomerName.declare
V.local.sCustomerNo.declare
V.local.sPartNo.declare
V.local.sPartNoExt.declare
V.local.sPartDescription.declare
V.local.sDrawingNo.declare
V.local.sCADFilename.declare
V.local.sAssembly.declare
V.local.sDueDate.declare
V.local.sPriority.declare
V.local.sDesiredQuantity.declare
V.local.sStatus.declare
V.local.sWorkplanName.declare
V.local.sMaterial.declare
V.Local.shold.Declare
V.Local.sDateHold.declare
V.Local.sTime.declare
V.Local.sDate.declare
V.Local.sdocName.declare
V.Local.sFileName.Declare(String)

F.Intrinsic.String.Format(V.Ambient.Date,"mmddyyyy",V.Local.sDate)
F.Intrinsic.String.Format(V.Ambient.Time,"HhNnss",V.Local.sTime)

F.Intrinsic.String.Build("XMLDOC_{0}_{1}",V.Local.sDate,V.Local.sTime,V.Local.sdocName)

F.Intrinsic.String.Build("Select RTRIM(XPFIELD) XPFIELD , IF(MAPID like 'ST%' or MAPID = 'N_A' or MAPID like 'EX%', MAPID,  'C' + RTRIM(MAPID)) as MAPID from GCG_4980_NESTMAINT where profile = '{0}' and ENABLED = 1",V.Global.sProfile,V.Local.sSQL)
F.intrinsic.UI.InvokeWaitDialog("Generating XML","Export 2 XML for BOOST")

F.Data.DataTable.CreateFromSQL("dtBoostMapping","Con",V.Local.sSQL, True)

' create the document
F.global.xml.createDocument(V.Local.sdocName,False,True,False,False)
'Dropped Y from Root per Jones Metal.
F.global.xml.SetRoot(V.Local.sdocName,"PPSImport")

F.Global.XML.CreateAttributeNode(V.Local.sdocName,"Version","1.1")
F.Global.XML.SetAttributeToRoot(V.Local.sdocName,"Version")

' set new line text
F.Intrinsic.String.Concat(V.Ambient.NewLine,V.Ambient.Tab,V.Local.shold)
'Dropped Y from Root per Jones Metal.
F.global.xml.AppendTextNode(V.Local.sdocName,"Root",V.Local.shold)
F.Global.XML.CreateElementNode(V.Local.sdocName,"ProductionOrders","")
F.Global.XML.AppendNodeToRoot(V.Local.sdocName,"ProductionOrders")

F.Data.DataView.Create("dtBoostMapping","TempChkVw",22)
F.intrinsic.Control.For(V.Local.icount,0,V.DataTable.dtExportJobsData.RowCount--,1)
	
	F.Data.DataView.SetFilter("dtBoostMapping", "TempChkVw", "XPFIELD = 'OrderNo'")
	F.Intrinsic.Control.If(V.DataView.dtBoostMapping!TempChkVw.RowCount, >, 0)
		V.Local.sMAPID.set(V.DataView.dtBoostMapping!TempChkVw(0).MAPID!fieldValTrim)
		F.Intrinsic.Control.If(V.Local.sMAPID, =, "N_A")
			V.Local.sOrderNo.Set("")
		F.Intrinsic.Control.Else
			V.Local.sOrderNo.Set(V.DataTable.dtExportJobsData(V.Local.iCount).[V.Local.sMAPID]!FieldValTrim)
		F.Intrinsic.Control.EndIf
		
		F.Intrinsic.string.Replace(V.Local.sOrderNo,"--","-   -",V.Local.sOrderNo)
	
		' ======================== PRODUCTION ORDER	
		F.Intrinsic.String.Build("{0}{1}{1}",V.Ambient.NewLine,V.Ambient.Tab,V.Local.shold)
		F.global.xml.appendTextNode(V.Local.sdocName,"ProductionOrders",V.Local.shold)
		F.Intrinsic.String.Build("{0}{1}{1}{1}",V.Ambient.NewLine,V.Ambient.Tab,V.Local.shold)
	
		' create ProductionOrder node, with attribute
		
		F.Global.XML.CreateElementNode(V.Local.sdocName,"ProductionOrder","")
		F.Global.XML.CreateAttributeNode(V.Local.sdocName,"OrderNo",V.Local.sOrderNo.trim)
		F.Global.XML.SetAttributeToNode(V.Local.sdocName,"ProductionOrder","OrderNo")
		F.Global.XML.DestroyNode(V.Local.sdocName,"OrderNo")
		F.global.xml.AppendTextNode(V.Local.sdocName,"ProductionOrder",V.Local.shold)
		F.Global.XML.AppendNode(V.Local.sdocName,"ProductionOrders","ProductionOrder")
		
		F.Data.DataView.SetFilter("dtBoostMapping", "TempChkVw", "XPFIELD = 'Description'")
		F.Intrinsic.Control.If(V.DataView.dtBoostMapping!TempChkVw.RowCount, >, 0)
			V.Local.sMAPID.set(V.DataView.dtBoostMapping!TempChkVw(0).MAPID!fieldValTrim)
			F.Intrinsic.Control.If(V.Local.sMAPID, =, "N_A")
				V.Local.sDescription.Set("")
			F.Intrinsic.Control.Else
				V.Local.sDescription.Set(V.DataTable.dtExportJobsData(V.Local.iCount).[V.Local.sMAPID]!FieldValTrim)
			F.Intrinsic.Control.EndIf
			
			F.Global.XML.CreateElementNode(V.Local.sdocName,"Description",V.Local.sDescription.Trim)
			F.Global.XML.AppendNode(V.Local.sdocName,"ProductionOrder","Description")
			F.global.xml.appendTextNode(V.Local.sdocName,"ProductionOrder",V.Local.shold)
			F.Global.XML.DestroyNode(V.Local.sdocName,"Description")
		F.Intrinsic.Control.EndIf
		
		F.Data.DataView.SetFilter("dtBoostMapping", "TempChkVw", "XPFIELD = 'CustomerOrderNo'")
		F.Intrinsic.Control.If(V.DataView.dtBoostMapping!TempChkVw.RowCount, >, 0)
			V.Local.sMAPID.set(V.DataView.dtBoostMapping!TempChkVw(0).MAPID!fieldValTrim)
			F.Intrinsic.Control.If(V.Local.sMAPID, =, "N_A")
				V.Local.sCustomerOrderNo.Set("")
			F.Intrinsic.Control.Else
				V.Local.sCustomerOrderNo.Set(V.DataTable.dtExportJobsData(V.Local.iCount).[V.Local.sMAPID]!FieldValTrim)
			F.Intrinsic.Control.EndIf
			
			F.Global.XML.CreateElementNode(V.Local.sdocName,"CustomerOrderNo",V.Local.sCustomerOrderNo.Trim)
			F.Global.XML.AppendNode(V.Local.sdocName,"ProductionOrder","CustomerOrderNo")
			F.global.xml.appendTextNode(V.Local.sdocName,"ProductionOrder",V.Local.shold)
			F.Global.XML.DestroyNode(V.Local.sdocName,"CustomerOrderNo")
		F.Intrinsic.Control.EndIf
		
		F.Data.DataView.SetFilter("dtBoostMapping", "TempChkVw", "XPFIELD = 'CustomerName'")
		F.Intrinsic.Control.If(V.DataView.dtBoostMapping!TempChkVw.RowCount, >, 0)
			V.Local.sMAPID.set(V.DataView.dtBoostMapping!TempChkVw(0).MAPID!fieldValTrim)
			F.Intrinsic.Control.If(V.Local.sMAPID, =, "N_A")
				V.Local.sCustomerName.Set("")
			F.Intrinsic.Control.Else
				V.Local.sCustomerName.Set(V.DataTable.dtExportJobsData(V.Local.iCount).[V.Local.sMAPID]!FieldValTrim)
			F.Intrinsic.Control.EndIf
			
			F.Global.XML.CreateElementNode(V.Local.sdocName,"CustomerName",V.Local.sCustomerName.Trim)
			F.Global.XML.AppendNode(V.Local.sdocName,"ProductionOrder","CustomerName")
			F.global.xml.appendTextNode(V.Local.sdocName,"ProductionOrder",V.Local.shold)
			F.Global.XML.DestroyNode(V.Local.sdocName,"CustomerName")
		F.Intrinsic.Control.EndIf
		
		F.Data.DataView.SetFilter("dtBoostMapping", "TempChkVw", "XPFIELD = 'CustomerNo'")
		F.Intrinsic.Control.If(V.DataView.dtBoostMapping!TempChkVw.RowCount, >, 0)
			V.Local.sMAPID.set(V.DataView.dtBoostMapping!TempChkVw(0).MAPID!fieldValTrim)
			F.Intrinsic.Control.If(V.Local.sMAPID, =, "N_A")
				V.Local.sCustomerNo.Set("")
			F.Intrinsic.Control.Else
				V.Local.sCustomerNo.Set(V.DataTable.dtExportJobsData(V.Local.iCount).[V.Local.sMAPID]!FieldValTrim)
			F.Intrinsic.Control.EndIf
			
			F.Global.XML.CreateElementNode(V.Local.sdocName,"CustomerNo",V.Local.sCustomerNo.Trim)
			F.Global.XML.AppendNode(V.Local.sdocName,"ProductionOrder","CustomerNo")
			F.global.xml.appendTextNode(V.Local.sdocName,"ProductionOrder",V.Local.shold)
			F.Global.XML.DestroyNode(V.Local.sdocName,"CustomerNo")
		F.Intrinsic.Control.EndIf
		
		F.Data.DataView.SetFilter("dtBoostMapping", "TempChkVw", "XPFIELD = 'PartNo'")
		F.Intrinsic.Control.If(V.DataView.dtBoostMapping!TempChkVw.RowCount, >, 0)
			V.Local.sMAPID.set(V.DataView.dtBoostMapping!TempChkVw(0).MAPID!fieldValTrim)
			F.Intrinsic.Control.If(V.Local.sMAPID, =, "N_A")
				V.Local.sPartNo.Set("")
			F.Intrinsic.Control.Else
				V.Local.sPartNo.Set(V.DataTable.dtExportJobsData(V.Local.iCount).[V.Local.sMAPID]!FieldValTrim)
			F.Intrinsic.Control.EndIf
			
			F.Global.XML.CreateElementNode(V.Local.sdocName,"PartNo",V.Local.sPartNo.Trim)
			F.Global.XML.AppendNode(V.Local.sdocName,"ProductionOrder","PartNo")
			F.global.xml.appendTextNode(V.Local.sdocName,"ProductionOrder",V.Local.shold)
			F.Global.XML.DestroyNode(V.Local.sdocName,"PartNo")
		F.Intrinsic.Control.EndIf
		
		F.Data.DataView.SetFilter("dtBoostMapping", "TempChkVw", "XPFIELD = 'PartNoExt'")
		F.Intrinsic.Control.If(V.DataView.dtBoostMapping!TempChkVw.RowCount, >, 0)
			V.Local.sMAPID.set(V.DataView.dtBoostMapping!TempChkVw(0).MAPID!fieldValTrim)
			F.Intrinsic.Control.If(V.Local.sMAPID, =, "N_A")
				V.Local.sPartNoExt.Set("")
			F.Intrinsic.Control.Else
				V.Local.sPartNoExt.Set(V.DataTable.dtExportJobsData(V.Local.iCount).[V.Local.sMAPID]!FieldValTrim)
			F.Intrinsic.Control.EndIf
			
			F.Global.XML.CreateElementNode(V.Local.sdocName,"PartNoExt",V.Local.sPartNoExt.Trim)
			F.Global.XML.AppendNode(V.Local.sdocName,"ProductionOrder","PartNoExt")
			F.global.xml.appendTextNode(V.Local.sdocName,"ProductionOrder",V.Local.shold)
			F.Global.XML.DestroyNode(V.Local.sdocName,"PartNoExt")
		F.Intrinsic.Control.EndIf
		
		F.Data.DataView.SetFilter("dtBoostMapping", "TempChkVw", "XPFIELD = 'PartDescription'")
		F.Intrinsic.Control.If(V.DataView.dtBoostMapping!TempChkVw.RowCount, >, 0)
			V.Local.sMAPID.set(V.DataView.dtBoostMapping!TempChkVw(0).MAPID!fieldValTrim)
			F.Intrinsic.Control.If(V.Local.sMAPID, =, "N_A")
				V.Local.sPartDescription.Set("")
			F.Intrinsic.Control.Else
				V.Local.sPartDescription.Set(V.DataTable.dtExportJobsData(V.Local.iCount).[V.Local.sMAPID]!FieldValTrim)
			F.Intrinsic.Control.EndIf
			
			F.Global.XML.CreateElementNode(V.Local.sdocName,"PartDescription",V.Local.sPartDescription.Trim)
			F.Global.XML.AppendNode(V.Local.sdocName,"ProductionOrder","PartDescription")
			F.global.xml.appendTextNode(V.Local.sdocName,"ProductionOrder",V.Local.shold)
			F.Global.XML.DestroyNode(V.Local.sdocName,"PartDescription")
		F.Intrinsic.Control.EndIf
		
		F.Data.DataView.SetFilter("dtBoostMapping", "TempChkVw", "XPFIELD = 'DrawingNo'")
		F.Intrinsic.Control.If(V.DataView.dtBoostMapping!TempChkVw.RowCount, >, 0)
			V.Local.sMAPID.set(V.DataView.dtBoostMapping!TempChkVw(0).MAPID!fieldValTrim)
			F.Intrinsic.Control.If(V.Local.sMAPID, =, "N_A")
				V.Local.sDrawingNo.Set("")
			F.Intrinsic.Control.Else
				V.Local.sDrawingNo.Set(V.DataTable.dtExportJobsData(V.Local.iCount).[V.Local.sMAPID]!FieldValTrim)
			F.Intrinsic.Control.EndIf
			
			F.Global.XML.CreateElementNode(V.Local.sdocName,"DrawingNo",V.Local.sDrawingNo.Trim)
			F.Global.XML.AppendNode(V.Local.sdocName,"ProductionOrder","DrawingNo")
			F.global.xml.appendTextNode(V.Local.sdocName,"ProductionOrder",V.Local.shold)
			F.Global.XML.DestroyNode(V.Local.sdocName,"DrawingNo")
		F.Intrinsic.Control.EndIf
		
		F.Data.DataView.SetFilter("dtBoostMapping", "TempChkVw", "XPFIELD = 'CADFilename'")
		F.Intrinsic.Control.If(V.DataView.dtBoostMapping!TempChkVw.RowCount, >, 0)
			V.Local.sMAPID.set(V.DataView.dtBoostMapping!TempChkVw(0).MAPID!fieldValTrim)
			F.Intrinsic.Control.If(V.Local.sMAPID, =, "N_A")
				V.Local.sCADFilename.Set("")
			F.Intrinsic.Control.Else
				V.Local.sCADFilename.Set(V.DataTable.dtExportJobsData(V.Local.iCount).[V.Local.sMAPID]!FieldValTrim)
			F.Intrinsic.Control.EndIf
			
			F.Intrinsic.Control.If(V.DataView.ProfDT!ProfVw(0).FULL_PART_FLAG!fieldVal)
				F.Intrinsic.String.Build("{0}\{1}.dxf",V.DataView.ProfDT!ProfVw(0).FULL_PART_Path!fieldValtrim,V.Local.sCADFilename.trim,V.Local.sCADFilename)
			F.Intrinsic.Control.EndIf
		
			F.Global.XML.CreateElementNode(V.Local.sdocName,"CADFilename",V.Local.sCADFilename.Trim)
			F.Global.XML.AppendNode(V.Local.sdocName,"ProductionOrder","CADFilename")
			F.global.xml.appendTextNode(V.Local.sdocName,"ProductionOrder",V.Local.shold)
			F.Global.XML.DestroyNode(V.Local.sdocName,"CADFilename")
		F.Intrinsic.Control.EndIf
		
		F.Data.DataView.SetFilter("dtBoostMapping", "TempChkVw", "XPFIELD = 'Assembly'")
		F.Intrinsic.Control.If(V.DataView.dtBoostMapping!TempChkVw.RowCount, >, 0)
			V.Local.sMAPID.set(V.DataView.dtBoostMapping!TempChkVw(0).MAPID!fieldValTrim)
			F.Intrinsic.Control.If(V.Local.sMAPID, =, "N_A")
				V.Local.sAssembly.Set("")
			F.Intrinsic.Control.Else
				V.Local.sAssembly.Set(V.DataTable.dtExportJobsData(V.Local.iCount).[V.Local.sMAPID]!FieldValTrim)
			F.Intrinsic.Control.EndIf
			
			F.Global.XML.CreateElementNode(V.Local.sdocName,"Assembly",V.Local.sAssembly.Trim)
			F.Global.XML.AppendNode(V.Local.sdocName,"ProductionOrder","Assembly")
			F.global.xml.appendTextNode(V.Local.sdocName,"ProductionOrder",V.Local.shold)
			F.Global.XML.DestroyNode(V.Local.sdocName,"Assembly")
		F.Intrinsic.Control.EndIf
		
		F.Data.DataView.SetFilter("dtBoostMapping", "TempChkVw", "XPFIELD = 'DueDate'")
		F.Intrinsic.Control.If(V.DataView.dtBoostMapping!TempChkVw.RowCount, >, 0)
			V.Local.sMAPID.set(V.DataView.dtBoostMapping!TempChkVw(0).MAPID!fieldValTrim)
			
			'use formatted date columns
			F.Intrinsic.String.Replace(V.Local.sMAPID, "C00", "C00_FORMAT", V.Local.sMAPID)
			F.Intrinsic.String.Replace(V.Local.sMAPID, "C92", "C92_FORMAT", V.Local.sMAPID)
			F.Intrinsic.String.Replace(V.Local.sMAPID, "C95", "C95_FORMAT", V.Local.sMAPID)
			F.Intrinsic.String.Replace(V.Local.sMAPID, "C96", "C96_FORMAT", V.Local.sMAPID)
			F.Intrinsic.String.Replace(V.Local.sMAPID, "C97", "C97_FORMAT", V.Local.sMAPID)
			F.Intrinsic.String.Replace(V.Local.sMAPID, "C08", "C08_FORMAT", V.Local.sMAPID)
			
			F.Intrinsic.Control.If(V.Local.sMAPID, =, "N_A")
				V.Local.sDueDate.Set("")
			F.Intrinsic.Control.Else
				V.Local.sDueDate.Set(V.DataTable.dtExportJobsData(V.Local.iCount).[V.Local.sMAPID]!FieldValTrim)
			F.Intrinsic.Control.EndIf
			
			F.Intrinsic.String.Split(V.Local.sDueDate,"/",V.Local.sDateHold)
			F.Intrinsic.Control.If(V.Local.sDateHold.UBound,>=,2)
				V.Local.sDateHold.RedimPreserve(0,2)
				F.Intrinsic.String.Build("{0}/{1}/{2}",V.Local.sDateHold(1).Trim,V.Local.sDateHold(0).Trim,V.Local.sDateHold(2).Trim,V.Local.sDueDate)
			F.Intrinsic.Control.EndIf
			F.Global.XML.CreateElementNode(V.Local.sdocName,"DueDate",V.Local.sDueDate.Trim)
			F.Global.XML.AppendNode(V.Local.sdocName,"ProductionOrder","DueDate")
			F.global.xml.appendTextNode(V.Local.sdocName,"ProductionOrder",V.Local.shold)
			F.Global.XML.DestroyNode(V.Local.sdocName,"DueDate")
		F.Intrinsic.Control.EndIf
		
		F.Data.DataView.SetFilter("dtBoostMapping", "TempChkVw", "XPFIELD = 'Priority'")
		F.Intrinsic.Control.If(V.DataView.dtBoostMapping!TempChkVw.RowCount, >, 0)
			V.Local.sMAPID.set(V.DataView.dtBoostMapping!TempChkVw(0).MAPID!fieldValTrim)
			F.Intrinsic.Control.If(V.Local.sMAPID, =, "N_A")
				V.Local.sPriority.Set("")
			F.Intrinsic.Control.Else
				V.Local.sPriority.Set(V.DataTable.dtExportJobsData(V.Local.iCount).[V.Local.sMAPID]!FieldValTrim)
			F.Intrinsic.Control.EndIf
			
			F.Intrinsic.Control.If(V.Local.sPriority.long,>,9)
				V.local.sPriority.set(9)
			F.Intrinsic.Control.Else
				V.Local.sPriority.Set(V.Local.sPriority.long)
			F.Intrinsic.Control.EndIf
			
			F.Global.XML.CreateElementNode(V.Local.sdocName,"Priority",V.Local.sPriority.Long)
			F.Global.XML.AppendNode(V.Local.sdocName,"ProductionOrder","Priority")
			F.global.xml.appendTextNode(V.Local.sdocName,"ProductionOrder",V.Local.shold)
			F.Global.XML.DestroyNode(V.Local.sdocName,"Priority")
		F.Intrinsic.Control.EndIf
		
		F.Data.DataView.SetFilter("dtBoostMapping", "TempChkVw", "XPFIELD = 'DesiredQuantity'")
		F.Intrinsic.Control.If(V.DataView.dtBoostMapping!TempChkVw.RowCount, >, 0)
			V.Local.sMAPID.set(V.DataView.dtBoostMapping!TempChkVw(0).MAPID!fieldValTrim)
			F.Intrinsic.Control.If(V.Local.sMAPID, =, "N_A")
				V.Local.sDesiredQuantity.Set("")
			F.Intrinsic.Control.Else
				V.Local.sDesiredQuantity.Set(V.DataTable.dtExportJobsData(V.Local.iCount).[V.Local.sMAPID]!FieldValTrim)
			F.Intrinsic.Control.EndIf
			
			F.Global.XML.CreateElementNode(V.Local.sdocName,"DesiredQuantity",V.Local.sDesiredQuantity.trim)
			F.Global.XML.AppendNode(V.Local.sdocName,"ProductionOrder","DesiredQuantity")
			F.global.xml.appendTextNode(V.Local.sdocName,"ProductionOrder",V.Local.shold)
			F.Global.XML.DestroyNode(V.Local.sdocName,"DesiredQuantity")
		F.Intrinsic.Control.EndIf
		
		F.Data.DataView.SetFilter("dtBoostMapping", "TempChkVw", "XPFIELD = 'Status'")
		F.Intrinsic.Control.If(V.DataView.dtBoostMapping!TempChkVw.RowCount, >, 0)
			V.Local.sMAPID.set(V.DataView.dtBoostMapping!TempChkVw(0).MAPID!fieldValTrim)
			F.Intrinsic.Control.If(V.Local.sMAPID, =, "N_A")
				V.Local.sStatus.Set("")
			F.Intrinsic.Control.Else
				V.Local.sStatus.Set(V.DataTable.dtExportJobsData(V.Local.iCount).[V.Local.sMAPID]!FieldValTrim)
			F.Intrinsic.Control.EndIf
			
			F.Global.XML.CreateElementNode(V.Local.sdocName,"Status",V.Local.sStatus.trim)
			F.Global.XML.AppendNode(V.Local.sdocName,"ProductionOrder","Status")
			F.global.xml.appendTextNode(V.Local.sdocName,"ProductionOrder",V.Local.shold)
			F.Global.XML.DestroyNode(V.Local.sdocName,"Status")
		F.Intrinsic.Control.EndIf
		
		F.Data.DataView.SetFilter("dtBoostMapping", "TempChkVw", "XPFIELD = 'WorkplanName'")
		F.Intrinsic.Control.If(V.DataView.dtBoostMapping!TempChkVw.RowCount, >, 0)
			V.Local.sMAPID.set(V.DataView.dtBoostMapping!TempChkVw(0).MAPID!fieldValTrim)
			F.Intrinsic.Control.If(V.Local.sMAPID, =, "N_A")
				V.Local.sWorkplanName.Set("")
			F.Intrinsic.Control.Else
				V.Local.sWorkplanName.Set(V.DataTable.dtExportJobsData(V.Local.iCount).[V.Local.sMAPID]!FieldValTrim)
			F.Intrinsic.Control.EndIf
			
			F.Global.XML.CreateElementNode(V.Local.sdocName,"WorkplanName",V.Local.sWorkplanName.Trim)
			F.Global.XML.AppendNode(V.Local.sdocName,"ProductionOrder","WorkplanName")
			F.global.xml.appendTextNode(V.Local.sdocName,"ProductionOrder",V.Local.shold)
			F.Global.XML.DestroyNode(V.Local.sdocName,"WorkplanName")
		F.Intrinsic.Control.EndIf
		
		F.Data.DataView.SetFilter("dtBoostMapping", "TempChkVw", "[XPFIELD] = 'Material'")
		F.Intrinsic.Control.If(V.DataView.dtBoostMapping!TempChkVw.RowCount, >, 0)
			V.Local.sMAPID.set(V.DataView.dtBoostMapping!TempChkVw(0).MAPID!fieldValTrim)
			F.Intrinsic.Control.If(V.Local.sMAPID, =, "N_A")
				V.Local.sMaterial.Set("")
			F.Intrinsic.Control.Else
				V.Local.sMaterial.Set(V.DataTable.dtExportJobsData(V.Local.iCount).[V.Local.sMAPID]!FieldValTrim)
			F.Intrinsic.Control.EndIf
			
			F.Global.XML.CreateElementNode(V.Local.sdocName,"Material",V.Local.sMaterial.Trim)
			F.Global.XML.AppendNode(V.Local.sdocName,"ProductionOrder","Material")
			F.global.xml.appendTextNode(V.Local.sdocName,"ProductionOrder",V.Local.shold)
			F.Global.XML.DestroyNode(V.Local.sdocName,"Material")
		F.Intrinsic.Control.EndIf
		
		F.Global.XML.DestroyNode(V.Local.sdocName,"ProductionOrder")
	F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Next(V.Local.icount)

F.Intrinsic.String.Build("{0}{1}",V.Ambient.NewLine,V.Ambient.Tab,V.Local.shold)
F.global.xml.appendTextNode(V.Local.sdocName,"ProductionOrders",V.Local.shold)
F.Intrinsic.String.Build("{0}",V.Ambient.NewLine,V.Ambient.Tab,V.Local.shold)
F.Global.XML.DestroyNode(V.Local.sdocName,"ProductionOrders")
F.global.xml.appendTextNode(V.Local.sdocName,"Root",V.Local.shold)
F.Global.XML.AppendNodeToRoot(V.Local.sdocName,"ProductionOrders")
F.Global.XML.DestroyNode(V.Local.sdocName,"ProductionOrders")

'if they have the option on to include the oseon workplan, generate that
F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "EXPORT_OPTION", "SETTING", "OSEON_WORKPLAN", "PROFILE", V.Global.sProfile)
F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
	F.Intrinsic.Control.If(V.Args.Setting)
		F.Intrinsic.Control.CallSub(OseonWorkPlan, "Document", V.Local.sdocName)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf
F.Data.DataView.Close("dtBoostMapping","TempChkVw")

F.Intrinsic.UI.CloseWaitDialog

F.global.xml.saveDocument(V.Local.sdocName,V.global.sXPPATH, "ProdOrderImp.xml")
F.global.xml.CloseDocument(V.Local.sdocName)
F.Data.DataTable.Close("dtBoostMapping")

F.Intrinsic.String.Build("{0}\{1}", V.Global.sXPPATH, "ProdOrderImp.xml", V.Local.sFileName)
F.Intrinsic.Variable.AddRV("Export_File", V.Local.sFileName)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Callback", "FNestExport_Unload", "PROJECT", "4980", "PROJECTTITLE", "GCG_4980_NEST_XP", "TASK", "GCG_4980_NEST_XP")
F.Intrinsic.Control.EndTry
Program.Sub.BoostXP.End

Program.Sub.OseonWorkPlan.Start
'pass DOCUMENT
'adds the OSEON workplan to the boost export file

'Format:
'<?xml version="1.0" encoding="utf-8"?>
'<PPSImport Version="1.1" xmlns:rpt="ProdOrderImp">
'  <ProductionOrders>
'    <ProductionOrder OrderNo="00000000000090923">
'      <Description />
'      <CustomerName />
'      <CustomerNo />
'      <PartNo>X000421-A</PartNo>
'      <Assembly />
'      <DueDate>30.08.2021 13:30:00</DueDate>
'      <DesiredQuantity>14.00000</DesiredQuantity>
'      <Status>30</Status>
'      <WorkplanName />
'      <FillerPartsOrder>0</FillerPartsOrder>
'    </ProductionOrder>
'  </ProductionOrders>
'  <Parts>
'    <Part PartNo="X000421-A">
'      <WorkingPlan>
'        <WorkingStep OperationNo="0010">
'          <Activity>OP-PROGRM</Activity>
'          <WorkPlace>BOOST-01</WorkPlace>
'          <FeedbackFlag>1</FeedbackFlag>
'        </WorkingStep>
'        <WorkingStep OperationNo="0020">
'          <Activity>OP-LASER</Activity>
'          <WorkPlace>TLC7030-01</WorkPlace>
'          <FeedbackFlag>1</FeedbackFlag>
'        </WorkingStep>
'        <WorkingStep OperationNo="0030">
'          <Activity>OP-DENEST</Activity>
'          <WorkPlace>PartSeparation-01</WorkPlace>
'          <FeedbackFlag>1</FeedbackFlag>
'        </WorkingStep>
'        <WorkingStep OperationNo="0040">
'          <Activity>OP-BRAKE</Activity>
'          <WorkPlace>TBC5000-01</WorkPlace>
'          <FeedbackFlag>1</FeedbackFlag>
'        </WorkingStep>
'      </WorkingPlan>
'    </Part>
'  </Parts>
'</PPSImport>

F.Intrinsic.Control.Try

V.Local.sSQL.Declare(String)
V.Local.iCounter.Declare(Long)
V.Local.iOperation.Declare(Long)
V.Local.sParent.Declare(String, "Root")

'create parts node
F.Global.XML.AppendTextNode(V.Args.Document, V.Local.sParent, V.Ambient.Tab)
F.Global.XML.CreateElementNode(V.Args.Document, "Parts","")
F.Global.XML.AppendNodeToRoot(V.Args.Document, "Parts")
V.Local.sParent.Set("Parts")

'filler
F.Global.XML.AppendTextNode(V.Args.Document, V.Local.sParent, V.Ambient.NewLine)
F.Global.XML.AppendTextNode(V.Args.Document, V.Local.sParent, V.Ambient.Tab)

'loop through, for each part, grab sequences. If they have an OSEON map, add the record. 
F.Intrinsic.Control.For(V.Local.iCounter, V.DataTable.dtExportJobsData.RowCount--)
	'grab labor sequences
	F.Intrinsic.String.Build("select RTRIM(SEQ) SEQ, CAST(SEQ as INTEGER) SEQ_INTEGER, RTRIM(PART) WC from V_JOB_OPERATIONS where JOB = '{0}' and SUFFIX = '{1}' and LMO = 'L' and SEQ < '990000' order by SEQ", V.DataTable.dtExportJobsData(V.Local.iCounter).JOB!FieldValTrim, V.DataTable.dtExportJobsData(V.Local.iCounter).SUFFIX!FieldValTrim, V.Local.sSQL)
	F.Data.DataTable.CreateFromSQL("dtOseonSequences", "Con", V.Local.sSQL)
	
	'grab scheduled WC
	F.Intrinsic.String.Build("select Distinct SEQ, RTRIM(SAR) SAR from APSV3_UBDETAIL where JOB = '{0}' and SFX = '{1}' order by BNo", V.DataTable.dtExportJobsData(V.Local.iCounter).JOB!FieldValTrim, V.DataTable.dtExportJobsData(V.Local.iCounter).SUFFIX!FieldValTrim, V.Local.sSQL)
	F.Data.Dictionary.CreateFromSQL("dictTemp", "Con", V.Local.sSQL)
	F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
	F.Data.DataTable.AddColumn("dtOseonSequences", "APS_WC", "String", "")
	F.Data.DataTable.FillFromDictionary("dtOseonSequences", "dictTemp", "SEQ_INTEGER", "APS_WC")
	F.Data.Dictionary.Close("dictTemp")
	
	'grab OSEON operations
	F.Intrinsic.String.Build("select RTRIM(WC) WC, IF(IsNull(XREF, '') = '', RTRIM(WC), RTRIM(XREF)) XREF, RTRIM(OSEON_OPERATION) OSEON_OPERATION from GCG_4980_WCXREF where PROFILE = '{0}' and OSEON_OPERATION <> ''", V.Global.sProfile.Trim, V.Local.sSQL)
	F.Data.DataTable.CreateFromSQL("dtOseon", "Con", V.Local.sSQL)
	
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtOseon", "WC", "XREF")
	F.Data.DataTable.AddColumn("dtOseonSequences", "WC_XREF", "String", "")
	F.Data.DataTable.FillFromDictionary("dtOseonSequences", "dictTemp", "APS_WC", "WC_XREF")
	F.Data.Dictionary.Close("dictTemp")
	
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtOseon", "WC", "OSEON_OPERATION")
	F.Data.DataTable.AddColumn("dtOseonSequences", "OSEON_OPERATION", "String", "")
	F.Data.DataTable.FillFromDictionary("dtOseonSequences", "dictTemp", "APS_WC", "OSEON_OPERATION")
	F.Data.Dictionary.Close("dictTemp")
	
	F.Data.DataTable.Close("dtOseon")
	
	'adding the programming operation
	'originally this was going to be based off the labor sequence like the rest
	'but it turns out they don't actually have a labor sequence for programming
	'they are just adding a comment sequence about programming
	'only do this if there is a cutting sequence, based off the nesting interface flag
	'it's rare that they only have bending
	'hardcodeing this for now (Sargent Metal)
	'for now just always do it, bend only jobs won't go through this interface anyway
	F.Data.DataTable.AddRow("dtOseonSequences", "OSEON_OPERATION", "NC sheet generation", "WC_XREF", "Programming-1", "SEQ", "000000")
	
	'now filter to what we need
	F.Data.DataView.Create("dtOseonSequences", "dvWorkPlan", 22, "OSEON_OPERATION <> ''", "SEQ")
	F.Data.DataTable.AddColumn("dtOseonSequences", "STEP", "Long", 0)
	F.Data.DataView.SetSeries("dtOseonSequences", "dvWorkPlan", "STEP", 1, 1)
	F.Data.DataTable.AddExpressionColumn("dtOseonSequences", "STEP_STRING", "String", "SUBSTRING('0000' + Convert([STEP], 'System.String'), 1 + LEN(Convert([STEP], 'System.String')), 3 + LEN(Convert([STEP], 'System.String')))")
	
	F.Intrinsic.Control.If(V.DataView.dtOseonSequences!dvWorkPlan.RowCount, >, 0)
		F.Global.XML.AppendTextNode(V.Args.Document, V.Local.sParent, V.Ambient.Tab)
		
		'now part node
		F.Global.XML.CreateElementNode(V.Args.Document, "Part", "")
		F.Global.XML.AppendNode(V.Args.Document, V.Local.sParent, "Part")
		V.Local.sParent.Set("Part")
		
		'filler
		F.Global.XML.AppendTextNode(V.Args.Document, V.Local.sParent, V.Ambient.NewLine)
		F.Global.XML.AppendTextNode(V.Args.Document, V.Local.sParent, V.Ambient.Tab)
		F.Global.XML.AppendTextNode(V.Args.Document, V.Local.sParent, V.Ambient.Tab)
		F.Global.XML.AppendTextNode(V.Args.Document, V.Local.sParent, V.Ambient.Tab)
		
		F.Data.DataView.SetFilter("dtBoostMapping", "TempChkVw", "XPFIELD = 'PartNo'")
		F.Intrinsic.Control.If(V.DataView.dtBoostMapping!TempChkVw.RowCount, >, 0)
			F.Intrinsic.Control.If(V.DataView.dtBoostMapping!TempChkVw(0).MAPID!FieldValTrim, !=, "NA")
				F.Global.XML.CreateAttributeNode(V.Args.Document, "PartNo", V.DataTable.dtExportJobsData(V.Local.iCounter).[V.DataView.dtBoostMapping!TempChkVw(0).MAPID!FieldValTrim]!FieldValTrim)
				F.Global.XML.SetAttributeToNode(V.Args.Document, "Part", "PartNo")
				F.Global.XML.DestroyNode(V.Args.Document, "PartNo")
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.EndIf
		
		'now workplan node
		F.Global.XML.CreateElementNode(V.Args.Document, "WorkingPlan", "")
		F.Global.XML.AppendNode(V.Args.Document, V.Local.sParent, "WorkingPlan")
		V.Local.sParent.Set("WorkingPlan")
		
		'filler
		F.Global.XML.AppendTextNode(V.Args.Document, V.Local.sParent, V.Ambient.NewLine)
		F.Global.XML.AppendTextNode(V.Args.Document, V.Local.sParent, V.Ambient.Tab)
		F.Global.XML.AppendTextNode(V.Args.Document, V.Local.sParent, V.Ambient.Tab)
		F.Global.XML.AppendTextNode(V.Args.Document, V.Local.sParent, V.Ambient.Tab)
		
		'now individual steps
		F.Intrinsic.Control.For(V.Local.iOperation, V.DataView.dtOseonSequences!dvWorkPlan.RowCount--)
			F.Global.XML.AppendTextNode(V.Args.Document, V.Local.sParent, V.Ambient.Tab)
			
			'working step
			F.Global.XML.CreateElementNode(V.Args.Document, "WorkingStep", "")
			F.Global.XML.AppendNode(V.Args.Document, V.Local.sParent, "WorkingStep")
			V.Local.sParent.Set("WorkingStep")
			
			'filler
			F.Global.XML.AppendTextNode(V.Args.Document, V.Local.sParent, V.Ambient.NewLine)
			F.Global.XML.AppendTextNode(V.Args.Document, V.Local.sParent, V.Ambient.Tab)
			F.Global.XML.AppendTextNode(V.Args.Document, V.Local.sParent, V.Ambient.Tab)
			F.Global.XML.AppendTextNode(V.Args.Document, V.Local.sParent, V.Ambient.Tab)
			F.Global.XML.AppendTextNode(V.Args.Document, V.Local.sParent, V.Ambient.Tab)
			F.Global.XML.AppendTextNode(V.Args.Document, V.Local.sParent, V.Ambient.Tab)
			
			F.Global.XML.CreateAttributeNode(V.Args.Document, "OperationNo", V.DataView.dtOseonSequences!dvWorkPlan(V.Local.iOperation).STEP_STRING!FieldValTrim)
			F.Global.XML.SetAttributeToNode(V.Args.Document, "WorkingStep", "OperationNo")
			F.Global.XML.DestroyNode(V.Args.Document, "OperationNo")
			
			'now add activity, workplace, feedbackflag
			F.Global.XML.CreateElementNode(V.Args.Document, "Activity", V.DataView.dtOseonSequences!dvWorkPlan(V.Local.iOperation).OSEON_OPERATION!FieldValTrim)
			F.Global.XML.AppendNode(V.Args.Document, V.Local.sParent, "Activity")
			
			'filler
			F.Global.XML.AppendTextNode(V.Args.Document, V.Local.sParent, V.Ambient.NewLine)
			F.Global.XML.AppendTextNode(V.Args.Document, V.Local.sParent, V.Ambient.Tab)
			F.Global.XML.AppendTextNode(V.Args.Document, V.Local.sParent, V.Ambient.Tab)
			F.Global.XML.AppendTextNode(V.Args.Document, V.Local.sParent, V.Ambient.Tab)
			F.Global.XML.AppendTextNode(V.Args.Document, V.Local.sParent, V.Ambient.Tab)
			F.Global.XML.AppendTextNode(V.Args.Document, V.Local.sParent, V.Ambient.Tab)
			
			F.Global.XML.DestroyNode(V.Args.Document, "Activity")
			
			F.Global.XML.CreateElementNode(V.Args.Document, "WorkPlace", V.DataView.dtOseonSequences!dvWorkPlan(V.Local.iOperation).WC_XREF!FieldValTrim)
			F.Global.XML.AppendNode(V.Args.Document, V.Local.sParent, "WorkPlace")
			
			'filler
			F.Global.XML.AppendTextNode(V.Args.Document, V.Local.sParent, V.Ambient.NewLine)
			F.Global.XML.AppendTextNode(V.Args.Document, V.Local.sParent, V.Ambient.Tab)
			F.Global.XML.AppendTextNode(V.Args.Document, V.Local.sParent, V.Ambient.Tab)
			F.Global.XML.AppendTextNode(V.Args.Document, V.Local.sParent, V.Ambient.Tab)
			F.Global.XML.AppendTextNode(V.Args.Document, V.Local.sParent, V.Ambient.Tab)
			F.Global.XML.AppendTextNode(V.Args.Document, V.Local.sParent, V.Ambient.Tab)
			
			F.Global.XML.DestroyNode(V.Args.Document, "WorkPlace")
			
			F.Global.XML.CreateElementNode(V.Args.Document, "FeedbackFlag", "1")
			F.Global.XML.AppendNode(V.Args.Document, V.Local.sParent, "FeedbackFlag")
			
			'filler
			F.Global.XML.AppendTextNode(V.Args.Document, V.Local.sParent, V.Ambient.NewLine)
			F.Global.XML.AppendTextNode(V.Args.Document, V.Local.sParent, V.Ambient.Tab)
			F.Global.XML.AppendTextNode(V.Args.Document, V.Local.sParent, V.Ambient.Tab)
			F.Global.XML.AppendTextNode(V.Args.Document, V.Local.sParent, V.Ambient.Tab)
			F.Global.XML.AppendTextNode(V.Args.Document, V.Local.sParent, V.Ambient.Tab)
			
			F.Global.XML.DestroyNode(V.Args.Document, "FeedbackFlag")
			
			F.Global.XML.DestroyNode(V.Args.Document, "WorkingStep")
			V.Local.sParent.Set("WorkingPlan")
			
			F.Global.XML.AppendTextNode(V.Args.Document, V.Local.sParent, V.Ambient.NewLine)
			F.Global.XML.AppendTextNode(V.Args.Document, V.Local.sParent, V.Ambient.Tab)
			F.Global.XML.AppendTextNode(V.Args.Document, V.Local.sParent, V.Ambient.Tab)
			F.Global.XML.AppendTextNode(V.Args.Document, V.Local.sParent, V.Ambient.Tab)
		F.Intrinsic.Control.Next(V.Local.iOperation)
		
		F.Global.XML.DestroyNode(V.Args.Document, "WorkingPlan")
		V.Local.sParent.Set("Part")
		F.Global.XML.AppendTextNode(V.Args.Document, V.Local.sParent, V.Ambient.NewLine)
		F.Global.XML.AppendTextNode(V.Args.Document, V.Local.sParent, V.Ambient.Tab)
		F.Global.XML.AppendTextNode(V.Args.Document, V.Local.sParent, V.Ambient.Tab)
		
		F.Global.XML.DestroyNode(V.Args.Document, "Part")
		V.Local.sParent.Set("Parts")
		F.Global.XML.AppendTextNode(V.Args.Document, V.Local.sParent, V.Ambient.NewLine)
		F.Global.XML.AppendTextNode(V.Args.Document, V.Local.sParent, V.Ambient.Tab)
		
	F.Intrinsic.Control.EndIf
	
	F.Data.DataTable.Close("dtOseonSequences")
F.Intrinsic.Control.Next(V.Local.iCounter)

F.Global.XML.DestroyNode(V.Args.Document, "Parts")
V.Local.sParent.Set("Root")
F.Global.XML.AppendTextNode(V.Args.Document, V.Local.sParent, V.Ambient.NewLine)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Callback", "FNestExport_Unload", "PROJECT", "4980", "PROJECTTITLE", "GCG_4980_NEST_XP", "TASK", "GCG_4980_NEST_XP")
F.Intrinsic.Control.EndTry
Program.Sub.OseonWorkPlan.End

Program.Sub.RunExport.Start
F.Intrinsic.Control.Try

V.Local.sMap.Declare
V.Local.sFields.Declare
V.Local.sExpression.Declare
V.Local.sFieldHeader.Declare
V.Local.sPartCol.Declare
V.Local.sXP.Declare
V.Local.sDate.Declare
V.Local.sTime.Declare
V.Local.sOutfile.Declare
V.Local.sSQL.Declare
V.Local.iCount.Declare
V.Local.iPart.Declare
V.Local.iWC.Declare
V.Local.sType.Declare(String)
V.Local.sSYNFile.Declare(String)
V.Local.sError.Declare(String)
V.Local.sBackup.Declare(String)

V.Local.sType.Set(V.Args.Type)

F.Data.DataView.Create("dtMapping","dvMapping",22)
F.Data.DataView.ToString("dtMapping","dvMapping","MAPID","","*!*",V.Local.sMap)

'use formatted date columns
F.Intrinsic.String.Replace(V.Local.sMap, "C00", "C00_FORMAT", V.Local.sMap)
F.Intrinsic.String.Replace(V.Local.sMap, "C92", "C92_FORMAT", V.Local.sMap)
F.Intrinsic.String.Replace(V.Local.sMap, "C95", "C95_FORMAT", V.Local.sMap)
F.Intrinsic.String.Replace(V.Local.sMap, "C96", "C96_FORMAT", V.Local.sMap)
F.Intrinsic.String.Replace(V.Local.sMap, "C97", "C97_FORMAT", V.Local.sMap)
F.Intrinsic.String.Replace(V.Local.sMap, "C08", "C08_FORMAT", V.Local.sMap)

F.Data.DataView.ToString("dtMapping","dvMapping","XPFIELD_CASE","",",",V.Local.sFields)
F.Intrinsic.String.Replace(V.Local.sFields, V.Ambient.NewLine, "", V.Local.sFields)
F.Intrinsic.String.Split(V.Local.sMap,"*!*",V.Local.sPartCol)

'WC XREF and dxf full part
F.Intrinsic.Control.If(V.Args.Type.Trim, =, "OPS")
	
	'WC XREF
	F.Data.DataView.SetFilter("dtMapping","dvMapping","XPFIELD = 'WORK_CENTER'")
	F.Intrinsic.Control.If(V.DataView.dtMapping!dvMapping.RowCount, >, 0)
		V.Local.iWC.Set(V.DataView.dtMapping!dvMapping(0).INDX!fieldvallong)
		F.Intrinsic.String.Build("Select RTRIM(WC) as WC, RTRIM(XREF) as XREF from GCG_4980_WCXREF where profile = '{0}'",V.Global.sProfile,V.Local.sSQL)
		F.Data.Dictionary.CreateFromSQL("WCXrefDict","Con",V.Local.sSQL)
		F.Data.Dictionary.SetDefaultReturn("WCXrefDict","")
		F.Data.DataTable.FillFromDictionary("dtExportJobsData","WCXrefDict",V.Local.sPartCol(V.Local.iWC))
		F.Data.Dictionary.Close("WCXrefDict")
		
		F.Intrinsic.String.Build("'L(' + {0} + ')'",V.Local.sPartCol(V.Local.iWC),V.Local.sExpression)
		
		F.Data.DataTable.AddExpressionColumn("dtExportJobsData","FullWC","String",V.Local.sExpression)
		F.Data.DataView.SetValue("dtMapping","dvMapping",0,"MAPID","FullWC")
	F.Intrinsic.Control.EndIf
	
	'dxf full part path
	F.Data.DataView.SetFilter("dtMapping","dvMapping","XPFIELD = 'PRODUCTION_DESC_1'")
	F.Intrinsic.Control.If(V.DataView.dtMapping!dvMapping.RowCount, >, 0)
		V.Local.iPart.Set(V.DataView.dtMapping!dvMapping(0).INDX!fieldvallong)
		
		F.Intrinsic.Control.If(V.DataView.ProfDT!ProfVw(0).FULL_PART_FLAG!fieldVal)
			F.Intrinsic.String.Build("'L({0}' + {1} + '.dxf)'",V.DataView.ProfDT!ProfVw(0).FULL_PART_Path!fieldValtrim,V.Local.sPartCol(V.Local.iPart),V.Local.sExpression)
			F.Data.DataTable.AddExpressionColumn("dtExportJobsData","FullPart","String",V.Local.sExpression)
			F.Data.DataView.SetFilter("dtMapping","dvMapping","XPFIELD = 'PRODUCTION_DESC_1'")
			F.Data.DataView.SetValue("dtMapping","dvMapping",0,"MAPID","FullPart")
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
	
	F.Data.DataView.SetFilter("dtMapping","dvMapping","")
	F.Data.DataView.ToString("dtMapping","dvMapping","MAPID","","*!*",V.Local.sMap)
F.Intrinsic.Control.Else
	'dxf full part path
	F.Intrinsic.Control.If(V.DataView.ProfDT!ProfVw(0).FULL_PART_FLAG!fieldVal)
		F.Intrinsic.String.Build("'{0}\' + {1} + '.dxf'",V.DataView.ProfDT!ProfVw(0).FULL_PART_Path!fieldValtrim,V.Local.sPartCol(0),V.Local.sExpression)
		F.Intrinsic.String.Replace(V.Local.sMap,V.Local.sPartCol(0),"FullPart",V.Local.sMap)
		F.Data.DataTable.AddExpressionColumn("dtExportJobsData","FullPart","String",V.Local.sExpression)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Data.DataView.Close("dtMapping","dvMapping")

F.Intrinsic.String.Build("{0}@!@",V.Local.sMap,V.Local.sMap)
F.Intrinsic.string.Replace(V.Local.sMap,"*!*@!@","",V.Local.sMap)
F.Intrinsic.string.Replace(V.Local.sMap,"@!@","",V.Local.sMap)

F.Intrinsic.Control.If(V.Args.Type.Trim, =, "DrAbe", or, V.Args.Type.Trim, =, "OPS")
	F.Data.DataTable.SetValueFormat("dtExportJobsData", -1, "C15", "C15", "0")
F.Intrinsic.Control.EndIf

F.Data.DataView.create("dtExportJobsData","XPVW",22)
F.Data.DataView.ToString("dtExportJobsData","XPVW",V.Local.sMap,",",V.Ambient.NewLine,V.Local.sXP)

'include headers if needed
F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "EXPORT_OPTION", "SETTING", "INCLUDE_HEADERS", "PROFILE", V.Global.sProfile)
F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
	F.Intrinsic.Control.If(V.Args.Setting.Long, =, 1)
		F.Intrinsic.Control.If(V.Args.Type.Trim, =, "OPS")
			F.Intrinsic.String.build("{0}{1}{2}",V.Local.sFields.LCase,V.Ambient.NewLine,V.Local.sXP,V.Local.sXP)
		F.Intrinsic.Control.Else
			F.Intrinsic.String.build("{0}{1}{2}",V.Local.sFields,V.Ambient.NewLine,V.Local.sXP,V.Local.sXP)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf
F.Intrinsic.string.Replace(V.Local.sXP,"12:00:00 AM","",V.Local.sXP)

F.Intrinsic.String.Format(V.Ambient.Date,"mmddyyyy",V.Local.sDate)
F.Intrinsic.String.Format(V.Ambient.Time,"HhNnss",V.Local.sTime)

'if they have a static file name set, use that
F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "EXPORT_OPTION", "SETTING", "FILE_NAME", "PROFILE", V.Global.sProfile)
F.Intrinsic.Control.If(V.Args.Setting, =, "")
	F.intrinsic.string.Build("{0}\{3}XP_{1}_{2}.csv", V.Global.sXPPATH, V.Local.sDate, V.Local.sTime, V.Local.sType, V.Local.sOutfile)
	F.intrinsic.string.Build("{0}\{3}XP_{1}_{2}.csv", V.Local.sBackup, V.Local.sDate, V.Local.sTime, V.Local.sType, V.Local.sBackup)
F.Intrinsic.Control.Else
	F.intrinsic.string.Build("{0}\{1}.csv", V.Global.sXPPATH, V.Args.Setting, V.Local.sOutfile)
	F.intrinsic.string.Build("{0}\{1}.csv", V.Local.sBackup, V.Args.Setting, V.Local.sBackup)
F.Intrinsic.Control.EndIf

F.Intrinsic.File.String2File(V.Local.sOutFile,V.Local.sXP)

'create SYN file for OPS
F.Intrinsic.Control.If(V.Args.Type.Trim, =, "OPS")
	F.Intrinsic.String.Replace(V.Local.sOutfile, ".csv", ".syn", V.Local.sSYNFile)
	F.Intrinsic.File.String2File(V.Local.sSYNFile,V.Local.sXP)
F.Intrinsic.Control.EndIf

F.Data.DataView.Close("dtExportJobsData","XPVW")

F.Intrinsic.Variable.AddRV("Export_File", V.Local.sOutfile)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Callback", "FNestExport_Unload", "PROJECT", "4980", "PROJECTTITLE", "GCG_4980_NEST_XP", "TASK", "GCG_4980_NEST_XP")
F.Intrinsic.Control.EndTry
Program.Sub.RunExport.End

Program.Sub.FNestExport_UnLoad.Start
F.Intrinsic.Control.Try

F.Intrinsic.Control.If(V.DataTable.dtJobData.Exists)
	F.Intrinsic.Control.If(V.Global.bLoadData.Not)
		F.Intrinsic.Control.If(V.Global.bUnattended.Not)
			F.Intrinsic.Control.CallSub(Serialize, "FORM", "FNestExport", "GRIDCONTROL", "GsGCJobs", "GRIDVIEW", "gvJobs", "REGID", 4980)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub("CloseSettingsDT")
F.Intrinsic.Control.CallSub(Connection, "CONNECT", False)
F.Intrinsic.Control.CallSub(ScriptPIDClear, "PROJECT", "4980", "TASK", "GCG_4980_NEST_XP")
F.Intrinsic.Control.End

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Callback", "FNestExport_Unload", "PROJECT", "4980", "PROJECTTITLE", "GCG_4980_NEST_XP", "TASK", "GCG_4980_NEST_XP")
F.Intrinsic.Control.EndTry
Program.Sub.FNestExport_UnLoad.End

Program.Sub.ContextMenuItemSelection.Start
F.Intrinsic.Control.Try

V.Local.sJobs.Declare(String)
V.Local.sMessage.Declare(String)
V.Local.iRet.Declare(Long)
V.Local.sFilter.Declare(String)
V.Local.sSQL.Declare(String)
 
F.Intrinsic.Control.If(V.Args.ItemName,=,"SELECTF")
	F.Intrinsic.Control.CallSub(GridViewFilterToDataViewFilter, "FILTER", V.Global.sFilter)
	F.Data.DataView.Create("dtJobData","SetVw",22,V.Args.Filter,"")
	F.Data.DataView.SetValue("dtJobData","SetVw",-1,"Selected",True)
	F.Data.DataView.Close("dtJobData","SetVw")
	F.Intrinsic.Control.CallSub(LoadTotals, "SELECTED_OVERRIDE", -1)
	
F.Intrinsic.Control.ElseIf(V.Args.ItemName,=,"USELECTF")
	F.Intrinsic.Control.CallSub(GridViewFilterToDataViewFilter, "FILTER", V.Global.sFilter)
	F.Data.DataView.Create("dtJobData","SetVw",22,V.Args.Filter,"")
	F.Data.DataView.SetValue("dtJobData","SetVw",-1,"Selected",False)
	F.Data.DataView.Close("dtJobData","SetVw")
	F.Intrinsic.Control.CallSub(LoadTotals, "SELECTED_OVERRIDE", -1)
	
F.Intrinsic.Control.ElseIf(V.Args.ItemName,=,"SELECT")
	F.Data.DataView.SetValue("dtJobData","dvJobData",-1,"Selected",True)
	F.Intrinsic.Control.CallSub(LoadTotals, "SELECTED_OVERRIDE", V.DataTable.dtJobData.RowCount)

F.Intrinsic.Control.ElseIf(V.Args.ItemName,=,"USELECT")
	F.Data.DataView.SetValue("dtJobData","dvJobData",-1,"Selected",False)
	F.Intrinsic.Control.CallSub(LoadTotals, "SELECTED_OVERRIDE", 0)
	
F.Intrinsic.Control.ElseIf(V.Args.ItemName,=,"UFLAGEXP")
	F.Data.DataView.Create("dtJobData","SetVw",22,"Selected = True","")

	F.Intrinsic.Control.If(V.DataView.dtJobData!SetVw.RowCount, >, 0)
	
		F.Intrinsic.Control.If(V.DataView.dtJobData!SetVw.RowCount, =, 1)
			V.Local.sMessage.Set("Are you sure you want to remove the exported flag on this 1 job?")
		F.Intrinsic.Control.Else
			F.Intrinsic.String.Build("Are you sure you want to remove the exported flag on these {0} jobs?", V.DataView.dtJobData!SetVw.RowCount, V.Local.sMessage)
		F.Intrinsic.Control.EndIf
		
		F.Intrinsic.UI.Msgbox(V.Local.sMessage, "Unflag", 4, V.Local.iRet)
		F.Intrinsic.Control.If(V.Local.iRet, =, V.Ambient.MsgBoxYes)
		
			F.Data.DataView.ToString("dtJobData", "SetVw", "JSS", "***NODELIMITER***", "','", V.Local.sJobs)
			F.Intrinsic.String.Build("delete from GCG_4980_EXPORT_DATE where JOB + SUFFIX + SEQUENCE in ('{0}')", V.Local.sJobs, V.Local.sSQL)
			F.ODBC.Connection!Con.Execute(V.Local.sSQL)
			
			F.Data.DataView.SetValue("dtJobData","SetVw",-1,"Exported", False, "EXPORT_DATE", "1900-01-01", "EXPORT_USER", "", "EXPORT_FILE", "")
			
			F.Data.DataView.ToDataTable("dtJobData", "SetVw", "dtUnexported")
			F.Data.DataTable.AddColumn("dtUnexported", "EXPORTED_FLAG", "String", "")
			F.Data.DataTable.SaveToDB("dtUnexported","Con","JOB_HEADER","Job*!*Suffix",256,"Job@!@job*!*suffix@!@suffix*!*EXPORTED_FLAG@!@exported")
			F.Data.DataTable.Close("dtUnexported")
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
	
	F.Data.DataView.Close("dtJobData","SetVw")

F.Intrinsic.Control.ElseIf(V.Args.ItemName, =, "COPYFILTER")
	GUI.FNestExport.GsGCJobs.FilterToWhereClause("gvJobs", V.Local.sFilter)
	
	F.Intrinsic.Control.If(V.Local.sFilter.Trim, !=, "")
		F.Intrinsic.UI.SetClipboardText(V.Local.sFilter)
	F.Intrinsic.Control.EndIf

F.Intrinsic.Control.ElseIf(V.Args.ItemName, =, "RESET")
	F.Intrinsic.Control.CallSub(ResetSerialization, "GridView", "gvJobs", "RegID", "4980")
	F.Intrinsic.Control.CallSub(FormatJobGrid)
	
F.Intrinsic.Control.ElseIf(V.Args.ItemName, =, "EXPORT")
	F.Intrinsic.Control.CallSub(Export, "Form", "FNestExport", "GRIDCONTROL", "GsGCJobs", "FileName", "NestingExportMenuJobGrid")
	
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.If(V.Ambient.ErrorNumber, =, 21058)
		F.Intrinsic.UI.Msgbox("This type of filter cannot be used for select filtered rows. Please use a different filter or select the rows manually.")
	F.Intrinsic.Control.Else
		F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Callback", "FNestExport_Unload", "PROJECT", "4980", "PROJECTTITLE", "GCG_4980_NEST_XP", "TASK", "GCG_4980_NEST_XP")
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndTry
Program.Sub.ContextMenuItemSelection.End

Program.Sub.GridViewFilterToDataViewFilter.Start
'this sub is for converting the active filter string of a gridview into a dataview friendly version
'FILTER	-	The Active Filter String

'valid operators: =, >, <, >=, <=, <>, in, is null, not, like

F.Intrinsic.Control.Try

V.Local.sFilter.Declare(String)
V.Local.sRet.Declare(String)
V.Local.iCounter.Declare(Long)
V.Local.sFields.Declare(String)
V.Local.sTemp.Declare(String)
V.Local.sTemp2.Declare(String)
V.Local.sFindString.Declare(String)
V.Local.sReplaceString.Declare(String)
V.Local.sValues.Declare(String)
V.Local.sValueReturn.Declare(String)
V.Local.sFieldReturn.Declare(String)
V.Local.sValueRegEx.Declare(String, "\'[^']*\'")
V.Local.sFieldRegEx.Declare(String, "\[[A-Za-z0-9_-]+\]")
V.Local.sNumberRegEx.Declare(String, "-?[0-9]+(\.[0-9]+)?")
V.Local.sRegEx.Declare(String)
V.Local.sMatch.Declare(String)
V.Local.ilength.Declare(Long)
V.Local.sValueReturn2.Declare(String)

V.Local.sFilter.Set(V.Args.Filter)

'fix all IsNullOrEmpty
F.Intrinsic.String.Build("IsNullOrEmpty\({0}\)", V.Local.sFieldRegEx, V.Local.sRegEx)
F.Intrinsic.String.RegExMatch(V.Local.sFilter, V.Local.sRegEx, True, V.Local.sRet)
F.Intrinsic.Control.If(V.Local.sRet.Trim, !=, "")
	F.Intrinsic.String.Split(V.Local.sRet, "@!@", V.Local.sRet)
	F.Intrinsic.Control.For(V.Local.iCounter, 0, V.Local.sRet.UBound, 1)
		
		'get match
		F.Intrinsic.String.Split(V.Local.sRet(V.Local.iCounter), "*!*", V.Local.sTemp)
		V.Local.sMatch.Set(V.Local.sTemp(1))
		
		'get the field, only one
		F.Intrinsic.String.RegExMatch(V.Local.sMatch, V.Local.sFieldRegEx, True, V.Local.sTemp)
		F.Intrinsic.String.Split(V.Local.sTemp, "*!*", V.Local.sTemp)
		V.Local.sFieldReturn.Set(V.Local.sTemp(1))
		
		'Replace
		F.Intrinsic.String.Build("({0} is Null or {0} = '')", V.Local.sFieldReturn, V.Local.sReplaceString)
		F.Intrinsic.String.Replace(V.Local.sFilter, V.Local.sMatch, V.Local.sReplaceString, V.Local.sFilter)
	F.Intrinsic.Control.Next(V.Local.iCounter)
F.Intrinsic.Control.EndIf

'fix all StartsWith
F.Intrinsic.String.Build("StartsWith\({0},\s*{1}\)", V.Local.sFieldRegEx, V.Local.sValueRegEx, V.Local.sRegEx)
F.Intrinsic.String.RegExMatch(V.Local.sFilter, V.Local.sRegEx, True, V.Local.sRet)
F.Intrinsic.Control.If(V.Local.sRet.Trim, !=, "")
	F.Intrinsic.String.Split(V.Local.sRet, "@!@", V.Local.sRet)
	F.Intrinsic.Control.For(V.Local.iCounter, 0, V.Local.sRet.UBound, 1)
		
		'get match
		F.Intrinsic.String.Split(V.Local.sRet(V.Local.iCounter), "*!*", V.Local.sTemp)
		V.Local.sMatch.Set(V.Local.sTemp(1))
		
		'get the field, only one
		F.Intrinsic.String.RegExMatch(V.Local.sMatch, V.Local.sFieldRegEx, True, V.Local.sTemp)
		F.Intrinsic.String.Split(V.Local.sTemp, "*!*", V.Local.sTemp)
		V.Local.sFieldReturn.Set(V.Local.sTemp(1))
		
		'get the value, only one
		F.Intrinsic.String.RegExMatch(V.Local.sMatch, V.Local.sValueRegEx, True, V.Local.sTemp)
		F.Intrinsic.String.Split(V.Local.sTemp, "*!*", V.Local.sTemp)
		V.Local.sValueReturn.Set(V.Local.sTemp(1))
		F.Intrinsic.String.TrimChar(V.Local.sValueReturn, "'", V.Local.sValueReturn)
		
		'Replace
		F.Intrinsic.String.Build("{0} like '{1}%'", V.Local.sFieldReturn, V.Local.sValueReturn, V.Local.sReplaceString)
		F.Intrinsic.String.Replace(V.Local.sFilter, V.Local.sMatch, V.Local.sReplaceString, V.Local.sFilter)
	F.Intrinsic.Control.Next(V.Local.iCounter)
F.Intrinsic.Control.EndIf

'fix all EndsWith
F.Intrinsic.String.Build("EndsWith\({0},\s*{1}\)", V.Local.sFieldRegEx, V.Local.sValueRegEx, V.Local.sRegEx)
F.Intrinsic.String.RegExMatch(V.Local.sFilter, V.Local.sRegEx, True, V.Local.sRet)
F.Intrinsic.Control.If(V.Local.sRet.Trim, !=, "")
	F.Intrinsic.String.Split(V.Local.sRet, "@!@", V.Local.sRet)
	F.Intrinsic.Control.For(V.Local.iCounter, 0, V.Local.sRet.UBound, 1)
		
		'get match
		F.Intrinsic.String.Split(V.Local.sRet(V.Local.iCounter), "*!*", V.Local.sTemp)
		V.Local.sMatch.Set(V.Local.sTemp(1))
		
		'get the field, only one
		F.Intrinsic.String.RegExMatch(V.Local.sMatch, V.Local.sFieldRegEx, True, V.Local.sTemp)
		F.Intrinsic.String.Split(V.Local.sTemp, "*!*", V.Local.sTemp)
		V.Local.sFieldReturn.Set(V.Local.sTemp(1))
		
		'get the value, only one
		F.Intrinsic.String.RegExMatch(V.Local.sMatch, V.Local.sValueRegEx, True, V.Local.sTemp)
		F.Intrinsic.String.Split(V.Local.sTemp, "*!*", V.Local.sTemp)
		V.Local.sValueReturn.Set(V.Local.sTemp(1))
		F.Intrinsic.String.TrimChar(V.Local.sValueReturn, "'", V.Local.sValueReturn)
		
		'Replace
		F.Intrinsic.String.Build("{0} like '%{1}'", V.Local.sFieldReturn, V.Local.sValueReturn, V.Local.sReplaceString)
		F.Intrinsic.String.Replace(V.Local.sFilter, V.Local.sMatch, V.Local.sReplaceString, V.Local.sFilter)
	F.Intrinsic.Control.Next(V.Local.iCounter)
F.Intrinsic.Control.EndIf

'fix all Contains
F.Intrinsic.String.Build("Contains\({0},\s*{1}\)", V.Local.sFieldRegEx, V.Local.sValueRegEx, V.Local.sRegEx)
F.Intrinsic.String.RegExMatch(V.Local.sFilter, V.Local.sRegEx, True, V.Local.sRet)
F.Intrinsic.Control.If(V.Local.sRet.Trim, !=, "")
	F.Intrinsic.String.Split(V.Local.sRet, "@!@", V.Local.sRet)
	F.Intrinsic.Control.For(V.Local.iCounter, 0, V.Local.sRet.UBound, 1)
		
		'get match
		F.Intrinsic.String.Split(V.Local.sRet(V.Local.iCounter), "*!*", V.Local.sTemp)
		V.Local.sMatch.Set(V.Local.sTemp(1))
		
		'get the field, only one
		F.Intrinsic.String.RegExMatch(V.Local.sMatch, V.Local.sFieldRegEx, True, V.Local.sTemp)
		F.Intrinsic.String.Split(V.Local.sTemp, "*!*", V.Local.sTemp)
		V.Local.sFieldReturn.Set(V.Local.sTemp(1))
		
		'get the value, only one
		F.Intrinsic.String.RegExMatch(V.Local.sMatch, V.Local.sValueRegEx, True, V.Local.sTemp)
		F.Intrinsic.String.Split(V.Local.sTemp, "*!*", V.Local.sTemp)
		V.Local.sValueReturn.Set(V.Local.sTemp(1))
		F.Intrinsic.String.TrimChar(V.Local.sValueReturn, "'", V.Local.sValueReturn)
		
		'Replace
		F.Intrinsic.String.Build("{0} like '%{1}%'", V.Local.sFieldReturn, V.Local.sValueReturn, V.Local.sReplaceString)
		F.Intrinsic.String.Replace(V.Local.sFilter, V.Local.sMatch, V.Local.sReplaceString, V.Local.sFilter)
	F.Intrinsic.Control.Next(V.Local.iCounter)
F.Intrinsic.Control.EndIf

'fix between
F.Intrinsic.String.Build("{0} Between\({1}m?, {1}m?\)", V.Local.sFieldRegEx, V.Local.sNumberRegEx, V.Local.sRegEx)
F.Intrinsic.String.RegExMatch(V.Local.sFilter, V.Local.sRegEx, True, V.Local.sRet)
F.Intrinsic.Control.If(V.Local.sRet.Trim, !=, "")
	F.Intrinsic.String.Split(V.Local.sRet, "@!@", V.Local.sRet)
	F.Intrinsic.Control.For(V.Local.iCounter, 0, V.Local.sRet.UBound, 1)
		
		'get match
		F.Intrinsic.String.Split(V.Local.sRet(V.Local.iCounter), "*!*", V.Local.sTemp)
		V.Local.sMatch.Set(V.Local.sTemp(1))
		
		'get the field, only one
		F.Intrinsic.String.RegExMatch(V.Local.sMatch, V.Local.sFieldRegEx, True, V.Local.sTemp)
		F.Intrinsic.String.Split(V.Local.sTemp, "*!*", V.Local.sTemp)
		V.Local.sFieldReturn.Set(V.Local.sTemp(1))
		
		'get the values, two
		F.Intrinsic.String.RegExMatch(V.Local.sMatch, V.Local.sNumberRegEx, True, V.Local.sTemp)
		F.Intrinsic.String.Split(V.Local.sTemp, "@!@", V.Local.sTemp)
		F.Intrinsic.String.Split(V.Local.sTemp(0), "*!*", V.Local.sTemp2)
		V.Local.sValueReturn.Set(V.Local.sTemp2(1))
		F.Intrinsic.String.Split(V.Local.sTemp(1), "*!*", V.Local.sTemp2)
		V.Local.sValueReturn2.Set(V.Local.sTemp2(1))
		
		'Replace
		F.Intrinsic.String.Build("({0} >= {1} and {0} <= {2})", V.Local.sFieldReturn, V.Local.sValueReturn, V.Local.sValueReturn2, V.Local.sReplaceString)
		F.Intrinsic.String.Replace(V.Local.sFilter, V.Local.sMatch, V.Local.sReplaceString, V.Local.sFilter)
	F.Intrinsic.Control.Next(V.Local.iCounter)
F.Intrinsic.Control.EndIf

F.Intrinsic.Variable.AddRV("FILTER", V.Local.sFilter)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Callback", "FNestExport_Unload", "PROJECT", "4980", "PROJECTTITLE", "GCG_4980_NEST_XP", "TASK", "GCG_4980_NEST_XP")
F.Intrinsic.Control.EndTry
Program.Sub.GridViewFilterToDataViewFilter.End

Program.Sub.GsGCJobs_ColumnFilterChanged.Start
F.Intrinsic.Control.Try

V.Global.sFilter.Set(V.Args.ActiveFilterExpression)
F.Intrinsic.Control.CallSub(LoadTotals, "SELECTED_OVERRIDE", -1)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Callback", "FNestExport_Unload", "PROJECT", "4980", "PROJECTTITLE", "GCG_4980_NEST_XP", "TASK", "GCG_4980_NEST_XP")
F.Intrinsic.Control.EndTry
Program.Sub.GsGCJobs_ColumnFilterChanged.End

Program.Sub.LoadTotals.Start
'pass SELECTED_OVERRIDE

F.Intrinsic.Control.Try

V.Local.sFilter.Declare(String, "")

'set total records
GUI.FNestExport.txtTotal.Text(V.DataTable.dtJobData.RowCount)

'set filtered records
F.Intrinsic.Control.If(V.Caller.GSSVersion, >, "2018.1")
	GUI.FNestExport.GsGCJobs.FilterToWhereClause("gvJobs", V.Local.sFilter)
F.Intrinsic.Control.Else
	F.Intrinsic.Control.CallSub(GridViewFilterToDataViewFilter, "FILTER", V.Global.sFilter)
	V.Local.sFilter.Set(V.Args.Filter)
F.Intrinsic.Control.EndIf

F.Data.DataView.Create("dtJobData", "dvCount", 22, V.Local.sFilter, "")
GUI.FNestExport.txtFiltered.Text(V.DataView.dtJobData!dvCount.RowCount)

'set selected records
F.Intrinsic.Control.If(V.Args.SELECTED_OVERRIDE.Long, >, -1)
	GUI.FNestExport.txtSelected.Text(V.Args.SELECTED_OVERRIDE.Long)
F.Intrinsic.Control.Else
	F.Data.DataView.SetFilter("dtJobData", "dvCount", "Selected = True")
	GUI.FNestExport.txtSelected.Text(V.DataView.dtJobData!dvCount.RowCount)
F.Intrinsic.Control.EndIf

F.Data.DataView.Close("dtJobData", "dvCount")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Callback", "FNestExport_Unload", "PROJECT", "4980", "PROJECTTITLE", "GCG_4980_NEST_XP", "TASK", "GCG_4980_NEST_XP")
F.Intrinsic.Control.EndTry
Program.Sub.LoadTotals.End

Program.Sub.LoadContextMenu.Start
F.Intrinsic.Control.Try

GUI.FNestExport..ContextMenuCreate("gvJobs")

GUI.FNestExport..ContextMenuAddItem("gvJobs","SELECTF",0,"Select Filtered Rows")
GUI.FNestExport..ContextMenuSetItemEventHandler("gvJobs","SelectF","ContextMenuItemSelection")

GUI.FNestExport..ContextMenuAddItem("gvJobs","USELECTF",0,"Deselect Filtered Rows")
GUI.FNestExport..ContextMenuSetItemEventHandler("gvJobs","USelectF","ContextMenuItemSelection")

GUI.FNestExport..ContextMenuAddItem("gvJobs","SELECT",0,"Select All Rows")
GUI.FNestExport..ContextMenuSetItemEventHandler("gvJobs","Select","ContextMenuItemSelection")

GUI.FNestExport..ContextMenuAddItem("gvJobs","USELECT",0,"Deselect All Rows")
GUI.FNestExport..ContextMenuSetItemEventHandler("gvJobs","USelect","ContextMenuItemSelection")

GUI.FNestExport..ContextMenuAddItem("gvJobs","RESET",0,"Reset Formatting")
GUI.FNestExport..ContextMenuSetItemEventHandler("gvJobs","RESET","ContextMenuItemSelection")

GUI.FNestExport..ContextMenuAddItem("gvJobs","UFLAGEXP",0,"Unflag Exported Flag")
GUI.FNestExport..ContextMenuSetItemEventHandler("gvJobs","UFLAGEXP","ContextMenuItemSelection")

F.Intrinsic.Control.If(V.Caller.GSSVersion, >=, "2019.1")
	GUI.FNestExport..ContextMenuAddItem("gvJobs","CopyFilter",0,"Copy Grid Filter to Clipboard")
	GUI.FNestExport..ContextMenuSetItemEventHandler("gvJobs","CopyFilter","ContextMenuItemSelection")
F.Intrinsic.Control.EndIf

GUI.FNestExport..ContextMenuAddItem("gvJobs","EXPORT",0,"Export Grid")
GUI.FNestExport..ContextMenuSetItemEventHandler("gvJobs","EXPORT","ContextMenuItemSelection")

GUI.FNestExport.GsGCJobs.ContextMenuAttach("gvJobs")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Callback", "FNestExport_Unload", "PROJECT", "4980", "PROJECTTITLE", "GCG_4980_NEST_XP", "TASK", "GCG_4980_NEST_XP")
F.Intrinsic.Control.EndTry
Program.Sub.LoadContextMenu.End

Program.Sub.PreFolderCheck.Start
F.Intrinsic.Control.Try

V.Local.sFilePath.Declare
V.Local.sCustom.Declare
V.Local.bExists.Declare
V.Local.sXPPath.Declare
V.Local.sBCFile.Declare

F.Intrinsic.string.Build("{0}\CUSTOM\4980\{1}\EXPORT_INTERFACE",V.Caller.GlobalDir, V.Caller.CompanyCode, V.Local.sFilePath)
F.Intrinsic.File.DirExists(V.Local.sFilePath,V.Local.bExists)
F.Intrinsic.Control.If(V.local.bExists,=,false)
	F.Intrinsic.File.CreateDir(V.Local.sFilePath)
F.Intrinsic.Control.EndIf

F.Intrinsic.string.Build("{0}\CUSTOM\4980\{2}\EXPORT_INTERFACE\GCG_4980_BCWODET_PRINT_{1}.dat",V.Caller.GlobalDir, V.Caller.Terminal, V.Caller.CompanyCode, V.Global.sBarCodePath)

F.Intrinsic.File.Exists(V.Global.sBarCodePath,V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists)
	GUI.FNestExport.chkPrintBCWODetail.Value(1)
F.Intrinsic.Control.Else
	GUI.FNestExport.chkPrintBCWODetail.Value(0)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Callback", "FNestExport_Unload", "PROJECT", "4980", "PROJECTTITLE", "GCG_4980_NEST_XP", "TASK", "GCG_4980_NEST_XP")
F.Intrinsic.Control.EndTry
Program.Sub.PreFolderCheck.End

Program.Sub.UpdateXP.Start
F.Intrinsic.Control.Try

F.Data.DataTable.AddColumn("dtExportJobsData","EXPORTED","STRING")
F.Data.DataTable.SetValue("dtExportJobsData",-1,"EXPORTED", True)
F.Data.DataTable.AddColumn("dtExportJobsData", "DATE_EXPORTED", "DATE", V.Ambient.Now)
F.Data.DataTable.AddColumn("dtExportJobsData", "EXPORT_FILE", "String", V.Args.File.Trim)
F.Data.DataTable.AddColumn("dtExportJobsData", "EXPORT_USER", "String", V.Caller.User)

F.Data.DataTable.AddColumn("dtExportJobsData", "EXPORT_FLAG", "String", "Y")
F.Data.DataTable.SaveToDB("dtExportJobsData","Con", "JOB_HEADER", "Job*!*Suffix", 256, "Job@!@job*!*suffix@!@suffix*!*EXPORT_FLAG@!@exported")
F.Data.DataTable.SaveToDB("dtExportJobsData","Con","GCG_4980_EXPORT_DATE","Job*!*Suffix*!*Seq",256,"Job@!@job*!*suffix@!@suffix*!*Seq@!@Sequence*!*DATE_EXPORTED@!@EXPORT_DATE*!*EXPORT_USER@!@EXPORT_USER*!*EXPORT_FILE@!@EXPORT_FILE")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Callback", "FNestExport_Unload", "PROJECT", "4980", "PROJECTTITLE", "GCG_4980_NEST_XP", "TASK", "GCG_4980_NEST_XP")
F.Intrinsic.Control.EndTry
Program.Sub.UpdateXP.End

Program.Sub.chkPrintBCWODetail_Click.Start
F.Intrinsic.Control.Try

V.Local.bExists.Declare

F.Intrinsic.Control.If(V.Screen.FNestExport!chkPrintBCWODetail.checkedasboolean)
	F.Intrinsic.File.String2File(V.Global.sBarCodePath,"YAY")
F.Intrinsic.Control.Else
	F.Intrinsic.File.Exists(V.Global.sBarCodePath,V.Local.bExists)
	F.Intrinsic.Control.If(V.Local.bExists)
		F.Intrinsic.File.DeleteFile(V.Global.sBarCodePath)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Callback", "FNestExport_Unload", "PROJECT", "4980", "PROJECTTITLE", "GCG_4980_NEST_XP", "TASK", "GCG_4980_NEST_XP")
F.Intrinsic.Control.EndTry
Program.Sub.chkPrintBCWODetail_Click.End

Program.Sub.PrintBarCodeWODet.Start
F.Intrinsic.Control.Try

V.Local.sJob.Declare
V.Local.sSuffix.Declare
V.Local.sParms.Declare
V.Local.icount.Declare
V.Local.sRet.Declare(String)

F.Intrinsic.control.For(V.Local.icount,0,V.DataTable.dtExportJobsData.RowCount--,1)
	V.Local.sJob.Set(V.DataTable.dtExportJobsData(V.Local.iCount).Job!FieldValTrim)
	V.Local.sSuffix.Set(V.DataTable.dtExportJobsData(V.Local.iCount).Suffix!FieldValTrim)
	F.Intrinsic.string.Build("{0}!*!{1}!*!1811",V.Local.sJob,V.Local.sSuffix,V.local.sParms)
	F.Global.General.CallWrapperSync(900100,V.Local.sParms)
	F.Intrinsic.UI.Sleep(5)
F.Intrinsic.Control.Next(V.Local.icount)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Callback", "FNestExport_Unload", "PROJECT", "4980", "PROJECTTITLE", "GCG_4980_NEST_XP", "TASK", "GCG_4980_NEST_XP")
F.Intrinsic.Control.EndTry
Program.Sub.PrintBarCodeWODet.End

Program.Sub.OnlineUpdate.Start
'this sub is for automatically exporting all new jobs when Online update processes

F.Intrinsic.Control.Try

V.Local.sMessage.Declare(String)

F.Intrinsic.Control.CallSub(Connection, "CONNECT", True)
F.Intrinsic.Control.CallSub(LoadProfile)

'check if already running
F.Intrinsic.Control.CallSub(ScriptPIDCheck, "PROJECT", "4980", "TASK", "GCG_4980_NEST_XP")

'get default profile
F.Intrinsic.Control.CallSub(LoadDefaultProfile)

'check if auto export is set
F.Intrinsic.Control.If(V.Global.bAutoExport.Not)
	F.Intrinsic.Control.CallSub(OnlineUpdateClose)
F.Intrinsic.Control.EndIf

'load jobs
F.Intrinsic.Control.CallSub(OnlineUpdateLoadJobs)

'export jobs
F.Intrinsic.Control.If(V.DataTable.dtJobData.RowCount, >, 0)
	F.Intrinsic.String.Build("{0} eligible jobs found. Exporting...", V.DataTable.dtJobData.RowCount, V.Local.sMessage)
	F.Intrinsic.Control.CallSub(AddLog, "Project", "4980", "Message", V.Local.sMessage)
	F.Intrinsic.Control.CallSub(cmdXP_Click)
	F.Intrinsic.String.Build("Finished exporting {0} jobs. Exiting...", V.DataTable.dtJobData.RowCount, V.Local.sMessage)
	F.Intrinsic.Control.CallSub(AddLog, "Project", "4980", "Message", V.Local.sMessage)
F.Intrinsic.Control.EndIf

'done, close
F.Intrinsic.Control.CallSub(OnlineUpdateClose)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Callback", "FNestExport_Unload", "PROJECT", "4980", "PROJECTTITLE", "GCG_4980_NEST_XP", "TASK", "GCG_4980_NEST_XP")
F.Intrinsic.Control.EndTry
Program.Sub.OnlineUpdate.End

Program.Sub.LoadDefaultProfile.Start
'Load the default profile, handle if there is not one

F.Intrinsic.Control.Try

F.Data.DataTable.CreateFromSQL("dtDefaultProfile", "Con", "select RTRIM(Profile) as PROFILE, RTRIM(EXPORT_FOLDER) as EXPORT_FOLDER, CUSTOM_EXPORT, RTRIM(XPTYPE) as XPTYPE, XP_ON_GENWO from GCG_4980_NESTPROFILE where DEFAULT_PROFILE = 1")

F.Intrinsic.Control.If(V.DataTable.dtDefaultProfile.RowCount, =, 0)
	F.Intrinsic.Control.CallSub(UnattendedErrorMessage, "MESSAGE", "Error: No default profile set.", "PROJECTTITLE", "Nesting Export", "PROJECT", "4980")
F.Intrinsic.Control.ElseIf(V.DataTable.dtDefaultProfile.RowCount, >, 1)
	'this shouldn't happen but check anyway
	F.Intrinsic.Control.CallSub(UnattendedErrorMessage, "MESSAGE", "Error: More than one default profile set.", "PROJECTTITLE", "Nesting Export", "PROJECT", "4980")
F.Intrinsic.Control.EndIf

V.Global.sProfile.Set(V.DataTable.dtDefaultProfile(0).PROFILE!FieldValTrim)
V.Global.bCustom.Set(V.DataTable.dtDefaultProfile(0).CUSTOM_EXPORT!FieldVal)
V.Global.sXPPATH.Set(V.DataTable.dtDefaultProfile(0).EXPORT_FOLDER!FieldValTrim)
V.Global.sXPtype.Set(V.DataTable.dtDefaultProfile(0).XPTYPE!FieldValTrim)
V.Global.bAutoExport.Set(V.DataTable.dtDefaultProfile(0).XP_ON_GENWO!FieldValTrim)

F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "EXPORT_OPTION", "SETTING", "INCLUDE_EXPORTED", "PROFILE", V.Global.sProfile)
F.Intrinsic.Control.If(V.Args.Setting.Trim, =, "")
	V.Global.bIncludeExported.Set(False)
F.Intrinsic.Control.Else
	V.Global.bIncludeExported.Set(V.Args.Setting.Long)
F.Intrinsic.Control.EndIf

F.Data.DataTable.Close("dtDefaultProfile")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Callback", "FNestExport_Unload", "PROJECT", "4980", "PROJECTTITLE", "GCG_4980_NEST_XP", "TASK", "GCG_4980_NEST_XP")
F.Intrinsic.Control.EndTry
Program.Sub.LoadDefaultProfile.End

Program.Sub.OnlineUpdateLoadJobs.Start
'load all unexported jobs eligible for Nesting export

F.Intrinsic.Control.Try

V.Local.sSQL.Declare(String)
V.Local.sFilter.Declare(String)
V.Local.dDate.Declare(Date)
V.Local.dDate2.Declare(Date)
V.Local.bUpdatedOnly.Declare(Boolean, False)

'grab last run if needed
F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "EXPORT_OPTION", "SETTING", "ONLY_INCLUDE_UPDATED", "PROFILE", V.Global.sProfile)
F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
	V.Local.bUpdatedOnly.Set(V.Args.Setting)
	F.Intrinsic.Control.If(V.Local.bUpdatedOnly)
		F.Global.Registry.ReadValue(V.Caller.User, V.Caller.CompanyCode, "GCG_4980_NEST_XP", 4980, 0, 5, V.Ambient.MinDate, V.Local.dDate)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "EXPORT_OPTION", "SETTING", "UNATTENDED_FILTER", "PROFILE", V.Global.sProfile)
F.Intrinsic.Control.If(V.Args.Setting.Trim, =, "")
	
	F.Intrinsic.Control.If(V.Local.bUpdatedOnly)
		F.Intrinsic.String.Build(" and JS in (select JS from APSV3_JBMaster where LastSchedDate >= '{0}')", V.Local.dDate.PervasiveDate, V.Local.sFilter)
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(V.Global.bIncludeExported.Not)
		F.Intrinsic.String.Build("{0} and job + sfx not in (Select Job + suffix as JS from V_JOB_HEADER where exported = 'Y')")
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.String.Build("Select distinct RTRIM(JSS) as JSS, Cast(1 as BIT) as Selected, Cast(0 as BIT) as EXPORTED from APSV3_UBDETAIL where SEQ < '995000' and SAR in (select Machine from Workcenters where Nesting_Intrfc = 'Y'){0}", V.Local.sFilter, V.Local.sSQL)
	
	'just create the list of jobs to pass into cmdXP_Click and Load4XP, all it needs is JSS and that dataview
	F.Data.DataTable.CreateFromSQL("dtJobData", "Con", V.Local.sSQL, True)
F.Intrinsic.Control.Else
	'here we are going to filter the dashboard instead, so we need to load it
	GUI.FNestExport.chkIncludeXP.Value(V.Global.bIncludeExported)
	
	'default to 6 months away, 6 months before for now
	'maybe add an option for this later
	F.Intrinsic.Date.DateAdd("M", 6, V.Ambient.Date, V.Local.dDate2)
	GUI.FNestExport.dtpToDate.Value(V.Local.dDate2)
	
	F.Intrinsic.Date.DateAdd("M", -6, V.Ambient.Date, V.Local.dDate2)
	GUI.FNestExport.dtpFromDate.Value(V.Local.dDate2)
	
	V.Global.bLoadData.Set(True)
	F.Intrinsic.Control.CallSub(LoadData)
	
	V.Local.sFilter.Set(V.Args.Setting.Trim)
	F.Intrinsic.Control.If(V.Local.bUpdatedOnly)
		F.Intrinsic.String.Build("({0}) and LAST_SCHEDULE_DATE >= '{1}'", V.Local.sFilter, V.Local.dDate.PervasiveDate, V.Local.sFilter)
	F.Intrinsic.Control.EndIf
	
	F.Data.DataView.Create("dtJobData", "dvUnattendedCheck", 22, V.Local.sFilter, "")
	F.Data.DataView.SetValue("dtJobData", "dvUnattendedCheck", -1, "SELECTED", True)
	F.Data.DataView.Close("dtJobData", "dvUnattendedCheck")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Callback", "FNestExport_Unload", "PROJECT", "4980", "PROJECTTITLE", "GCG_4980_NEST_XP", "TASK", "GCG_4980_NEST_XP")
F.Intrinsic.Control.EndTry
Program.Sub.OnlineUpdateLoadJobs.End

Program.Sub.OnlineUpdateClose.Start
'check everything and then close

F.Intrinsic.Control.Try

'save last run
F.Global.Registry.AddValue(V.Caller.User, V.Caller.CompanyCode, "GCG_4980_NEST_XP", 4980, 0, False, V.Ambient.Now, False, 0, 0, V.Ambient.MinDate, V.Ambient.Now)

F.Intrinsic.Control.If(V.DataTable.dtDefaultProfile.Exists)
	F.Data.DataTable.Close("dtDefaultProfile")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.DataView.dtJobData!SelJobVw.Exists)
	F.Data.DataView.Close("dtJobData", "SelJobVw")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.DataTable.dtJobData.Exists)
	F.Data.DataTable.Close("dtJobData")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(Connection, "CONNECT", False)

F.Intrinsic.Control.CallSub(ScriptPIDClear, "PROJECT", "4980", "TASK", "GCG_4980_NEST_XP")

F.Intrinsic.Control.End

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Callback", "FNestExport_Unload", "PROJECT", "4980", "PROJECTTITLE", "GCG_4980_NEST_XP", "TASK", "GCG_4980_NEST_XP")
F.Intrinsic.Control.EndTry
Program.Sub.OnlineUpdateClose.End

Program.Sub.AddExtraFields.Start
'add user defined static and expression columns

F.Intrinsic.Control.Try

V.Local.sSQL.Declare(String)
V.Local.iCounter.Declare(Long)
V.Local.sExpression.Declare(String)
V.Local.sValue.Declare(String)

'grab any static / expression export fields
F.Intrinsic.String.Build("select RTRIM(SETTING) FIELD, RTRIM(VALUE) VALUE, IF(SUBSTRING(SETTING, 1, 2) = 'ST', 'STATIC', 'EXPRESSION') TYPE from GCG_4980_SETTINGS A where PROFILE = '{0}' and A.TYPE = 'EXPORT_FIELD' order by SETTING", V.Global.sProfile.Trim, V.Local.sSQL)

F.Data.DataTable.CreateFromSQL("dtExtraFields", "Con", V.Local.sSQL)
F.Intrinsic.Control.If(V.DataTable.dtExtraFields.RowCount, <, 1)
	F.Data.DataTable.Close("dtExtraFields")
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

'add them to the passed datatable
F.Intrinsic.Control.For(V.Local.iCounter, 0, V.DataTable.dtExtraFields.RowCount--, 1)
	F.Intrinsic.String.Split(V.DataTable.dtExtraFields(V.Local.iCounter).VALUE!FieldValTrim, "@*!*@", V.Local.sValue)
	F.Intrinsic.Control.If(V.DataTable.dtExtraFields(V.Local.iCounter).TYPE!FieldValTrim, =, "STATIC")
		F.Data.DataTable.AddColumn(V.Args.DataTable, V.DataTable.dtExtraFields(V.Local.iCounter).FIELD!FieldValTrim, "String", V.Local.sValue(0))
	F.Intrinsic.Control.ElseIf(V.DataTable.dtExtraFields(V.Local.iCounter).TYPE!FieldValTrim, =, "EXPRESSION")
		F.Intrinsic.String.Build("Convert({0}, 'System.String')", V.Local.sValue(0), V.Local.sExpression)
		F.Data.DataTable.AddExpressionColumn(V.Args.DataTable, V.DataTable.dtExtraFields(V.Local.iCounter).FIELD!FieldValTrim, "String", V.Local.sExpression)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Next(V.Local.iCounter)
V.Local.sValue.Redim(0, 0)

F.Data.DataTable.Close("dtExtraFields")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Callback", "FNestExport_Unload", "PROJECT", "4980", "PROJECTTITLE", "GCG_4980_NEST_XP", "TASK", "GCG_4980_NEST_XP")
F.Intrinsic.Control.EndTry
Program.Sub.AddExtraFields.End

Program.Sub.GetFilter.Start
'pass DATATABLE, FIELD (*!* delimiter)
'returns filter
'returns a list of the distinct values of that field delimited by ','

F.Intrinsic.Control.Try

V.Local.iCounter.Declare(Long, 0)
V.Local.sFilter.Declare(String)
V.Local.sDataView.Declare(String, "dvGetFilterTemp_0")
V.Local.sDataViewFilter.Declare(String)

'make sure no duplicate dataview
F.Intrinsic.Control.DoUntil(V.DataView.[V.Args.DataTable]![V.Local.sDataView].Exists, =, False)
	F.Intrinsic.String.Build("dvGetFilterTemp_{0}", V.Local.iCounter.++, V.Local.sDataView)
F.Intrinsic.Control.Loop

'create in filter
F.Intrinsic.String.Build("Convert([{0}], 'System.String') <> ''", V.Args.Field, V.Local.sDataViewFilter)
F.Data.DataView.Create(V.Args.DataTable, V.Local.sDataView, 22, V.Local.sDataViewFilter, "")
F.Data.DataView.ToString(V.Args.DataTable, V.Local.sDataView, V.Args.Field, "***NODELIMITER***", "','", V.Local.sFilter)
F.Data.DataView.Close(V.Args.DataTable, V.Local.sDataView)

'remove duplicates
F.Intrinsic.String.Split(V.Local.sFilter, "','", V.Local.sFilter)
F.Intrinsic.String.RemoveArrayDuplicates(V.Local.sFilter, V.Local.sFilter)
F.Intrinsic.String.Join(V.Local.sFilter, "','", V.Local.sFilter)
V.Local.sFilter.RedimPreserve(0,0)

F.Intrinsic.Variable.AddRV("FILTER", V.Local.sFilter)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Callback", "FNestExport_Unload", "PROJECT", "4980", "PROJECTTITLE", "GCG_4980_NEST_XP", "TASK", "GCG_4980_NEST_XP")
F.Intrinsic.Control.EndTry
Program.Sub.GetFilter.End

Program.Sub.GsGCJobs_RowCellClick.Start
F.Intrinsic.Control.Try

V.Local.sJob.Declare
V.Local.sSuF.Declare
V.Local.sPart.Declare
V.Local.sLoc.Declare
V.Local.sParams.Declare
V.Local.sID.Declare(String)
V.Local.iID.Declare(Long)
V.Local.bValue.Declare(Boolean, False)
V.Local.sColumn.Declare(String)

F.Intrinsic.Control.BlockEvents

F.Intrinsic.Control.SelectCase(V.Args.Column.UCase)

	F.Intrinsic.Control.CaseAny("JOB","SUFFIX")
		GUI.FNestExport.GsGCJobs.GetCellValueByColumnName("gvJobs","JOB",V.Args.RowIndex,V.Local.sJob)
		GUI.FNestExport.GsGCJobs.GetCellValueByColumnName("gvJobs","SUFFIX",V.Args.RowIndex,V.Local.sSuf)

		F.Intrinsic.String.Concat("7","!*!",V.Local.sJob,"!*!",V.Local.sSuf,"!*!","A",V.Local.sParams)
		F.Global.General.CallWrapperSync(450000,V.Local.sParams)

	F.Intrinsic.Control.CaseAny("FGPART", "RAW_MAT", "LONG_PART", "LONG_MATERIAL")
		F.Intrinsic.Control.If(V.Args.Column, =, "LONG_PART")
			V.Local.sColumn.Set("FGPART")
		F.Intrinsic.Control.ElseIf(V.Args.Column, =, "LONG_MATERIAL")
			V.Local.sColumn.Set("RAW_MAT")
		F.Intrinsic.Control.Else
			V.Local.sColumn.Set(V.Args.Column)
		F.Intrinsic.Control.EndIf
		
		GUI.FNestExport.GsGCJobs.GetCellValueByColumnName("gvJobs", V.Local.sColumn, V.Args.RowIndex, V.Local.sPart)
		GUI.FNestExport.GsGCJobs.GetCellValueByColumnName("gvJobs", "LOCATION", V.Args.RowIndex, V.Local.sLoc)
		
		F.Intrinsic.Control.If(V.Global.bEditPart)
			F.Intrinsic.String.Build("{0}!*!{1}!*!M", V.Local.sPart, V.Local.sLoc, V.Local.sParams)
			F.Global.General.CallWrapperSync(300011,V.Local.sParams)
		F.Intrinsic.Control.ElseIf(V.Global.bViewPart)
			F.Intrinsic.String.Build("{0}!*!{1}!*!O",V.Local.sPart,V.Local.sLoc,V.Local.sParams)
			F.Global.General.CallWrapperSync(300011,V.Local.sParams)
		F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.Case("DOCUMENT_CONTROL")
		'launching document control
		GUI.FNestExport.GsGCJobs.GetCellValueByColumnName("gvJobs", "FGPART",V.Args.RowIndex,V.Local.sPart)
		GUI.FNestExport.GsGCJobs.GetCellValueByColumnName("gvJobs", "LOCATION", V.Args.RowIndex, V.Local.sLoc)
		
		F.Intrinsic.String.RPad(V.Local.sPart, " ", 20, V.Local.sPart)
		F.Intrinsic.String.Build("{0}{1}", V.Local.sPart, V.Local.sLoc, V.Local.sID)
		
		F.Global.DocumentControl.GetLinkID(V.Local.sID,30,V.Local.iID)
		F.Intrinsic.Control.If(V.Local.iID,=,-1)
			F.Global.DocumentControl.CreateReference(V.Local.sID,30,V.Local.iID)
		F.Intrinsic.Control.EndIf
		F.Global.DocumentControl.Invoke(V.Local.sID,30,"Inventory Master",V.Local.iID)
		
	F.Intrinsic.Control.Case("SELECTED")
		'select a new record
		GUI.FNestExport.GsGCJobs.GetCellValueByColumnName("gvJobs", "SELECTED", V.Args.RowIndex, V.Local.bValue)
		F.Data.DataTable.SetValue("dtJobData", V.Args.RowIndex, "SELECTED", V.Local.bValue.Not)
		F.Intrinsic.Control.CallSub(LoadTotals, "SELECTED_OVERRIDE", -1)
		
F.Intrinsic.Control.EndSelect

F.Intrinsic.Control.UnBlockEvents

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Callback", "FNestExport_Unload", "PROJECT", "4980", "PROJECTTITLE", "GCG_4980_NEST_XP", "TASK", "GCG_4980_NEST_XP")
F.Intrinsic.Control.EndTry
Program.Sub.GsGCJobs_RowCellClick.End

Program.Sub.CheckPermissions.Start
F.Intrinsic.Control.Try

V.Local.bChecked.Declare(boolean,false)
	
'Check User Permissions: View
F.Global.Security.CheckUserAccessIPM(536, 0, V.Global.bViewWO)'Shop Floor Control > View > Work Orders
F.Global.Security.CheckUserAccessIPM(321, 0, V.Global.bViewPart)'Inventory > View > Supply and Demand

'Check User Permissions: Edit
F.Global.Security.CheckUserAccessIPM(527, 1, V.Global.bEditWO)'Shop Floor Control > File > Work Orders > Open
F.Global.Security.CheckUserAccessIPM(371, 0, V.Global.bEditPart)'Inventory > View > Supply and Demand with Edit

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Callback", "FNestExport_Unload", "PROJECT", "4980", "PROJECTTITLE", "GCG_4980_NEST_XP", "TASK", "GCG_4980_NEST_XP")
F.Intrinsic.Control.EndTry
Program.Sub.CheckPermissions.End

Program.Sub.BysoftXP.Start
'generate Bysoft XML export file
'Example:
'<?xml version="1.0" encoding="Windows-1252"?>
'<ErpExchange xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
'  <Version>1.2</Version>
'  <Orders>
'    <ErpOrder>
'      <OrderNumber>A19633-RK1</OrderNumber>
'      <Label>B38051000_A</Label>
'      <StartDate>2020-11-17T00:00:00</StartDate>
'      <TargetDate>2020-11-17T00:00:00</TargetDate>
'      <Importfilter>\\HF-APP03\BystronicData\Bysoft7\Pmc\ErpImport\config\SHA360250.pis</Importfilter>
'      <Info>QC3:AUX BELT:TAKEUP:LVLNUT PL8</Info>
'      <ErpInfo3>SHA36025012160PO </ErpInfo3>
'      <Customer>GEO. M. MARTIN COMPANY</Customer>
'      <CustomerNumber>GEO023</CustomerNumber>
'      <CustomerOrderNumber>256242 JWS</CustomerOrderNumber>
'      <Automatic>True</Automatic>
'      <Parts>
'        <ErpPart>
'          <Label>QC3:AUX BELT:TAKEUP:LVLNUT PL8</Label>
'          <CadFile>\\HF-APP03\BystronicData\Bysoft7\Pmc\ErpImport\cad\GEO023\B38051000_A.dxf</CadFile>
'          <Debit>3</Debit>
'          <ExtraQuantity>0</ExtraQuantity>
'          <MaterialCode>SHA36025012160PO</MaterialCode>
'          <Measure>Inch</Measure>
'          <Thickness>0.25</Thickness>
'          <Info2>001000-002000-LAS1</Info2>
'          <Info3>TAPA~~</Info3>
'          <Priority>50</Priority>
'          <ErpOrder>False</ErpOrder>
'          <ProductionSteps>
'            <ErpProductionStep>
'              <ProductionStepType>LaserCutting</ProductionStepType>
'              <StartDate>2020-11-17T00:00:00</StartDate>
'              <TargetDate>2020-11-17T00:00:00</TargetDate>
'            </ErpProductionStep>
'          </ProductionSteps>
'        </ErpPart>
'      </Parts>
'    </ErpOrder>
'  </Orders>
'</ErpExchange>

F.Intrinsic.Control.Try

V.Local.sDocument.Declare(String)
V.Local.sTimestamp.Declare(String)
V.Local.sSQL.Declare(String)
V.Local.sFileName.Declare(String)
V.Local.iCounter.Declare(Long)
V.Local.sMappedField.Declare(String)
V.Local.sValue.Declare(String)
V.Local.iFieldCounter.Declare(Long, -1)
V.Local.sParent.Declare(String)
V.Local.bExists.Declare(Boolean, False)
V.Local.sWCs.Declare(String)
V.Local.bBending.Declare(Boolean, False)
V.Local.iWCCounter.Declare(Long)
V.Local.iMapCounter.Declare(Long)
V.Local.bBendingOption.Declare(Boolean, False)

'grab bending option
F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "EXPORT_OPTION", "SETTING", "ADD_BENDING_STEP", "PROFILE", V.Global.sProfile)
F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
	V.Local.bBendingOption.Set(V.Args.Setting)
	F.Intrinsic.Control.If(V.Local.bBendingOption)
		F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "EXPORT_OPTION", "SETTING", "BENDING_WORKCENTERS", "PROFILE", V.Global.sProfile)
		F.Intrinsic.String.Split(V.Args.Setting, ",", V.Local.sWCs)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

'grab export mapping
F.Intrinsic.String.Build("Select Enabled, RTRIM(XPFIELD) XPFIELD, IF(MAPID like 'ST%' or MAPID = 'N_A' or MAPID like 'EX%', MAPID,  'C' + RTRIM(MAPID)) as MAPID, RTRIM(XML_PATH) XML_PATH from GCG_4980_NESTMAINT where PROFILE = '{0}' order by INDX", V.Global.sProfile, V.Local.sSQL)
F.Data.DataTable.CreateFromSQL("dtExportMapping", "Con", V.Local.sSQL, True)

'build unique XML document name
F.Intrinsic.String.StripCharacters(V.Ambient.Now, V.Local.sTimestamp)
F.Intrinsic.String.Build("Bysoft_XML_{0}", V.Local.sTimestamp, V.Local.sDocument)

'create XML Doc
F.Global.XML.CreateDocument(V.Local.sDocument, False, True, False, False)

'set root info
F.Global.XML.SetRoot(V.Local.sDocument, "ErpExchange")
F.Global.XML.CreateAttributeNode(V.Local.sDocument, "xmlns:xsd", "http://www.w3.org/2001/XMLSchema")
F.Global.XML.SetAttributeToRoot(V.Local.sDocument, "xmlns:xsd")
'destroy attribute node is currently bugged
'F.Global.XML.DestroyAttributeNode(V.Local.sDocument, "xmlns:xsd")

F.Global.XML.CreateAttributeNode(V.Local.sDocument, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance")
F.Global.XML.SetAttributeToRoot(V.Local.sDocument, "xmlns:xsi")
'F.Global.XML.DestroyAttributeNode(V.Local.sDocument, "xmlns:xsd")

F.Global.XML.CreateElementNode(V.Local.sDocument, "Version", "1.2")
F.Global.XML.AppendNodeToRoot(V.Local.sDocument, "Version")
F.Global.XML.DestroyNode(V.Local.sDocument, "Version")

F.Global.XML.CreateElementNode(V.Local.sDocument, "Orders", "")
F.Global.XML.AppendNodeToRoot(V.Local.sDocument, "Orders")

'now build work order information
F.Data.DataView.Create("dtExportMapping", "dvExportMapping", 22)
F.Data.DataView.Create("dtExportMapping", "dvCurrentPath", 22)
F.Intrinsic.Control.For(V.Local.iCounter, 0, V.DataTable.dtExportJobsData.RowCount--, 1)
	'the fields are set automatically by the maintenance program, so technically we shouldn't have to explicitly write them here
	'could just loop through those fields
	'but that would be kind of weird because you would have to figure out the paths
	'whatever I'll just explicitly build the file here
	
	V.Local.iFieldCounter.Set(-1)
	
	'add order node
	F.Global.XML.CreateElementNode(V.Local.sDocument, "ErpOrder", "")
	F.Global.XML.AppendNode(V.Local.sDocument, "Orders", "ErpOrder")
	V.Local.sParent.Set("ErpOrder")
	
	'need a better way to find the full path list, but oh well
	F.Data.DataView.SetFilter("dtExportMapping", "dvCurrentPath", "[XML_PATH] = '//ErpExchange/Orders/ErpOrder/'")
	F.Intrinsic.Control.For(V.Local.iMapCounter, 0, V.DataView.dtExportMapping!dvCurrentPath.RowCount--, 1)
		F.Intrinsic.Control.CallSub(AddMappedNode, "Document", V.Local.sDocument, "Node", V.DataView.dtExportMapping!dvCurrentPath(V.Local.iMapCounter).XPFIELD!FieldValTrim, "Parent", V.Local.sParent, "RowIndex", V.Local.iCounter, "Path", V.DataView.dtExportMapping!dvCurrentPath(V.Local.iMapCounter).XML_PATH!FieldValTrim)
	F.Intrinsic.Control.Next(V.Local.iMapCounter)
	
	'add Parts node
	F.Global.XML.CreateElementNode(V.Local.sDocument, "Parts", "")
	F.Global.XML.AppendNode(V.Local.sDocument, "ErpOrder", "Parts")
	
	'destroy erp order node
	F.Global.XML.DestroyNode(V.Local.sDocument, "ErpOrder")
	
	'add ErpPart Node
	F.Global.XML.CreateElementNode(V.Local.sDocument, "ErpPart", "")
	F.Global.XML.AppendNode(V.Local.sDocument, "Parts", "ErpPart")
	
	'close parts node
	F.Global.XML.DestroyNode(V.Local.sDocument, "Parts")
	
	V.Local.sParent.Set("ErpPart")
	
	F.Data.DataView.SetFilter("dtExportMapping", "dvCurrentPath", "[XML_PATH] = '//ErpExchange/Orders/ErpOrder/Parts/ErpPart/'")
	F.Intrinsic.Control.For(V.Local.iMapCounter, 0, V.DataView.dtExportMapping!dvCurrentPath.RowCount--, 1)
		F.Intrinsic.Control.CallSub(AddMappedNode, "Document", V.Local.sDocument, "Node", V.DataView.dtExportMapping!dvCurrentPath(V.Local.iMapCounter).XPFIELD!FieldValTrim, "Parent", V.Local.sParent, "RowIndex", V.Local.iCounter, "Path", V.DataView.dtExportMapping!dvCurrentPath(V.Local.iMapCounter).XML_PATH!FieldValTrim)
	F.Intrinsic.Control.Next(V.Local.iMapCounter)
	
	'add production steps node
	F.Global.XML.CreateElementNode(V.Local.sDocument, "ProductionSteps", "")
	F.Global.XML.AppendNode(V.Local.sDocument, "ErpPart", "ProductionSteps")
	
	'close erppart node
	F.Global.XML.DestroyNode(V.Local.sDocument, "ErpPart")
	
	'add ERP production step node
	F.Global.XML.CreateElementNode(V.Local.sDocument, "ErpProductionStep", "")
	F.Global.XML.AppendNode(V.Local.sDocument, "ProductionSteps", "ErpProductionStep")
	
	V.Local.sParent.Set("ErpProductionStep")
	
	F.Data.DataView.SetFilter("dtExportMapping", "dvCurrentPath", "[XML_PATH] = '//ErpExchange/Orders/ErpOrder/Parts/ErpPart/ProductionSteps/ErpProductionStep/'")
	F.Intrinsic.Control.For(V.Local.iMapCounter, 0, V.DataView.dtExportMapping!dvCurrentPath.RowCount--, 1)
		F.Intrinsic.Control.CallSub(AddMappedNode, "Document", V.Local.sDocument, "Node", V.DataView.dtExportMapping!dvCurrentPath(V.Local.iMapCounter).XPFIELD!FieldValTrim, "Parent", V.Local.sParent, "RowIndex", V.Local.iCounter, "Path", V.DataView.dtExportMapping!dvCurrentPath(V.Local.iMapCounter).XML_PATH!FieldValTrim)
	F.Intrinsic.Control.Next(V.Local.iMapCounter)
	
	'close ERP production step node
	F.Global.XML.DestroyNode(V.Local.sDocument, "ErpProductionStep")
	
	'here add bending step based on options
	F.Intrinsic.Control.If(V.Local.bBendingOption)
		
		'now check if a bending step is upcoming
		V.Local.bBending.Set(False)
		F.Intrinsic.Control.For(V.Local.iWCCounter, 0, V.Local.sWCs.UBound, 1)
			F.Intrinsic.String.IsInString(V.DataTable.dtExportJobsData(V.Local.iCounter).C200!FieldValTrim, V.Local.sWCs(V.Local.iWCCounter).Trim, True, V.Local.bExists)
			F.Intrinsic.Control.If(V.Local.bExists)
				V.Local.bBending.Set(True)
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.Next(V.Local.iWCCounter)
		
		F.Intrinsic.Control.If(V.Local.bBending)
			F.Global.XML.CreateElementNode(V.Local.sDocument, "ErpProductionStep", "")
			F.Global.XML.AppendNode(V.Local.sDocument, "ProductionSteps", "ErpProductionStep")
			
			V.Local.sParent.Set("ErpProductionStep")
			
			F.Global.XML.CreateElementNode(V.Local.sDocument, "ProductionStepType", "Bending")
			F.Global.XML.AppendNode(V.Local.sDocument, V.Local.sParent, "ProductionStepType")
			F.Global.XML.DestroyNode(V.Local.sDocument, "ProductionStepType")
			
			F.Intrinsic.Control.CallSub(AddMappedNode, "Document", V.Local.sDocument, "Node", "StartDate", "Parent", V.Local.sParent, "RowIndex", V.Local.iCounter, "Path", "//ErpExchange/Orders/ErpOrder/Parts/ErpPart/ProductionSteps/ErpProductionStep/")
			F.Intrinsic.Control.CallSub(AddMappedNode, "Document", V.Local.sDocument, "Node", "TargetDate", "Parent", V.Local.sParent, "RowIndex", V.Local.iCounter, "Path", "//ErpExchange/Orders/ErpOrder/Parts/ErpPart/ProductionSteps/ErpProductionStep/")
			
			'close ERP production step node
			F.Global.XML.DestroyNode(V.Local.sDocument, "ErpProductionStep")
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
	
	'close production steps node
	F.Global.XML.DestroyNode(V.Local.sDocument, "ProductionSteps")
	
F.Intrinsic.Control.Next(V.Local.iCounter)
F.Global.XML.DestroyNode(V.Local.sDocument, "Orders")
F.Data.DataView.Close("dtExportMapping", "dvExportMapping")
F.Data.DataView.Close("dtExportMapping", "dvCurrentPath")
F.Data.DataTable.Close("dtExportMapping")
V.Local.sWCs.Redim(0, 0)

'save XML document to file
F.Intrinsic.String.Build("ERP{0}.erp", V.Local.sTimestamp, V.Local.sFileName)
F.Global.XML.SaveDocument(V.Local.sDocument, V.Global.sXPPATH, V.Local.sFileName)
F.Global.XML.CloseDocument(V.Local.sDocument)

F.Intrinsic.String.Build("{0}\{1}", V.Global.sXPPATH, V.Local.sFileName, V.Local.sFileName)
F.Intrinsic.Variable.AddRV("Export_File", V.Local.sFileName)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Callback", "FNestExport_Unload", "PROJECT", "4980", "PROJECTTITLE", "GCG_4980_NEST_XP", "TASK", "GCG_4980_NEST_XP")
F.Intrinsic.Control.EndTry
Program.Sub.BysoftXP.End

Program.Sub.AddMappedNode.Start
'pass document, node, parent, RowIndex, path
'assumes dtExportMapping, dtexportJobsData, and dvExportMapping are open and global

F.Intrinsic.Control.Try

V.Local.sFilter.Declare(String)
V.Local.sMappedField.Declare(String)
V.Local.sValue.Declare(String)

F.Intrinsic.Control.Try

F.Intrinsic.String.Build("[XPFIELD] = '{0}' and [XML_PATH] = '{1}' and ENABLED = 1", V.Args.Node, V.Args.Path, V.Local.sFilter)
F.Data.DataView.SetFilter("dtExportMapping", "dvExportMapping", V.Local.sFilter)
F.Intrinsic.Control.If(V.DataView.dtExportMapping!dvExportMapping.RowCount, >, 0)
	V.Local.sMappedField.Set(V.DataView.dtExportMapping!dvExportMapping(0).MAPID!FieldValTrim)
	F.Intrinsic.String.Replace(V.Local.sMappedField, "C00", "C00_FORMAT", V.Local.sMappedField)
	F.Intrinsic.String.Replace(V.Local.sMappedField, "C92", "C92_FORMAT", V.Local.sMappedField)
	F.Intrinsic.String.Replace(V.Local.sMappedField, "C95", "C95_FORMAT", V.Local.sMappedField)
	F.Intrinsic.String.Replace(V.Local.sMappedField, "C96", "C96_FORMAT", V.Local.sMappedField)
	F.Intrinsic.String.Replace(V.Local.sMappedField, "C97", "C97_FORMAT", V.Local.sMappedField)
	F.Intrinsic.String.Replace(V.Local.sMappedField, "C08", "C08_FORMAT", V.Local.sMappedField)
	F.Intrinsic.Control.If(V.Local.sMappedField, =, "N_A")
		V.Local.sValue.Set("")
	F.Intrinsic.Control.Else
		V.Local.sValue.Set(V.DataTable.dtExportJobsData(V.Args.RowIndex).[V.Local.sMappedField]!FieldValTrim)
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(V.Args.Node, =, "Debit", "OR", V.Args.Node, =, "ExtraQuantity")
		F.Intrinsic.String.Format(V.Local.sValue, "0", V.Local.sValue)
	F.Intrinsic.Control.EndIf
	
	F.Global.XML.CreateElementNode(V.Args.Document, V.Args.Node, V.Local.sValue.Trim)
	F.Global.XML.AppendNode(V.Args.Document, V.Args.Parent, V.Args.Node)
	F.Global.XML.DestroyNode(V.Args.Document, V.Args.Node)
	
F.Intrinsic.Control.EndIf
	
F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Callback", "FNestExport_Unload", "PROJECT", "4980", "PROJECTTITLE", "GCG_4980_NEST_XP", "TASK", "GCG_4980_NEST_XP")
F.Intrinsic.Control.EndTry
Program.Sub.AddMappedNode.End

Program.Sub.txtScanJob_KeyPressEnter.Start
F.Intrinsic.Control.Try

'scanner should send an enter when the string is done
'possible formats (J - Job, S - Suffix, E - Sequence):
'$%JJJJJJSSSEEEEEE
'$%JJJJJJ-SSS-EEEEEE
'JJJJJJSSSEEEEEE
'JJJJJJ-SSS-EEEEEE
'JJJJJJ-SSS
'JJJJJJSSS

V.Local.sText.Declare(String)
V.Local.sJob.Declare(String)
V.Local.sSuffix.Declare(String)
V.Local.sSequence.Declare(String)
V.Local.sFilter.Declare(String)
V.Local.sMessage.Declare(String)

V.Local.sText.Set(V.Screen.FNestExport!txtScanJob.Text.Left19)

'AMC's barcodes are a seperate barcode for job and suffix, so we need to do this
F.Intrinsic.Control.If(V.Local.sText.Length, <, 9)
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

'should be pretty rare that $ or % are used in job names
F.Intrinsic.String.Replace(V.Local.sText.Trim, "$", "", V.Local.sText)
F.Intrinsic.String.Replace(V.Local.sText, "%", "", V.Local.sText)
F.Intrinsic.String.Replace(V.Local.sText, "-", "", V.Local.sText)

'so now, there should be either 6, 9, or 15 characters, depending on if sequence is passed and if suffix exists
F.Intrinsic.String.RPad(V.Local.sText, " ", 15, V.Local.sText)
V.Local.sJob.Set(V.Local.sText.Left6)
F.Intrinsic.String.Mid(V.Local.sText, 7, 3, V.Local.sSuffix)
V.Local.sSequence.Set(V.Local.sText.Right6)

'now build filter
F.Intrinsic.String.Build("[JOB] = '{0}'", V.Local.sJob, V.Local.sFilter)

F.Intrinsic.Control.If(V.Local.sSuffix.Trim, !=, "")
	F.Intrinsic.String.Build("{0} and [SUFFIX] = '{1}'", V.Local.sFilter, V.Local.sSuffix, V.Local.sFilter)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Local.sSequence.Trim, !=, "")
	F.Intrinsic.String.Build("{0} and [SEQ] = '{1}'", V.Local.sFilter, V.Local.sSequence)
F.Intrinsic.Control.EndIf

'now filter and select the rows
F.Data.DataView.Create("dtJobData", "dvScan", 22, V.Local.sFilter, "")
F.Intrinsic.Control.If(V.DataView.dtJobData!dvScan.RowCount, >, 0)
	F.Data.DataView.SetValue("dtJobData", "dvScan", -1, "SELECTED", True)
	F.Intrinsic.Control.CallSub(LoadTotals, "SELECTED_OVERRIDE", -1)
	GUI.FNestExport..ShowAlert(-1, "Nesting Export Dashboard", "Scanned Job(s) Selected")
F.Intrinsic.Control.Else
	F.Intrinsic.UI.Msgbox("Job not found in grid.")
F.Intrinsic.Control.EndIf
F.Data.DataView.Close("dtJobData", "dvScan")

GUI.FNestExport.txtScanJob.Text("")
GUI.FNestExport.txtScanJob.SetFocus
F.Intrinsic.Control.CallSub(txtScanJob_GotFocus)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Callback", "FNestExport_Unload", "PROJECT", "4980", "PROJECTTITLE", "GCG_4980_NEST_XP", "TASK", "GCG_4980_NEST_XP")
F.Intrinsic.Control.EndTry
Program.Sub.txtScanJob_KeyPressEnter.End

Program.Sub.txtScanJob_GotFocus.Start
F.Intrinsic.Control.Try

GUI.FNestExport.txtScanJob.BackColor("Highlight")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Callback", "FNestExport_Unload", "PROJECT", "4980", "PROJECTTITLE", "GCG_4980_NEST_XP", "TASK", "GCG_4980_NEST_XP")
F.Intrinsic.Control.EndTry
Program.Sub.txtScanJob_GotFocus.End

Program.Sub.txtScanJob_LostFocus.Start
F.Intrinsic.Control.Try

GUI.FNestExport.txtScanJob.BackColor("ControlLightLight")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Callback", "FNestExport_Unload", "PROJECT", "4980", "PROJECTTITLE", "GCG_4980_NEST_XP", "TASK", "GCG_4980_NEST_XP")
F.Intrinsic.Control.EndTry
Program.Sub.txtScanJob_LostFocus.End

Program.Sub.Comments.Start
${$5$}$2.0.0.0$}$2
${$6$}$rseddon$}$20240131143239838$}$DkKb6sybY9hE3N0enyRwKJuHSlMGTgRbD07HPEnmOmBwv1venTLa96Cj8SvVS5i1RjHunSxyh4o=
Program.Sub.Comments.End