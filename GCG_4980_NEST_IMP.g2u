Program.Sub.ScreenSU.Start
Gui.FormImport..Create(DashForm)
Gui.FormImport..Caption("Interface to GSS")
Gui.FormImport..Size(19020,12090)
Gui.FormImport..MinX(18500)
Gui.FormImport..MinY(9445)
Gui.FormImport..Position(0,0)
Gui.FormImport..BackColor(-2147483633)
Gui.FormImport..MousePointer(0)
Gui.FormImport..Event(UnLoad,FormImport_UnLoad)
Gui.FormImport..AlwaysOnTop(False)
Gui.FormImport..FontName("Tahoma")
Gui.FormImport..FontSize(8.25)
Gui.FormImport..ControlBox(True)
Gui.FormImport..MaxButton(True)
Gui.FormImport..MinButton(True)
Gui.FormImport..Moveable(True)
Gui.FormImport..Sizeable(True)
Gui.FormImport..ShowInTaskBar(True)
Gui.FormImport..TitleBar(True)
Gui.FormImport..BarRefreshButton(True)
Gui.FormImport..BarHelpButton(False,"","","",1.0.0,"1/1/0001 12:00:00 AM","",0,0,False)
Gui.FormImport..Event(RefreshClick,FormImport_RefreshClick)
Gui.FormImport.cmboNest.Create(ComboBox)
Gui.FormImport.cmboNest.Size(1815,330)
Gui.FormImport.cmboNest.Position(3975,495)
Gui.FormImport.cmboNest.Event(Click,cmboNest_Click)
Gui.FormImport.cmboNest.TabStop(True)
Gui.FormImport.cmboNest.TabIndex(2)
Gui.FormImport.cmboNest.Event(Change,cmboNest_Change)
Gui.FormImport.cmboNest.Enabled(True)
Gui.FormImport.cmboNest.Visible(True)
Gui.FormImport.cmboNest.Zorder(0)
Gui.FormImport.cmboNest.FontName("Tahoma")
Gui.FormImport.cmboNest.FontSize(8.25)
Gui.FormImport.lblNCellNest.Create(Label,"Nest ID:",True,750,255,0,3975,270,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImport.lblNCellNest.BorderStyle(0)
Gui.FormImport.txtTotalSheets.Create(TextBox,"",True,1215,300,0,6075,510,False,0,"Arial",8,-2147483643,1)
Gui.FormImport.txtTotalSheets.Event(LostFocus,RecalculateIssues)
Gui.FormImport.txtTotalSheets.TabStop(True)
Gui.FormImport.txtTotalSheets.TabIndex(3)
Gui.FormImport.lblTotalSheets.Create(Label,"Total Used",True,945,270,0,6075,255,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImport.lblTotalSheets.BorderStyle(0)
Gui.FormImport.gsgcWorkOrders.Create(GsGridControl)
Gui.FormImport.gsgcWorkOrders.Size(14880,3675)
Gui.FormImport.gsgcWorkOrders.Position(3975,4635)
Gui.FormImport.gsgcWorkOrders.TabStop(True)
Gui.FormImport.gsgcWorkOrders.TabIndex(18)
Gui.FormImport.gsgcWorkOrders.Anchor(15)
Gui.FormImport.gsgcWorkOrders.Enabled(True)
Gui.FormImport.gsgcWorkOrders.Visible(True)
Gui.FormImport.gsgcWorkOrders.Zorder(0)
Gui.FormImport.lblLot.Create(Label,"Lot",True,225,210,0,11175,1305,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImport.lblLot.BorderStyle(0)
Gui.FormImport.ddlLot.Create(DropDownList)
Gui.FormImport.ddlLot.Size(2265,300)
Gui.FormImport.ddlLot.Position(11190,1515)
Gui.FormImport.ddlLot.Event(Click,ddlLot_Click)
Gui.FormImport.ddlLot.TabStop(True)
Gui.FormImport.ddlLot.TabIndex(11)
Gui.FormImport.ddlLot.Event(Change,ddlLot_Change)
Gui.FormImport.ddlLot.Enabled(False)
Gui.FormImport.ddlLot.Visible(True)
Gui.FormImport.ddlLot.Zorder(0)
Gui.FormImport.ddlLot.FontName("Tahoma")
Gui.FormImport.ddlLot.FontSize(8.25)
Gui.FormImport.ddlSerial.Create(DropDownList)
Gui.FormImport.ddlSerial.Size(1215,300)
Gui.FormImport.ddlSerial.Position(15870,1515)
Gui.FormImport.ddlSerial.Event(Click,ddlSerial_Click)
Gui.FormImport.ddlSerial.TabStop(True)
Gui.FormImport.ddlSerial.TabIndex(13)
Gui.FormImport.ddlSerial.Event(Change,ddlSerial_Change)
Gui.FormImport.ddlSerial.Enabled(False)
Gui.FormImport.ddlSerial.Visible(True)
Gui.FormImport.ddlSerial.Zorder(0)
Gui.FormImport.ddlSerial.FontName("Tahoma")
Gui.FormImport.ddlSerial.FontSize(8.25)
Gui.FormImport.lblSize.Create(Label,"Serial",True,405,210,0,15870,1305,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImport.lblSize.BorderStyle(0)
Gui.FormImport.lblWorkOrderIssueAmt.Create(Label,"Work Orders",True,2940,255,0,3975,4365,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImport.lblWorkOrderIssueAmt.BorderStyle(0)
Gui.FormImport.txtMaterial.Create(TextBox,"",True,3360,300,0,3975,1530,True,0,"Arial",8,-2147483643,1)
Gui.FormImport.txtMaterial.TabStop(True)
Gui.FormImport.txtMaterial.TabIndex(8)
Gui.FormImport.txtMaterial.Event(LostFocus,txtMaterial_LostFocus)
Gui.FormImport.lblMaterial.Create(Label,"Material",True,1575,255,0,3975,1320,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImport.lblMaterial.BorderStyle(0)
Gui.FormImport.gsgcDrop.Create(GsGridControl)
Gui.FormImport.gsgcDrop.Size(14880,1770)
Gui.FormImport.gsgcDrop.Position(3975,8925)
Gui.FormImport.gsgcDrop.TabStop(True)
Gui.FormImport.gsgcDrop.TabIndex(23)
Gui.FormImport.gsgcDrop.Anchor(14)
Gui.FormImport.gsgcDrop.Enabled(True)
Gui.FormImport.gsgcDrop.Visible(True)
Gui.FormImport.gsgcDrop.Zorder(0)
Gui.FormImport.lblDropamt.Create(Label,"Drops",True,2940,255,0,3975,8685,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImport.lblDropamt.Anchor(6)
Gui.FormImport.lblDropamt.BorderStyle(0)
Gui.FormImport.cmdPost.Create(Button)
Gui.FormImport.cmdPost.Size(855,375)
Gui.FormImport.cmdPost.Position(4830,10725)
Gui.FormImport.cmdPost.Caption("Post")
Gui.FormImport.cmdPost.DefaultValue("")
Gui.FormImport.cmdPost.Event(Click,cmdPost_Click)
Gui.FormImport.cmdPost.TabStop(True)
Gui.FormImport.cmdPost.TabIndex(26)
Gui.FormImport.cmdPost.Enabled(False)
Gui.FormImport.cmdPost.Anchor(6)
Gui.FormImport.cmdPost.Visible(True)
Gui.FormImport.cmdPost.Zorder(0)
Gui.FormImport.cmdPost.FontName("Tahoma")
Gui.FormImport.cmdPost.FontSize(8.25)
Gui.FormImport.cmdRePrint.Create(Button)
Gui.FormImport.cmdRePrint.Size(855,375)
Gui.FormImport.cmdRePrint.Position(3960,10725)
Gui.FormImport.cmdRePrint.Caption("Re-Print")
Gui.FormImport.cmdRePrint.DefaultValue("")
Gui.FormImport.cmdRePrint.Event(Click,cmdRePrint_Click)
Gui.FormImport.cmdRePrint.TabStop(True)
Gui.FormImport.cmdRePrint.TabIndex(25)
Gui.FormImport.cmdRePrint.Anchor(6)
Gui.FormImport.cmdRePrint.Enabled(True)
Gui.FormImport.cmdRePrint.Visible(True)
Gui.FormImport.cmdRePrint.Zorder(0)
Gui.FormImport.cmdRePrint.FontName("Tahoma")
Gui.FormImport.cmdRePrint.FontSize(8.25)
Gui.FormImport.gsgcMaterial.Create(GsGridControl)
Gui.FormImport.gsgcMaterial.Size(14910,2295)
Gui.FormImport.gsgcMaterial.Position(3975,1905)
Gui.FormImport.gsgcMaterial.TabStop(True)
Gui.FormImport.gsgcMaterial.TabIndex(14)
Gui.FormImport.gsgcMaterial.Event(RowCellClick,gsgcMaterial_RowCellClick)
Gui.FormImport.gsgcMaterial.Anchor(13)
Gui.FormImport.gsgcMaterial.Event(CellValueChanged,gsgcMaterial_CellValueChanged)
Gui.FormImport.gsgcMaterial.Enabled(True)
Gui.FormImport.gsgcMaterial.Visible(True)
Gui.FormImport.gsgcMaterial.Zorder(0)
Gui.FormImport.cmdReFreshQty.Create(Button)
Gui.FormImport.cmdReFreshQty.Size(1275,375)
Gui.FormImport.cmdReFreshQty.Position(17550,4215)
Gui.FormImport.cmdReFreshQty.Caption("Refresh")
Gui.FormImport.cmdReFreshQty.DefaultValue("")
Gui.FormImport.cmdReFreshQty.Event(Click,PopulateQtyGrid)
Gui.FormImport.cmdReFreshQty.TabStop(True)
Gui.FormImport.cmdReFreshQty.TabIndex(16)
Gui.FormImport.cmdReFreshQty.Anchor(9)
Gui.FormImport.cmdReFreshQty.Enabled(True)
Gui.FormImport.cmdReFreshQty.Visible(True)
Gui.FormImport.cmdReFreshQty.Zorder(0)
Gui.FormImport.cmdReFreshQty.FontName("Tahoma")
Gui.FormImport.cmdReFreshQty.FontSize(8.25)
Gui.FormImport.cmdBinXFer.Create(Button)
Gui.FormImport.cmdBinXFer.Size(1275,375)
Gui.FormImport.cmdBinXFer.Position(16260,4215)
Gui.FormImport.cmdBinXFer.Caption("Bin Transfer")
Gui.FormImport.cmdBinXFer.Event(Click,cmdBinXFer_Click)
Gui.FormImport.cmdBinXFer.TabStop(True)
Gui.FormImport.cmdBinXFer.TabIndex(15)
Gui.FormImport.cmdBinXFer.Anchor(9)
Gui.FormImport.cmdBinXFer.Enabled(True)
Gui.FormImport.cmdBinXFer.Visible(True)
Gui.FormImport.cmdBinXFer.Zorder(0)
Gui.FormImport.cmdBinXFer.FontName("Tahoma")
Gui.FormImport.cmdBinXFer.FontSize(8.25)
Gui.FormImport.lblLot2.Create(Label,"Heat",True,330,210,0,13515,1305,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImport.lblLot2.BorderStyle(0)
Gui.FormImport.ddlBin.Create(DropDownList)
Gui.FormImport.ddlBin.Size(2265,300)
Gui.FormImport.ddlBin.Position(8850,1515)
Gui.FormImport.ddlBin.Event(Click,ddlBin_Click)
Gui.FormImport.ddlBin.TabStop(True)
Gui.FormImport.ddlBin.TabIndex(10)
Gui.FormImport.ddlBin.Event(Change,ddlBin_Change)
Gui.FormImport.ddlBin.Enabled(False)
Gui.FormImport.ddlBin.Visible(True)
Gui.FormImport.ddlBin.Zorder(0)
Gui.FormImport.ddlBin.FontName("Tahoma")
Gui.FormImport.ddlBin.FontSize(8.25)
Gui.FormImport.lblLot3.Create(Label,"Bin",True,225,210,0,8850,1305,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImport.lblLot3.BorderStyle(0)
Gui.FormImport.ddlHeat.Create(DropDownList)
Gui.FormImport.ddlHeat.Size(2265,300)
Gui.FormImport.ddlHeat.Position(13530,1515)
Gui.FormImport.ddlHeat.Event(Click,ddlHeat_Click)
Gui.FormImport.ddlHeat.TabStop(True)
Gui.FormImport.ddlHeat.TabIndex(12)
Gui.FormImport.ddlHeat.Event(Change,ddlHeat_Change)
Gui.FormImport.ddlHeat.Enabled(False)
Gui.FormImport.ddlHeat.Visible(True)
Gui.FormImport.ddlHeat.Zorder(0)
Gui.FormImport.ddlHeat.FontName("Tahoma")
Gui.FormImport.ddlHeat.FontSize(8.25)
Gui.FormImport.txtLocation.Create(TextBox,"",True,480,300,0,7380,1530,True,0,"Arial",8,-2147483643,1)
Gui.FormImport.txtLocation.MaxLength(2)
Gui.FormImport.txtLocation.TabStop(True)
Gui.FormImport.txtLocation.TabIndex(9)
Gui.FormImport.txtLocation.Event(LostFocus,txtLocation_LostFocus)
Gui.FormImport.lblLot4.Create(Label,"Loc",True,270,210,0,7380,1320,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImport.lblLot4.BorderStyle(0)
Gui.FormImport.chkMoveTicket.Create(CheckBox)
Gui.FormImport.chkMoveTicket.Size(1830,300)
Gui.FormImport.chkMoveTicket.Position(5850,10755)
Gui.FormImport.chkMoveTicket.Caption("Print Move Ticket")
Gui.FormImport.chkMoveTicket.Event(Click,chkMoveTicket_Click)
Gui.FormImport.chkMoveTicket.TabStop(True)
Gui.FormImport.chkMoveTicket.TabIndex(27)
Gui.FormImport.chkMoveTicket.Anchor(6)
Gui.FormImport.chkMoveTicket.Enabled(True)
Gui.FormImport.chkMoveTicket.Visible(True)
Gui.FormImport.chkMoveTicket.Zorder(0)
Gui.FormImport.chkMoveTicket.FontName("Tahoma")
Gui.FormImport.chkMoveTicket.FontSize(8.25)
Gui.FormImport.chkDoubleHead.Create(CheckBox)
Gui.FormImport.chkDoubleHead.Size(2280,300)
Gui.FormImport.chkDoubleHead.Position(7755,10755)
Gui.FormImport.chkDoubleHead.Caption("Double Head Laser")
Gui.FormImport.chkDoubleHead.Event(Click,chkDoubleHead_Click)
Gui.FormImport.chkDoubleHead.TabStop(True)
Gui.FormImport.chkDoubleHead.TabIndex(28)
Gui.FormImport.chkDoubleHead.Anchor(6)
Gui.FormImport.chkDoubleHead.Enabled(True)
Gui.FormImport.chkDoubleHead.Visible(True)
Gui.FormImport.chkDoubleHead.Zorder(0)
Gui.FormImport.chkDoubleHead.FontName("Tahoma")
Gui.FormImport.chkDoubleHead.FontSize(8.25)
Gui.FormImport.lblIssueToIndirect.Create(Label,"Issue to ",False,615,210,0,17145,1320,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImport.lblIssueToIndirect.Anchor(9)
Gui.FormImport.lblIssueToIndirect.BorderStyle(0)
Gui.FormImport.txtIssueToIndirect.Create(TextBox,"",False,1335,300,0,17175,1515,True,0,"Arial",8,-2147483643,1)
Gui.FormImport.txtIssueToIndirect.NumericOnly(1)
Gui.FormImport.txtIssueToIndirect.TabStop(True)
Gui.FormImport.txtIssueToIndirect.TabIndex(17)
Gui.FormImport.txtIssueToIndirect.Anchor(9)
Gui.FormImport.gsgcNestList.Create(GsGridControl)
Gui.FormImport.gsgcNestList.Size(3915,10980)
Gui.FormImport.gsgcNestList.Position(0,0)
Gui.FormImport.gsgcNestList.Event(RowCellClick,gsgcNestList_RowCellClick)
Gui.FormImport.gsgcNestList.TabStop(True)
Gui.FormImport.gsgcNestList.TabIndex(1)
Gui.FormImport.gsgcNestList.Event(ColumnFilterChanged,gsgcNestList_ColumnFilterChanged)
Gui.FormImport.gsgcNestList.Anchor(7)
Gui.FormImport.gsgcNestList.Enabled(True)
Gui.FormImport.gsgcNestList.Visible(True)
Gui.FormImport.gsgcNestList.Zorder(0)
Gui.FormImport.gsgcNestList.Dock(3)
Gui.FormImport.lblEmployee.Create(Label,"Employee",True,810,255,0,7500,255,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImport.lblEmployee.BorderStyle(0)
Gui.FormImport.lblName.Create(Label,"Name",True,555,255,0,8880,255,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImport.lblName.BorderStyle(0)
Gui.FormImport.txtEmployee.Create(TextBox,"",True,1215,300,0,7530,510,True,0,"Arial",8,-2147483643,1)
Gui.FormImport.txtEmployee.Event(LostFocus,txtEmployee_LostFocus)
Gui.FormImport.txtEmployee.TabStop(True)
Gui.FormImport.txtEmployee.TabIndex(4)
Gui.FormImport.txtEmployee.MaxLength(7)
Gui.FormImport.txtEmployee.NumericOnly(2)
Gui.FormImport.txtEmployee.Event(Click,txtEmployee_Click)
Gui.FormImport.txtEmployee.Event(KeyPressEnter,txtEmployee_KeyPressEnter)
Gui.FormImport.txtEmployeeName.Create(TextBox,"",True,3690,300,0,8910,510,False,0,"Arial",8,-2147483643,1)
Gui.FormImport.txtEmployeeName.Locked(True)
Gui.FormImport.txtEmployeeName.TabStop(True)
Gui.FormImport.txtEmployeeName.TabIndex(5)
Gui.FormImport.cmdEmployeeBrowser.Create(Button)
Gui.FormImport.cmdEmployeeBrowser.Size(405,405)
Gui.FormImport.cmdEmployeeBrowser.Position(12645,450)
Gui.FormImport.cmdEmployeeBrowser.Caption("^")
Gui.FormImport.cmdEmployeeBrowser.Event(Click,cmdEmployeeBrowser_Click)
Gui.FormImport.cmdEmployeeBrowser.DisableOnClick(10)
Gui.FormImport.cmdEmployeeBrowser.TabStop(True)
Gui.FormImport.cmdEmployeeBrowser.TabIndex(6)
Gui.FormImport.cmdEmployeeBrowser.Enabled(True)
Gui.FormImport.cmdEmployeeBrowser.Visible(True)
Gui.FormImport.cmdEmployeeBrowser.Zorder(0)
Gui.FormImport.cmdEmployeeBrowser.FontName("Tahoma")
Gui.FormImport.cmdEmployeeBrowser.FontSize(8.25)
Gui.FormImport.txtDropLength.Create(TextBox,"",True,1020,300,0,14310,8580,False,1,"Arial",8,-2147483643,1)
Gui.FormImport.txtDropLength.NumericOnly(1)
Gui.FormImport.txtDropLength.Event(LostFocus,txtDropLength_LostFocus)
Gui.FormImport.txtDropLength.TabStop(True)
Gui.FormImport.txtDropLength.TabIndex(20)
Gui.FormImport.txtDropLength.Anchor(10)
Gui.FormImport.txtDropWidth.Create(TextBox,"",True,1020,300,0,16830,8580,False,1,"Arial",8,-2147483643,1)
Gui.FormImport.txtDropWidth.NumericOnly(1)
Gui.FormImport.txtDropWidth.Event(LostFocus,txtDropWidth_LostFocus)
Gui.FormImport.txtDropWidth.TabStop(True)
Gui.FormImport.txtDropWidth.TabIndex(21)
Gui.FormImport.txtDropWidth.Anchor(10)
Gui.FormImport.lblDroplength.Create(Label,"Drop Length (IN)",True,1305,255,0,12975,8670,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImport.lblDroplength.Anchor(10)
Gui.FormImport.lblDroplength.BorderStyle(0)
Gui.FormImport.lblDropWidth.Create(Label,"Drop Width (IN)",True,1215,255,0,15555,8670,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImport.lblDropWidth.Anchor(10)
Gui.FormImport.lblDropWidth.BorderStyle(0)
Gui.FormImport.cmdAddDrop.Create(Button)
Gui.FormImport.cmdAddDrop.Size(855,375)
Gui.FormImport.cmdAddDrop.Position(17955,8535)
Gui.FormImport.cmdAddDrop.Caption("Add")
Gui.FormImport.cmdAddDrop.Event(Click,cmdAddDrop_Click)
Gui.FormImport.cmdAddDrop.Enabled(False)
Gui.FormImport.cmdAddDrop.TabStop(True)
Gui.FormImport.cmdAddDrop.TabIndex(22)
Gui.FormImport.cmdAddDrop.Anchor(10)
Gui.FormImport.cmdAddDrop.Visible(True)
Gui.FormImport.cmdAddDrop.Zorder(0)
Gui.FormImport.cmdAddDrop.FontName("Tahoma")
Gui.FormImport.cmdAddDrop.FontSize(8.25)
Gui.FormImport.lblDropID.Create(Label,"Drop ID",True,630,255,0,9780,8670,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImport.lblDropID.Anchor(10)
Gui.FormImport.lblDropID.BorderStyle(0)
Gui.FormImport.txtDropID.Create(TextBox,"",True,2370,300,0,10455,8580,False,0,"Arial",8,-2147483643,1)
Gui.FormImport.txtDropID.MaxLength(30)
Gui.FormImport.txtDropID.TabStop(True)
Gui.FormImport.txtDropID.TabIndex(19)
Gui.FormImport.txtDropID.Anchor(10)
Gui.FormImport.lblUM.Create(Label,"UM",True,225,210,0,7920,1320,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImport.lblUM.BorderStyle(0)
Gui.FormImport.txtUM.Create(TextBox,"",True,405,300,0,7920,1530,False,0,"Arial",8,-2147483643,1)
Gui.FormImport.txtUM.Locked(True)
Gui.FormImport.lblFlexSchedule.Create(Label,"Flex Schedule",True,1350,255,0,13200,255,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImport.lblFlexSchedule.BorderStyle(0)
Gui.FormImport.txtFlexSchedule.Create(TextBox,"",True,1215,300,0,13230,510,False,0,"Arial",8,-2147483643,1)
Gui.FormImport.cmdCreateFlexSchedule.Create(Button)
Gui.FormImport.cmdCreateFlexSchedule.Size(855,375)
Gui.FormImport.cmdCreateFlexSchedule.Position(14490,465)
Gui.FormImport.cmdCreateFlexSchedule.Caption("Create")
Gui.FormImport.cmdCreateFlexSchedule.Enabled(False)
Gui.FormImport.cmdCreateFlexSchedule.Event(Click,cmdCreateFlexSchedule_Click)
Gui.FormImport.cmdCreateFlexSchedule.Visible(True)
Gui.FormImport.cmdCreateFlexSchedule.Zorder(0)
Gui.FormImport.cmdCreateFlexSchedule.FontName("Tahoma")
Gui.FormImport.cmdCreateFlexSchedule.FontSize(8.25)
Gui.FormImport.cmdPrintFlexSchedule.Create(Button)
Gui.FormImport.cmdPrintFlexSchedule.Enabled(False)
Gui.FormImport.cmdPrintFlexSchedule.Size(855,375)
Gui.FormImport.cmdPrintFlexSchedule.Position(15375,465)
Gui.FormImport.cmdPrintFlexSchedule.Caption("Reprint")
Gui.FormImport.cmdPrintFlexSchedule.Event(Click,cmdPrintFlexSchedule_Click)
Gui.FormImport.cmdPrintFlexSchedule.Visible(True)
Gui.FormImport.cmdPrintFlexSchedule.Zorder(0)
Gui.FormImport.cmdPrintFlexSchedule.FontName("Tahoma")
Gui.FormImport.cmdPrintFlexSchedule.FontSize(8.25)
Gui.FormImport.cmdCloseNest.Create(Button)
Gui.FormImport.cmdCloseNest.Enabled(False)
Gui.FormImport.cmdCloseNest.Size(855,375)
Gui.FormImport.cmdCloseNest.Position(16260,465)
Gui.FormImport.cmdCloseNest.Caption("Close")
Gui.FormImport.cmdCloseNest.Event(Click,cmdCloseNest_Click)
Gui.FormImport.cmdCloseNest.Visible(True)
Gui.FormImport.cmdCloseNest.Zorder(0)
Gui.FormImport.cmdCloseNest.FontName("Tahoma")
Gui.FormImport.cmdCloseNest.FontSize(8.25)
Gui.FormImport.lblProfile.Create(Label,"Profile",True,660,255,0,17175,255,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImport.lblProfile.BorderStyle(0)
Gui.FormImport.txtProfile.Create(TextBox,"",True,1320,300,0,17205,510,False,0,"Arial",8,-2147483643,1)
Gui.FormImport.lblLoading.Create(Label,"Loading...",False,1815,255,0,3975,900,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImport.lblLoading.ForeColor(32768)
Gui.FormImport.lblLoading.BorderStyle(0)
Gui.FormImport.cmdMaterialBrowser.Create(Button)
Gui.FormImport.cmdMaterialBrowser.Size(405,405)
Gui.FormImport.cmdMaterialBrowser.Position(8370,1470)
Gui.FormImport.cmdMaterialBrowser.TabStop(True)
Gui.FormImport.cmdMaterialBrowser.TabIndex(6)
Gui.FormImport.cmdMaterialBrowser.Caption("^")
Gui.FormImport.cmdMaterialBrowser.DisableOnClick(10)
Gui.FormImport.cmdMaterialBrowser.Event(Click,cmdMaterialBrowser_Click)
Gui.FormImport.cmdMaterialBrowser.Enabled(False)
Gui.FormImport.cmdMaterialBrowser.Visible(True)
Gui.FormImport.cmdMaterialBrowser.Zorder(0)
Gui.FormImport.cmdMaterialBrowser.FontName("Tahoma")
Gui.FormImport.cmdMaterialBrowser.FontSize(8.25)
Gui.FormImport.txtLongMaterial.Create(TextBox,"",False,3360,300,0,3975,1530,False,0,"Arial",8,-2147483643,1)
Gui.FormImport.txtLongMaterial.TabStop(True)
Gui.FormImport.txtLongMaterial.TabIndex(8)
Program.Sub.ScreenSU.End

Program.Sub.Preflight.Start
V.Global.sMoveTicketPath.Declare
V.Global.sReadPath.Declare(String)
V.Global.sNestListFilter.Declare(String, "")
V.Global.bUnattended.Declare(Boolean, False)
V.Global.sEmployee.Declare(String, "")
V.Global.sProfile.Declare(String)
V.Global.sNestXPFold.Declare
V.Global.sMaterial.Declare(String, "")
V.Global.sLocation.Declare(String, "")
V.Global.sNest.Declare(String, "")
V.Global.bMultipleDelete.Declare(Boolean, False)
V.Global.bDoNotDeleteFlexSchedule.Declare(Boolean, False)
V.Global.iDecimals.Declare(Long, 4)

'column tracking
V.Global.bMaterialColumnsVisible.Declare(Boolean, False)
V.Global.bCloseLaborColumnVisible.Declare(Boolean, False)
V.Global.bFlexColumnsVisible.Declare(Boolean, False)
V.Global.bIndirectColumnsVisible.Declare(Boolean, False)
V.Global.bCloseMaterialColumnVisible.Declare(Boolean, False)

'libraries
Program.External.Include.Library("450100.lib")
Program.External.Include.Library("GCG_4980_SharedFunctions.lib")
Program.External.Include.Library("6000.lib")
Program.External.Include.Library("900300.lib")
Program.External.Include.Library("JB0455.lib")

'debug variables
V.Global.bGABLogging.Declare(Boolean, False)
V.Global.bCallWrapperLogging.Declare(Boolean, False)
V.Global.bDebugger.Declare(Boolean, False)
V.Global.bPostingLogging.Declare(Boolean, False)
V.Global.bQuickLaunch.Declare(Boolean, False)

'options
V.Global.bLoadExtras.Declare(Boolean, True)
Program.Sub.Preflight.End

Program.Sub.Main.Start
'GCG_4980_NEST_IMP.g2u
'Ashwin D, Trey S, Alejandro A
'This script is part of the standard nesting interface. This is the import portion of the interface.
'This script is for verifying and posting nests to global shop
'it also launches GCG_4980_ReadFiles.g2u which does the actual importing

F.Intrinsic.Control.Try

V.Local.sPath.Declare(String)

F.Intrinsic.Control.If(V.Global.bDebugger)
	Function.Intrinsic.Debug.InvokeDebugger
	Function.Intrinsic.Debug.Stop
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Global.bGABLogging)
	F.Intrinsic.Debug.EnableLogging
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Global.bCallWrapperLogging)
	F.Intrinsic.Debug.CallWrapperDebugEnable
F.Intrinsic.Control.EndIf

'15710 GUI populate
F.Intrinsic.Control.If(V.Caller.Hook, =, 15710)
	F.Intrinsic.Control.CallSub(Connection, "Connect", True)
	F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "IMPORT_OPTION", "SETTING", "LAUNCH_FROM_GUI", "PROFILE", "")
	F.Intrinsic.Control.CallSub(Connection, "Connect", False)
	F.Intrinsic.Control.SelectCase(V.Args.Setting.Trim)
		F.Intrinsic.Control.Case("Script 1")
			V.Passed.000016.Set("Nest Import")
		F.Intrinsic.Control.Case("Script 2")
			V.Passed.000020.Set("Nest Import")
		F.Intrinsic.Control.Case("Script 3")
			V.Passed.000021.Set("Nest Import")
	F.Intrinsic.Control.EndSelect
	F.Intrinsic.Control.End
F.Intrinsic.Control.Else

	'check if running from online update
	F.Intrinsic.Control.If(V.Caller.Hook,=,38130)
		V.Global.bUnattended.Set(True)
		F.Intrinsic.Control.CallSub(ScriptPIDCheck, "PROJECT", "4980", "TASK", "Nesting_Posting")
	F.Intrinsic.Control.EndIf
		
	F.Intrinsic.Control.If(V.Global.bQuickLaunch.Not)
		F.Intrinsic.String.Build("{0}\GCG_4980_ReadFiles.g2u", V.Ambient.ScriptPath, V.Local.sPath)
		F.Global.General.CallSyncGAS(V.Local.sPath)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Intrinsic.UI.InvokeWaitDialog("Loading...","Nesting Import")
F.ODBC.Connection!Con.OpenCompanyConnection(200)

F.Intrinsic.Control.CallSub(LoadProfile)

F.Intrinsic.Control.CallSub(SetIcon)
F.Intrinsic.Control.CallSub(SetContextMenus)
F.Intrinsic.Control.CallSub(GetData)
F.Intrinsic.Control.CallSub(SetGridViewProperties)
F.Intrinsic.Control.CallSub(LoadNests)
F.Intrinsic.Control.CallSub(CheckFlexColumn)
F.Intrinsic.Control.CallSub(CheckLocationTextBox)
F.Intrinsic.UI.SetBrowserHotTypeAhead(True)

'issues with this right now
'F.Intrinsic.Control.CallSub(Deserialize, "Form", "FormImport", "GridControl", "gsgcWorkOrders", "GridView", "gvWorkOrders", "RegID", "4980")

F.Intrinsic.UI.CloseWaitDialog
F.Intrinsic.Control.CallSub(CheckGrids, "Issue_Material", True)

F.Intrinsic.Control.If(V.Caller.Hook, =, 15760, "OR", V.Caller.Hook, =, 15770, V.Caller.Hook, =, 15780)
	F.Intrinsic.Control.CallSub(LoadNestByEmployee)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(ToShowOrNotToShow)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.Main.End

Program.Sub.LoadProfile.Start
'pull in the data for the current profile

F.Intrinsic.Control.Try

V.Local.sFilePath.Declare(String)

F.Intrinsic.string.Build("{0}\CUSTOM\4980\{1}",V.Caller.GlobalDir, V.Caller.CompanyCode, V.Local.sFilePath)
F.Intrinsic.Control.CallSub(CheckDirectories, "DIRECTORIES", V.Local.sFilePath)
V.Global.sNestXPFold.Set(V.Local.sFilePath)

F.Data.DataTable.CreateFromSQL("ProfDT","Con","Select * from GCG_4980_NESTPROFILE where RTRIM(XPTYPE) <> '' and RTRIM(import_folder) <> ''",true)
F.Data.Dataview.Create("ProfDT", "ProfChkVw", 22)
F.Data.DataView.SetFilter("ProfDT", "ProfChkVw", "[DEFAULT_PROFILE] = True")
F.Intrinsic.Control.If(V.DataView.ProfDT!ProfChkVw.RowCount, >, 0)
	V.Global.sProfile.Set(V.DataView.ProfDT!ProfChkVw(0).Profile!FieldValTrim)
	V.Global.sEmployee.Set(V.DataView.ProfDT!ProfChkVw(0).DEFAULT_EMP!FieldValTrim)
	GUI.FormImport.txtProfile.Text(V.Global.sProfile)
F.Intrinsic.Control.EndIf

F.Data.DataTable.CreateFromSQL("ImpMapDT","Con","Select * from GCG_4980_IMPMAINT ",true)
F.Data.DataTable.CreateFromSQL("RemMapDT","Con","Select * from GCG_4980_REMMAINT ",true)

F.Data.Dictionary.CreateFromSQL("UMDict","Con","Select RTRIM(PART) + RTRIM(LOCATION) as PartLoc, UM_INVENTORY from V_INVENTORY_MSTR")
F.Data.Dictionary.SetDefaultReturn("UMDict","")

F.Data.Dictionary.CreateFromSQL("DefaultBin","Con","SELECT RTRIM(PART) + RTRIM(LOCATION) AS PARTLoc, RTRIM(BIN) AS BIN FROM V_INVENTORY_MSTR Order by Part")
F.Data.Dictionary.SetDefaultReturn("DefaultBin","")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.LoadProfile.End

Program.Sub.LoadDefaultEmployee.Start
'set the employee text boxes to the default employee set up for that profile

F.Intrinsic.Control.Try

'check if everything exists
F.Intrinsic.Control.If(V.DataTable.dtWorkOrders.Exists)
	F.Intrinsic.Control.If(V.DataTable.dtWorkOrders.RowCount, >, 0)
		F.Intrinsic.Control.If(V.DataView.dtWorkOrders!dvWorkOrder.Exists)
			F.Intrinsic.Control.If(V.DataView.dtWorkOrders!dvWorkOrder.RowCount, >, 0)
			
				'if an employee is in the work order record, use that
				F.Intrinsic.Control.If(V.DataView.dtWorkOrders!dvWorkOrder(0).Employee!FieldValTrim, !=, "")
					GUI.FormImport.txtEmployee.Text(V.DataView.dtWorkOrders!dvWorkOrder(0).Employee!FieldValTrim)
				F.Intrinsic.Control.Else
					'if not, use the default if unattened. If not unattened, leave whatever is currently selected
					F.Intrinsic.Control.If(V.Global.bUnattended)
						GUI.FormImport.txtEmployee.Text(V.Global.sEmployee)
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndIf
				
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

'if empty, use the default
F.Intrinsic.Control.If(V.Screen.FormImport!txtEmployee.Text.Trim, =, "")
	GUI.FormImport.txtEmployee.Text(V.Global.sEmployee)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(txtEmployee_LostFocus)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.LoadDefaultEmployee.End

Program.Sub.ToShowOrNotToShow.Start
'determine whether to launch screen or run unattended

F.Intrinsic.Control.Try

F.Intrinsic.Control.If(V.Global.bUnattended)
	F.Intrinsic.Control.If(V.DataTable.dtNests.RowCount, >, 0)
		F.Data.DataTable.SetValue("dtNests", -1, "Post", True)
		F.Intrinsic.Control.CallSub(cmdPostSelected_Click)
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.CallSub(FormImport_Unload)
F.Intrinsic.Control.Else
	GUI.FormImport..Show
	GUI.FormImport..SetFocus
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.ToShowOrNotToShow.End

Program.Sub.FormImport_UnLoad.Start
'clean up, close program

F.Intrinsic.Control.Try

F.Intrinsic.Control.CallSub(CloseSettingsDT)
F.Intrinsic.Control.CallSub(ScriptPIDClear, "PROJECT", "4980", "TASK", "Nesting_Posting")

F.Intrinsic.Control.CallSub(Serialize, "Form", "FormImport", "GridControl", "gsgcWorkOrders", "GridView", "gvWorkOrders", "RegID", "4980")

F.ODBC.Connection!Con.Close
F.Intrinsic.Control.End

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.FormImport_UnLoad.End

Program.Sub.cmdRePrint_Click.Start
'reprint flex schedule

F.Intrinsic.Control.Try

V.Local.iWidth.Declare(Long)
V.Local.sColumn.Declare(String)
V.Local.sRet.Declare(String)
V.Local.sParam.Declare(String)

F.Intrinsic.String.Split("1000*!*1500","*!*",V.Local.iWidth)
F.Intrinsic.String.Split("Nest ID*!*Schedule Number","*!*",V.Local.sColumn)

'create browser for all closed nestid's that show their flexid's so they can be reprinted
F.Intrinsic.UI.Browser("Flex Schedule Browser","Con","SELECT NESTID, FLEXID FROM GCG_4980_MAT WHERE CLOSED = 'Y' and FLEXID <> '' ORDER BY NESTID ASC",V.Local.sColumn,V.Local.iWidth,V.Local.sRet)
F.Intrinsic.Control.If(V.Local.sRet,<>,"***CANCEL***")
	F.Intrinsic.String.Split(V.Local.sRet,"*!*",V.Local.sRet)
	V.Local.sRet.RedimPreserve(0,1)
	F.Data.DataTable.AddRow("900300", "StartDate", "000000", "EndDate", "000000", "StartFSNum", V.Local.sRet(1), "StartFSSuffix", "000", "EndFSNum", V.Local.sRet(1), "EndFSSuffix", "000", "ShowMatl", "Y", "UseExtBarcode", "Y")
	F.Intrinsic.Control.CallSub(900300Sync)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.cmdRePrint_Click.End

Program.Sub.CheckMaterial.Start
'check if there is enough material to post
'return V.Args.ENOUGh

F.Intrinsic.Control.Try

V.Local.sMaterial.Declare(String)
V.Local.sLocation.Declare(String)
V.Local.sLot.Declare(String)
V.Local.sBin.Declare(String)
V.Local.sHeat.Declare(String)
V.Local.sSerial.Declare(String)
V.Local.sSQL.Declare(String)
V.Local.bEnough.Declare(Boolean)
V.Local.sRet.Declare(String)
V.Local.fQuantity.Declare(Float, 0)
V.Local.fNeeded.Declare(Float)

V.Local.sMaterial.Set(V.Screen.FormImport!txtMaterial.Text.Trim)
V.Local.sLocation.Set(V.Screen.FormImport!txtLocation.Text.Trim)
V.Local.sLot.Set(V.Screen.FormImport!ddlLot.Text.Trim)
V.Local.sBin.Set(V.Screen.FormImport!ddlBin.Text.Trim)
V.Local.sHeat.Set(V.Screen.FormImport!ddlHeat.Text.Trim)
V.Local.sSerial.Set(V.Screen.FormImport!ddlSerial.Text.Trim)
V.Local.fNeeded.Set(V.Screen.FormImport!txtTotalSheets.Text.Trim)

'this grid will only be enabled if there are lot/bin/heat/serial records
F.Intrinsic.Control.If(V.Screen.FormImport!gsgcMaterial.Enabled)
	F.Intrinsic.String.Build("select QUANTITY from V_ITEM_MASTER where PART = '{0}' and LOCATION = '{1}' and LOT = '{2}' and BIN = '{3}' and HEAT = '{4}' and SERIAL_NUMBER = '{5}'", V.Local.sMaterial, V.Local.sLocation, V.Local.sLot, V.Local.sBin, V.Local.sHeat, V.Local.sSerial, V.Local.sSQL)
	F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
F.Intrinsic.Control.Else
	F.Intrinsic.String.Build("select QTY_ONHAND from V_INVENTORY_MSTR where PART = '{0}' and LOCATION = '{1}'", V.Local.sMaterial, V.Local.sLocation, V.Local.sSQL)
	F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Ambient.ExecuteAndReturnEOF.Not)
	V.Local.fQuantity.Set(V.Local.sRet.Float)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Local.fNeeded, >, V.Local.fQuantity)
	V.Local.bEnough.Set(False)
F.Intrinsic.Control.Else
	V.Local.bEnough.Set(True)
F.Intrinsic.Control.EndIf

F.Intrinsic.Variable.AddRV("ENOUGH", V.Local.bEnough)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.CheckMaterial.End

Program.Sub.cmdPost_Click.Start
'check the data, post the labor and material of the nest

F.Intrinsic.Control.Try

V.Local.bMultipleBins.Declare(Boolean, False)
V.Local.sSQL.Declare(String)
V.Local.sRet.Declare(String)
V.Local.sMessage.Declare(String)
V.Local.iRet.Declare(Long)

F.Intrinsic.Control.If(V.Screen.FormImport!cmboNest.Text.Trim, =, "")
	F.Intrinsic.UI.Msgbox("No valid nest selected.")
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

'check if nest has already been posted
F.Intrinsic.String.Build("select RTRIM(NESTID) from GCG_4980_MAT where NESTID = '{0}' and CLOSED = 'N' and READY_FLAG = 'Y'", V.Screen.FormImport!cmboNest.Text.Trim, V.Local.sSQL)
F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
F.Intrinsic.Control.If(V.Ambient.ExecuteAndReturnEOF)
	F.Intrinsic.String.Build("Could not find nest {0} in the database. The nest may have already been posted or deleted from another station.", V.Screen.FormImport!cmboNest.Text.Trim, V.Local.sMessage)
	F.Intrinsic.UI.Msgbox(V.Local.sMessage)
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Screen.FormImport!txtEmployee.Enabled)
	F.Intrinsic.Control.If(V.Screen.FormImport!txtEmployee.Text.Trim, =, "")
		F.Intrinsic.UI.Msgbox("No employee selected.")
		F.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

'check if multiple bin option is on
F.Intrinsic.Control.CallSub(GetSetting, "PROFILE", V.Global.sProfile, "TYPE", "IMPORT_OPTION", "SETTING", "MULTIPLE_BINS")
F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
	V.Local.bMultipleBins.Set(V.Args.Setting)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Screen.FormImport!gsgcMaterial.Enabled)
	F.Intrinsic.Control.If(V.Local.bMultipleBins.Not)
		F.Intrinsic.Control.If(V.Screen.FormImport!ddlBin.Text.Trim, =, "", "AND", V.Screen.FormImport!ddlHeat.Text.Trim, =, "", V.Screen.FormImport!ddlLot.Text.Trim, =, "", V.Screen.FormImport!ddlSerial.Text.Trim, =, "")
			F.Intrinsic.UI.Msgbox("No lot/bin/heat/serial record selected. The material will be issued from inventory. Continue?", "Warning", 4, V.Local.iRet)
			F.Intrinsic.Control.If(V.Local.iRet, !=, V.Ambient.MsgBoxYes)
				F.Intrinsic.Control.ExitSub
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Local.bMultipleBins)
	'check if they are issuing from multiple bins
	F.Data.DataView.Create("Part", "dvCheckMultipleBins", 22, "Issue = True", "")
	F.Intrinsic.Control.If(V.DataView.Part!dvCheckMultipleBins.RowCount, >, 1)
		'check if there are any drops
		F.Intrinsic.Control.If(V.DataTable.Drop.Exists)
			F.Intrinsic.Control.If(V.DataTable.Drop.RowCount, >, 0)
				F.Intrinsic.UI.Msgbox("Nests with drops cannot be issued from multiple bins.")
				F.Intrinsic.Control.ExitSub
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
	F.Data.DataView.Close("Part", "dvCheckMultipleBins")
	
	F.Intrinsic.Control.CallSub(CheckMultipleBinIssueAmount)
	F.Intrinsic.Control.If(V.Screen.FormImport!txtTotalSheets.Text.Trim, !=, 0)
		F.Intrinsic.Control.If(V.Args.BINS_Selected.Not)
			F.Intrinsic.UI.Msgbox("Select bins to issue for before posting.")
			F.Intrinsic.Control.ExitSub
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Else

	F.Intrinsic.Control.If(V.Screen.FormImport!txtMaterial.Enabled)
		'check if they want us to check material before posting
		F.Intrinsic.Control.CallSub(GetSetting, "PROFILE", V.Global.sProfile, "TYPE", "IMPORT_OPTION", "SETTING", "CHECK_MATERIAL")
		F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
			F.Intrinsic.Control.CallSub(CheckMaterial)
			F.Intrinsic.Control.If(V.Args.ENOUGH, =, False)
				F.Intrinsic.UI.Msgbox("Not enough material to post.")
				F.Intrinsic.Control.ExitSub
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

GUI.FormImport..Enabled(False)
F.Intrinsic.Control.BlockEvents

F.Intrinsic.UI.InvokeWaitDialog("Posting Nest...","Updating")
F.Intrinsic.Control.CallSub(Post, "Nest", V.Screen.FormImport!cmboNest.Text.Trim, "PrintMoveTicket", V.Screen.FormImport!chkMoveTicket.CheckedAsBoolean)

GUI.FormImport.txtIssueToIndirect.Text("")
GUI.FormImport.txtIssueToIndirect.Visible(False)
GUI.FormImport.lblIssueToIndirect.Visible(False)
GUI.FormImport..SetFocus

'refresh lists
F.Intrinsic.Control.CallSub(LoadNests)

GUI.FormImport.cmboNest.Text("")
F.Intrinsic.Control.CallSub(cmboNest_Click)

GUI.FormImport..Enabled(True)
GUI.FormImport.cmdPost.Enabled(False)

F.Intrinsic.Control.UnBlockEvents

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.cmdPost_Click.End

Program.Sub.ddlBin_Click.Start
F.Intrinsic.Control.Try

F.Intrinsic.Control.CallSub(PopulateLotComboBox)
F.Intrinsic.Control.CallSub(PopulateHeatComboBox)
F.Intrinsic.Control.CallSub(PopulateSerialComboBox)
F.Intrinsic.Control.CallSub(RecalculateIssues)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.ddlBin_Click.End

Program.Sub.ddlHeat_Click.Start
F.Intrinsic.Control.Try

F.Intrinsic.Control.CallSub(PopulateSerialComboBox)
F.Intrinsic.Control.CallSub(RecalculateIssues)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.ddlHeat_Click.End

Program.Sub.ddlLot_Click.Start
F.Intrinsic.Control.Try

F.Intrinsic.Control.CallSub(PopulateHeatComboBox)
F.Intrinsic.Control.CallSub(PopulateSerialComboBox)
F.Intrinsic.Control.CallSub(RecalculateIssues)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.ddlLot_Click.End

Program.Sub.ddlSerial_Click.Start
'calculate issue/drops when different serial number is selected

F.Intrinsic.Control.Try

V.Local.sSerial.Declare
V.Local.sLxB.Declare
V.Local.fLength.Declare
V.Local.fBreadth.Declare
V.Local.fWeight.Declare
V.Local.fArea.Declare
V.Local.fIssue.Declare
V.Local.fAreaFull.Declare
V.Local.sUM.Declare
V.Local.sMaterial.Declare
V.Local.sFilter.Declare
V.Local.fQty.Declare

V.Local.sMaterial.Set(V.Screen.FormImport!txtMaterial.Text.Trim)
V.Local.sSerial.Set(V.Screen.FormImport!ddlSerial.text.trim)

'need to add something for weight here
V.Local.fWeight.set(0)

F.Intrinsic.Control.If(V.Screen.FormImport!ddlSerial.text.trim,=,"")
	F.Intrinsic.Control.CallSub(SetMaterialAmount)
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

F.Intrinsic.String.Build("LOT = '{0}' and BIN = '{1}' and HEAT = '{2}' and SERIAL_NUMBER = '{3}'", V.Screen.FormImport!ddlLot.Text.Trim, V.Screen.FormImport!ddlBin.Text.Trim, V.Screen.FormImport!ddlHeat.Text.Trim, V.Screen.FormImport!ddlSerial.Text.Trim, V.Local.sFilter)
F.Data.DataView.Create("Part", "dvPartSize", 22, V.Local.sFilter, "")
F.Intrinsic.Control.If(V.DataView.Part!dvPartSize.RowCount, >, 0)
	V.Local.sLxB.Set(V.DataView.Part!dvPartSize(0).SIZE!FieldValTrim)
F.Intrinsic.Control.Else
	V.Local.sLxB.Set("")
F.Intrinsic.Control.EndIf
F.Data.DataView.Close("Part", "dvPartSize")

F.Intrinsic.String.Split(V.Local.sLxB.UCase,"X",V.Local.sLxB)
F.Intrinsic.Control.If(V.Local.sLxB.UBound,>,0)
	V.Local.fLength.Set(V.Local.sLxB(0).float)
	V.Local.fBreadth.Set(V.Local.sLxB(1).float)
F.Intrinsic.Control.Else
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

F.Intrinsic.Math.Mult(V.Local.fLength,V.Local.fBreadth,V.Local.fArea)
F.Intrinsic.Control.If(V.Local.fArea,=,0)
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

V.Local.sUM.Set(V.Dictionary.UMDict![V.Local.sMaterial].Trim)
V.Local.fAreaFull.Set(V.DataView.Material!dvMaterial(V.DataView.Material!dvMaterial.RowCount--).Area!FieldValFloat)

F.Intrinsic.Control.BlockEvents
F.Intrinsic.Control.If(V.Local.sUM,=,"EA", "OR", V.Local.sUM, =, "SH")
	F.Intrinsic.Math.Div(V.Local.fArea,V.Local.fAreaFull,V.Local.fIssue)
F.Intrinsic.Control.ElseIf(V.Local.sUM,=,"SI", "OR", V.Local.sUM, =, "SQ")
	V.Local.fIssue.Set(V.Local.fArea)
F.Intrinsic.Control.ElseIf(V.Local.sUM,=,"SF")
	F.Intrinsic.Math.Div(V.Local.fArea,144,V.Local.fIssue)
F.Intrinsic.Control.ElseIf(V.Local.sUM,=,"SM")
	F.Intrinsic.Math.Mult(V.Local.fArea,0.00064516,V.Local.fIssue)
F.Intrinsic.Control.ElseIf(V.Local.sUM,=,"LB")
	V.Local.fIssue.Set(V.Local.fWeight)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(SetTotalMaterial, "Amount", V.Local.fIssue)
F.Intrinsic.Control.UnBlockEvents

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.ddlSerial_Click.End

Program.Sub.RecalculateIssues.Start
'recalculate drop/issue

F.Intrinsic.Control.Try

V.Local.sLot.Declare(String)
V.Local.sBin.Declare(String)
V.Local.sMaterial.Declare(String)
V.Local.i.Declare(Long)
V.Local.fGssIssue.Declare(Float)
V.Local.fMult.Declare(Float)
V.Local.sSql.Declare(String)
V.Local.fDifF.Declare(Float)
V.Local.sSerial.Declare(String)
V.Local.sFilter.Declare(String)
V.Local.fTemp.Declare(Float)
V.Local.fTemp2.Declare(Float)
V.Local.sLoc.Declare(String)
V.Local.sHeat.Declare(String)
V.Local.fFinalIssue.Declare(Float)
V.Local.fFinalDrop.Declare(Float)
V.Local.sTotalSheets.Declare(String)

V.Local.sBin.Set(V.Screen.FormImport!ddlBin.text)
V.Local.sHeat.Set(V.Screen.FormImport!ddlHeat.text)
V.Local.sLot.Set(V.Screen.FormImport!ddlLot.Text)
V.Local.sSerial.Set(V.Screen.FormImport!ddlSerial.Text)
V.Local.sMaterial.Set(V.Screen.FormImport!txtMaterial.text)
V.Local.sLoc.Set(V.Screen.FormImport!txtLocation.text)

F.Intrinsic.Control.If(V.DataView.dtWorkOrders!dvWorkOrder.RowCount--)
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf
F.Intrinsic.String.Build("NESTID = '{0}'",V.DataView.dtWorkOrders!dvWorkOrder(0).NESTID!FieldValTrim,V.Local.sFilter)

F.Data.DataView.SetValue("dtWorkOrders","dvWorkOrder",-1,"Serial",V.Local.sSerial.Trim)
F.Data.DataView.SetValue("dtWorkOrders","dvWorkOrder",-1,"Loc",V.local.sLoc.Trim)
F.Data.DataView.SetValue("dtWorkOrders","dvWorkOrder",-1,"bin",V.Local.sBin.Trim)
F.Data.DataView.SetValue("dtWorkOrders","dvWorkOrder",-1,"Heat",V.Local.sHeat.Trim)
F.Data.DataView.SetValue("dtWorkOrders","dvWorkOrder",-1,"Lot",V.Local.sLot)
F.Data.DataView.SetValue("dtWorkOrders","dvWorkOrder",-1,"Loc",V.local.sLoc.Trim)

F.Intrinsic.Control.If(V.DataTable.Drop.Rowcount--,<>,-1)
	F.Data.DataTable.SetValue("Drop",-1,"Heat",V.Local.sHeat.Trim)
	F.Data.DataView.SetValue("Drops","dvDrops",-1,"Heat",V.Local.sHeat.Trim)
	
	F.Data.DataView.SetValue("Drops","dvDrops",-1,"Loc",V.local.sLoc.Trim)
	F.Data.DataTable.SetValue("Drop",-1,"Loc",V.local.sLoc.Trim)
F.Intrinsic.Control.EndIf

F.Data.DataTable.SetValueFormat("dtWorkOrders", -1, "ISSUE", "GSS_ISSUE", "0.00##")

F.Data.DataTable.SetValue("Drop",-1,"Heat",V.Local.sHeat)
F.Data.DataView.SetValue("Drops","dvDrops",-1,"Heat",V.Local.sHeat)

F.Data.DataTable.SetValue("Drop",-1,"Lot",V.Local.sLot)
F.Data.DataView.SetValue("Drops","dvDrops",-1,"Lot",V.Local.sLot)

F.Data.DataTable.SetValue("Drop",-1,"Bin",V.Local.sBin)
F.Data.DataView.SetValue("Drops","dvDrops",-1,"Bin",V.Local.sBin)

F.Data.DataView.SetValue("Drops","dvDrops",-1,"Loc",V.local.sLoc.Trim)
F.Data.DataTable.SetValue("Drop",-1,"Loc",V.local.sLoc.Trim)

F.Data.DataView.SetValue("Material","dvMaterial",-1,"Loc",V.local.sLoc.Trim)

V.Local.sTotalSheets.Set(V.Screen.FormImport!txtTotalSheets.TEXT)
F.Data.DataView.SetValue("Material", "dvMaterial", -1, "ISSUE", 0)
F.Data.DataView.SetValue("Material", "dvMaterial", 0, "ISSUE", V.Local.sTotalSheets)

F.Data.DataTable.Compute("Drops","Sum(Drop_Issue)",V.Local.sFilter,V.Local.fFinalDrop)
F.Data.DataTable.Compute("dtWorkOrders","Sum(Issue)",V.Local.sFilter,V.Local.fFinalIssue)

'modified calc
V.Local.fTemp.Set(V.Local.fFinalIssue)
F.Intrinsic.Math.Sub(V.Local.sTotalSheets.float,V.Local.fFinalDrop,V.Local.fDiff)

'if we have material to issue, figure out the ratio total non drop material to issued material (percentage of waste)
F.Intrinsic.Control.If(V.Local.fTemp,>,0)
	F.Intrinsic.Math.Div(V.Local.fDiff,V.Local.fTemp,V.Local.fMult)
F.Intrinsic.Control.Else
	V.Local.fMult.Set(0)
F.Intrinsic.Control.EndIf

'now use that ratio to apply the waste to each work order
F.Intrinsic.Control.For(V.Local.i,0,V.DataView.dtWorkOrders!dvWorkOrder.RowCount--,1)
	F.Intrinsic.Math.Mult(V.DataView.dtWorkOrders!dvWorkOrder(V.Local.i).issue!FieldValFloat,V.Local.fMult,V.Local.fTemp2)
	F.Intrinsic.Math.Round(V.Local.fTemp2,V.Global.iDecimals,V.Local.fTemp2)
	F.Data.DataView.SetValue("dtWorkOrders","dvWorkOrder",V.Local.i,"Gss_Issue",V.Local.fTemp2)
F.Intrinsic.Control.Next(V.Local.i)

'get the new total of issued material
F.Data.DataTable.Compute("Drops","Sum(Drop_Issue)",V.Local.sFilter,V.Local.fFinalDrop)
F.Data.DataTable.Compute("dtWorkOrders","Sum(Gss_Issue)",V.Local.sFilter,V.Local.fFinalIssue)
F.Intrinsic.Math.Add(V.Local.fFinalDrop,V.Local.fFinalIssue,V.Local.fTemp)

'add any excess to the last job in the list
F.Intrinsic.Math.Sub(V.Local.sTotalSheets.Float,V.Local.fTemp,V.Local.fTemp)
F.Intrinsic.Control.If(V.Local.fTemp,!=,0)
	F.Intrinsic.Math.Add(V.DataView.dtWorkOrders!dvWorkOrder(V.dataview.dtWorkOrders!dvWorkOrder.RowCount--).Gss_Issue!FieldValFloat,V.Local.fTemp,V.Local.fTemp)
	F.Intrinsic.Math.Round(V.Local.fTemp,V.Global.iDecimals,V.Local.fTemp)
	F.Data.DataView.SetValue("dtWorkOrders","dvWorkOrder",V.dataview.dtWorkOrders!dvWorkOrder.RowCount--,"Gss_Issue",V.Local.fTemp)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.RecalculateIssues.End

Program.Sub.GetData.Start
'get base datatables

F.Intrinsic.Control.Try

V.Local.sSql.Declare(String)
V.Local.sFilter.Declare(String)
V.Local.iCounter.Declare(Long)

V.Local.sSql.Set("select RTRIM(NESTID) NESTID, RTRIM(UPPER(MATERIAL)) MATERIAL, SUM(QTY) QTY, SUM(ISSUE) ISSUE, RTRIM(FLEXID) FLEXID, AREA, RTRIM(PROFILE) PROFILE, RTRIM(UM) UM, RTRIM(NEXT_FLEXID) NEXT_FLEXID, RTRIM(LOC) LOC, SHEET_AREA, SHEET_WEIGHT from GCG_4980_MAT Where Closed <> 'Y' and READY_FLAG = 'Y' group by NESTID, MATERIAL, FLEXID, AREA, UM, NEXT_FLEXID, LOC, SHEET_AREA, SHEET_WEIGHT, PROFILE Order by NestId")
F.Data.DataTable.CreateFromSQL("Material","Con",V.Local.sSql,True)
F.Data.DataTable.AddExpressionColumn("Material", "SHEETS", "Float", "IIF([AREA] = 0, 0, [QTY] / [AREA])")

'factor will be the multiplier to get square inches (or pounds)
F.Data.DataTable.AddExpressionColumn("Material", "FACTOR", "Float", "IIF([UM] = 'SI' or [UM] = 'SQ' or [UM] = 'LB', 1, IIF([UM] = 'EA' or [UM] = 'SH', [AREA], IIF([UM] = 'SF', 144, IIF([UM] = 'SM', 0.00064516, 0))))")

V.Local.sSql.Set("Select * From GCG_4980_WO Where Closed <> 'Y' and READY_FLAG = 'Y' Order by NestId,ID")
F.Data.DataTable.CreateFromSQL("dtWorkOrders","Con",V.Local.sSql,True)
F.Data.DataTable.AddExpressionColumn("dtWorkOrders", "Excess", "Float", "[GSS_ISSUE] - [ISSUE]")
F.Data.DataTable.AddColumn("dtWorkOrders", "Employee_Name", "String")
F.Data.DataTable.AddColumn("dtWorkOrders", "Processed", "Boolean", False)
F.Data.DataTable.AddColumn("dtWorkOrders", "CLOSE_LABOR_SEQUENCE", "Boolean", False)
F.Data.DataTable.AddColumn("dtWorkOrders", "CLOSE_MATERIAL_SEQUENCE", "Boolean", False)
F.Data.DataTable.AddColumn("dtWorkOrders", "ESTIMATED_MATERIAL", "Float")
F.Data.DataTable.AddColumn("dtWorkOrders", "ESTIMATED_PIECES", "Float")
F.Data.DataTable.AddColumn("dtWorkOrders", "ESTIMATED_TIME", "Float")
F.Data.DataTable.AddColumn("dtWorkOrders", "ACTUAL_MATERIAL", "Float")
F.Data.DataTable.AddColumn("dtWorkOrders", "ACTUAL_PIECES", "Float")
F.Data.DataTable.AddColumn("dtWorkOrders", "ACTUAL_TIME", "Float")
F.Data.DataTable.AddColumn("dtWorkOrders", "RELEASED", "String", "")
F.Data.DataTable.AddColumn("dtWorkOrders", "DESCRIPTION", "String", "")
F.Data.DataTable.AddColumn("dtWorkOrders", "PART", "String", "")

F.Data.DataTable.AddExpressionColumn("dtWorkOrders", "NESTID_TRIMMED", "String", "Trim(IsNull([NESTID], ''))")
F.Data.DataTable.AddExpressionColumn("dtWorkOrders", "JOB_TRIMMED", "String", "Trim(IsNull([JOB], ''))")
F.Data.DataTable.AddExpressionColumn("dtWorkOrders", "SUFFIX_TRIMMED", "String", "Trim(IsNull([SUFFIX], ''))")
F.Data.DataTable.AddExpressionColumn("dtWorkOrders", "SEQUENCE_TRIMMED", "String", "Trim(IsNull([SEQUENCE], ''))")
F.Data.DataTable.AddExpressionColumn("dtWorkOrders", "MATERIAL_SEQUENCE_TRIMMED", "String", "Trim(IsNull([MSEQUENCE], ''))")
F.Data.DataTable.AddExpressionColumn("dtWorkOrders", "JOB_SUFFIX_SEQUENCE", "String", "[JOB_TRIMMED] + '-' + [SUFFIX_TRIMMED] + '-' + [SEQUENCE_TRIMMED]")
F.Data.DataTable.AddExpressionColumn("dtWorkOrders", "MATERIAL_JOB_SUFFIX_SEQUENCE", "String", "[JOB_TRIMMED] + '-' + [SUFFIX_TRIMMED] + '-' + [MATERIAL_SEQUENCE_TRIMMED]")
F.Data.DataTable.AddExpressionColumn("dtWorkOrders", "JOB_SUFFIX", "String", "[JOB_TRIMMED] + '-' + [SUFFIX_TRIMMED]")

F.Data.Dictionary.CreateFromSQL("dictEmployees", "Con", "select EMPLOYEE, NAME from V_EMPLOYEE_MSTR")
F.Data.Dictionary.SetDefaultReturn("dictEmployees", "")
F.Data.DataTable.FillFromDictionary("dtWorkOrders", "dictEmployees", "EMPLOYEE", "Employee_Name")
F.Data.Dictionary.Close("dictEmployees")

'load material sequences
'this could be much more effiecient
F.Intrinsic.Control.For(V.Local.iCounter, 0, V.DataTable.dtWorkOrders.RowCount--, 1)
	F.Intrinsic.String.Build("SELECT TOP 1 SEQ FROM V_JOB_OPERATIONS WHERE JOB = '{0}' AND SUFFIX = '{1}' and SEQ < '{2}' AND LMO = 'M' ORDER BY SEQ DESC", V.DataTable.dtWorkOrders(V.Local.iCounter).Job!FieldValTrim, V.DataTable.dtWorkOrders(V.Local.iCounter).Suffix!FieldValTrim, V.DataTable.dtWorkOrders(V.Local.iCounter).SEQUENCE!FieldValTrim, V.Local.sSql)
	F.ODBC.Connection!Con.OpenLocalRecordsetRO("rstSeq",V.Local.sSQL)
	F.Intrinsic.Control.If(V.ODBC.Con!rstSEQ.EOF,=,False)
		F.Data.DataTable.SetValue("dtWorkOrders", V.Local.iCounter, "MSequence", V.ODBC.Con!rstSEQ.FieldValTrim!SEQ)
	F.Intrinsic.Control.EndIf
	F.ODBC.Con!rstSeq.Close
F.Intrinsic.Control.Next(V.Local.iCounter)

F.Intrinsic.Control.If(V.Global.bLoadExtras)

	'load estimates
	F.Data.DataTable.CreateFromSQL("dtEstimates", "Con", "select RTRIM(JOB) + '-' + RTRIM(SUFFIX) + '-' + RTRIM(SEQ) JSS, UNITS_OPEN, UNITS_COMPLETE, HOURS_ESTIMATED, HOURS_ACTUAL from V_JOB_OPERATIONS where LMO in ('L', 'M') and SEQ < '900000' and FLAG_CLOSED <> 'Y' and JOB+SUFFIX in (select JOB+SUFFIX from GCG_4980_WO) order by JSS")
	
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtEstimates", "JSS", "UNITS_OPEN")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", 0)
	F.Data.DataTable.FillFromDictionary("dtWorkOrders", "dictTemp", "JOB_SUFFIX_SEQUENCE", "ESTIMATED_PIECES")
	F.Data.Dictionary.Close("dictTemp")
	
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtEstimates", "JSS", "UNITS_COMPLETE")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", 0)
	F.Data.DataTable.FillFromDictionary("dtWorkOrders", "dictTemp", "JOB_SUFFIX_SEQUENCE", "ACTUAL_PIECES")
	F.Data.Dictionary.Close("dictTemp")
	
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtEstimates", "JSS", "HOURS_ESTIMATED")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", 0)
	F.Data.DataTable.FillFromDictionary("dtWorkOrders", "dictTemp", "JOB_SUFFIX_SEQUENCE", "ESTIMATED_TIME")
	F.Data.DataTable.FillFromDictionary("dtWorkOrders", "dictTemp", "MATERIAL_JOB_SUFFIX_SEQUENCE", "ESTIMATED_MATERIAL")
	F.Data.Dictionary.Close("dictTemp")
	
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtEstimates", "JSS", "HOURS_ACTUAL")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", 0)
	F.Data.DataTable.FillFromDictionary("dtWorkOrders", "dictTemp", "JOB_SUFFIX_SEQUENCE", "ACTUAL_TIME")
	F.Data.DataTable.FillFromDictionary("dtWorkOrders", "dictTemp", "MATERIAL_JOB_SUFFIX_SEQUENCE", "ACTUAL_MATERIAL")
	F.Data.Dictionary.Close("dictTemp")
	
	F.Data.DataTable.Close("dtEstimates")
	
	'load FG part, description, header fields
	F.Data.DataTable.CreateFromSQL("dtJobData", "Con", "select RTRIM(JOB) + '-' + RTRIM(SUFFIX) JS, RTRIM(PART) PART, RTRIM(DESCRIPTION) DESCRIPTION, RTRIM(IF(IsNull(FLAG_WO_RELEASED, 'N') = '', 'N', IsNull(FLAG_WO_RELEASED, 'N'))) FLAG_WO_RELEASED from V_JOB_HEADER where DATE_CLOSED = '1900-01-01' and JOB+SUFFIX in (select JOB+SUFFIX from GCG_4980_WO)")
	
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtJobData", "JS", "PART")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
	F.Data.DataTable.FillFromDictionary("dtWorkOrders", "dictTemp", "JOB_SUFFIX", "PART")
	F.Data.Dictionary.Close("dictTemp")
	
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtJobData", "JS", "DESCRIPTION")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
	F.Data.DataTable.FillFromDictionary("dtWorkOrders", "dictTemp", "JOB_SUFFIX", "DESCRIPTION")
	F.Data.Dictionary.Close("dictTemp")
	
	F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtJobData", "JS", "FLAG_WO_RELEASED")
	F.Data.Dictionary.SetDefaultReturn("dictTemp", "N")
	F.Data.DataTable.FillFromDictionary("dtWorkOrders", "dictTemp", "JOB_SUFFIX", "RELEASED")
	F.Data.Dictionary.Close("dictTemp")
	
	F.Data.DataTable.Close("dtJobData")

F.Intrinsic.Control.EndIf

'extra calculated columns
F.Data.DataTable.AddExpressionColumn("dtWorkOrders", "ESTIMATED_MATERIAL_PER_PIECE", "Float", "IIF([ESTIMATED_PIECES] = 0, 0, [ESTIMATED_MATERIAL] / [ESTIMATED_PIECES])")
F.Data.DataTable.AddExpressionColumn("dtWorkOrders", "ESTIMATED_TIME_PER_PIECE", "Float", "IIF([ESTIMATED_PIECES] = 0, 0, [ESTIMATED_TIME] / [ESTIMATED_PIECES])")
F.Data.DataTable.AddExpressionColumn("dtWorkOrders", "ESTIMATED_MATERIAL_THIS_RUN", "Float", "[GOOD_PC] * [ESTIMATED_MATERIAL_PER_PIECE]")
F.Data.DataTable.AddExpressionColumn("dtWorkOrders", "ESTIMATED_TIME_THIS_RUN", "Float", "[GOOD_PC] * [ESTIMATED_TIME_PER_PIECE]")

'scrap codes
F.Data.DataTable.AddColumn("dtWorkOrders", "SCRAP_CODE", "String", "")
F.Data.DataTable.AddColumn("dtWorkOrders", "SCRAP_CODE_DISPLAY", "String", "")

V.Local.sSql.Set("Select * From GCG_4980_DROP Where Closed <> 'Y' Order by NestId, ID")
F.Data.DataTable.CreateFromSQL("Drops","Con", V.Local.sSql,True)

V.Local.sSql.Set("Select * From GCG_4980_DROP Where NestId = ' '")
F.Data.DataTable.CreateFromSQL("Drop","Con",V.Local.sSql,True)

V.Local.sFilter.Set("NestID = ''")
F.Data.DataView.Create("Material","dvMaterial",22,V.Local.sFilter,"NestID")
F.Data.DataView.Create("dtWorkOrders","dvWorkOrder",22,V.Local.sFilter,"NestID")
F.Data.DataView.Create("Drops","dvDrops",22,V.Local.sFilter,"NestID")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.GetData.End

Program.Sub.SetGridViewProperties.Start
F.Intrinsic.Control.Try

F.Intrinsic.Control.If(V.DataView.dtWorkOrders!dvWorkOrder.Exists, =, False)
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

'work order grid
GUI.FormImport.gsgcWorkOrders.AddGridviewFromDataview("gvWorkOrders", "dtWorkOrders", "dvWorkOrder")
GUI.FormImport.gsgcWorkOrders.SetGridViewProperty("gvWorkOrders","AllowSort","False")
GUI.FormImport.gsgcWorkOrders.SetGridViewProperty("gvWorkOrders","AllowFilter","False")

GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","ID","Visible","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","Material","Visible","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","Lot","Visible","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","Start_Time","Visible","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","End_Time","Visible","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","Post_Date","Visible","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","Post_Time","Visible","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","Job","Visible","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","Suffix","Visible","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","Sequence","Visible","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","MSEQUENCE","Visible","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","Bin","Visible","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","Serial","Visible","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","Heat","Visible","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","PROFILE","Visible","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","NEXT_FLEXID","Visible","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","Closed","Visible","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","FlexID","Visible","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","Ready_Flag","Visible","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","INDIRECT","Visible","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","PROCESSED","Visible","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","NESTID_TRIMMED","Visible","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","JOB_TRIMMED","Visible","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","SUFFIX_TRIMMED","Visible","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","SEQUENCE_TRIMMED","Visible","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","MATERIAL_SEQUENCE_TRIMMED","Visible","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","JOB_SUFFIX_SEQUENCE","Visible","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","MATERIAL_JOB_SUFFIX_SEQUENCE","Visible","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","ESTIMATED_MATERIAL","Visible","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","ESTIMATED_PIECES","Visible","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","ESTIMATED_TIME","Visible","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","ACTUAL_MATERIAL","Visible","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","ACTUAL_PIECES","Visible","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","ACTUAL_TIME","Visible","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","WC","Visible","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","NestID","Visible","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","LOC","Visible","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","Qty","Visible","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","Excess","Visible","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","Employee","Visible","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "CLOSE_MATERIAL_SEQUENCE", "Visible", "False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","CLOSE_LABOR_SEQUENCE","Visible","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","JOB_SUFFIX","Visible","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","PART","Visible","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","DESCRIPTION","Visible","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","RUN_COUNT","Visible","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","Employee_Name","Visible","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","GOOD_PC","Visible","True")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","BAD_PC","Visible","True")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","FILE","Visible","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","ESTIMATED_MATERIAL_PER_PIECE","Visible","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","ESTIMATED_TIME_PER_PIECE","Visible","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","ESTIMATED_MATERIAL_THIS_RUN","Visible","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","ESTIMATED_TIME_THIS_RUN","Visible","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","SCRAP_CODE_DISPLAY","Visible","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","SCRAP_CODE","Visible","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","PART_AREA","Visible","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","PART_WEIGHT","Visible","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","RELEASED","Visible","False")

GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","ID","AllowShowHide","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","Start_Time","AllowShowHide","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","End_Time","AllowShowHide","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","Post_Date","AllowShowHide","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","Post_Time","AllowShowHide","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","PROFILE","AllowShowHide","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","NEXT_FLEXID","AllowShowHide","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","NESTID_TRIMMED","AllowShowHide","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","JOB_TRIMMED","AllowShowHide","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","SUFFIX_TRIMMED","AllowShowHide","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","SEQUENCE_TRIMMED","AllowShowHide","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","MATERIAL_SEQUENCE_TRIMMED","AllowShowHide","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","JOB_SUFFIX_SEQUENCE","AllowShowHide","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","MATERIAL_JOB_SUFFIX_SEQUENCE","AllowShowHide","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","NestID","AllowShowHide","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","JOB_SUFFIX","AllowShowHide","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","JOB","AllowShowHide","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","SUFFIX","AllowShowHide","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","SEQUENCE","AllowShowHide","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","PROCESSED","AllowShowHide","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","READY_FLAG","AllowShowHide","False")

GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","WC","HeaderBackColor","#d3d3d3")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","NestID","HeaderBackColor","#d3d3d3")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","LOC","HeaderBackColor","#d3d3d3")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","Issue","HeaderBackColor","#d3d3d3")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","Gss_Issue","HeaderBackColor","#d3d3d3")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","Excess","HeaderBackColor","#d3d3d3")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","Qty","HeaderBackColor","#d3d3d3")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","TJob","HeaderBackColor","#d3d3d3")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","Employee","HeaderBackColor","#d3d3d3")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","Employee_Name","HeaderBackColor","#d3d3d3")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","TIME","HeaderBackColor","#d3d3d3")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","GOOD_PC","HeaderBackColor","#d3d3d3")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","BAD_PC","HeaderBackColor","#d3d3d3")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "CLOSE_MATERIAL_SEQUENCE", "HeaderBackColor", "#d3d3d3")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "CLOSE_LABOR_SEQUENCE", "HeaderBackColor", "#d3d3d3")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "LOT", "HeaderBackColor", "#d3d3d3")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "BIN", "HeaderBackColor", "#d3d3d3")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "HEAT", "HeaderBackColor", "#d3d3d3")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "SERIAL", "HeaderBackColor", "#d3d3d3")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "ESTIMATED_MATERIAL", "HeaderBackColor", "#d3d3d3")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "ESTIMATED_PIECES", "HeaderBackColor", "#d3d3d3")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "ESTIMATED_TIME", "HeaderBackColor", "#d3d3d3")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "ACTUAL_MATERIAL", "HeaderBackColor", "#d3d3d3")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "ACTUAL_PIECES", "HeaderBackColor", "#d3d3d3")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "ACTUAL_TIME", "HeaderBackColor", "#d3d3d3")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "PART", "HeaderBackColor", "#d3d3d3")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "DESCRIPTION", "HeaderBackColor", "#d3d3d3")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "RUN_COUNT", "HeaderBackColor", "#d3d3d3")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "FILE", "HeaderBackColor", "#d3d3d3")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "ESTIMATED_MATERIAL_PER_PIECE", "HeaderBackColor", "#d3d3d3")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "ESTIMATED_TIME_PER_PIECE", "HeaderBackColor", "#d3d3d3")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "ESTIMATED_MATERIAL_THIS_RUN", "HeaderBackColor", "#d3d3d3")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "ESTIMATED_TIME_THIS_RUN", "HeaderBackColor", "#d3d3d3")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "SCRAP_CODE_DISPLAY", "HeaderBackColor", "#d3d3d3")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "MSEQUENCE", "HeaderBackColor", "#d3d3d3")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","PART_AREA","HeaderBackColor","#d3d3d3")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","PART_WEIGHT","HeaderBackColor","#d3d3d3")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","RELEASED","HeaderBackColor","#d3d3d3")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","FLEXID","HeaderBackColor","#d3d3d3")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","INDIRECT","HeaderBackColor","#d3d3d3")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","MATERIAL","HeaderBackColor","#d3d3d3")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","SCRAP_CODE","HeaderBackColor","#d3d3d3")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","CLOSED","HeaderBackColor","#d3d3d3")

GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","WC","Caption","WC")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","NestID","Caption","Nest ID")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","LOC","Caption","Loc")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","Gss_Issue","Caption","GSS Issue")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","Employee_Name","Caption","Employee Name")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","GOOD_PC","Caption","Good Pieces")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","TIME","Caption","Time (Hours)")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","TJob","Caption","Job")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","Issue","Caption","Issue")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","Employee","Caption","Employee")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","BAD_PC","Caption","Bad Pieces")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "CLOSE_MATERIAL_SEQUENCE", "Caption", "Close Mat.")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "CLOSE_LABOR_SEQUENCE", "Caption", "Close Labor")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "ESTIMATED_MATERIAL", "Caption", "Total Est. Mat.")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "ESTIMATED_PIECES", "Caption", "Total Est. Pieces")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "ESTIMATED_TIME", "Caption", "Total Est. Hours")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "ACTUAL_MATERIAL", "Caption", "Current Act. Mat")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "ACTUAL_PIECES", "Caption", "Current Act. Pieces")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "ACTUAL_TIME", "Caption", "Current Act. Hours")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "LOT", "Caption", "Lot")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "BIN", "Caption", "Bin")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "HEAT", "Caption", "Heat")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "SERIAL", "Caption", "Serial")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "WC", "Caption", "WC")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "PART", "Caption", "Part")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "DESCRIPTION", "Caption", "Description")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "RUN_COUNT", "Caption", "Run Count")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "FILE", "Caption", "File")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "Excess", "Caption", "Waste")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "ESTIMATED_MATERIAL_PER_PIECE", "Caption", "Est. Mat/Piece")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "ESTIMATED_TIME_PER_PIECE", "Caption", "Est. Hours/Piece")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "ESTIMATED_MATERIAL_THIS_RUN", "Caption", "Est. Mat.")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "ESTIMATED_TIME_THIS_RUN", "Caption", "Est. Hours")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "SCRAP_CODE_DISPLAY", "Caption", "Scrap Reason")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "MSEQUENCE", "Caption", "Mat. Sequence")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","PART_AREA","Caption","Part Area")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","PART_WEIGHT","Caption","Part Weight")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","RELEASED","Caption","Released")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","FLEXID","Caption","Flex ID")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","INDIRECT","Caption","Indirect")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","MATERIAL","Caption","Material")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","SCRAP_CODE","Caption","Scrap Code")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","CLOSED","Caption","Closed")

GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","TIME","ReadOnly","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","Excess","ReadOnly","True")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","Issue","ReadOnly", True )
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","Gss_Issue","ReadOnly", False)
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","TJob","ReadOnly","True")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","Qty","ReadOnly","True")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","Employee","ReadOnly","True")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","Employee_Name","ReadOnly","True")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","GOOD_PC","ReadOnly","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","BAD_PC","ReadOnly","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "CLOSE_MATERIAL_SEQUENCE", "ReadOnly", "True")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "CLOSE_LABOR_SEQUENCE", "ReadOnly", "True")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "RUN_COUNT", "ReadOnly", "True")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "FILE", "ReadOnly", "True")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "ESTIMATED_MATERIAL_PER_PIECE", "ReadOnly", "True")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "ESTIMATED_TIME_PER_PIECE", "ReadOnly", "True")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "ESTIMATED_MATERIAL_THIS_RUN", "ReadOnly", "True")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "ESTIMATED_TIME_THIS_RUN", "ReadOnly", "True")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "SCRAP_CODE_DISPLAY", "ReadOnly", "False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "MSEQUENCE", "ReadOnly", "True")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "PART_AREA", "ReadOnly", "True")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "PART_WEIGHT", "ReadOnly", "True")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "RELEASED", "ReadOnly", "True")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "FLEXID", "ReadOnly", "True")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "INDIRECT", "ReadOnly", "True")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "MATERIAL", "ReadOnly", "True")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "SCRAP_CODE", "ReadOnly", "True")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "CLOSED", "ReadOnly", "True")

GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","GOOD_PC","AllowEdit","True")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","Issue","AllowEdit", False)
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","Gss_Issue","AllowEdit", True)
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","TJob","AllowEdit","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","Qty","AllowEdit","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","Employee","AllowEdit","False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "CLOSE_MATERIAL_SEQUENCE", "AllowEdit", "False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders","BAD_PC","AllowEdit","True")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "CLOSE_LABOR_SEQUENCE", "AllowEdit", "False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "TIME", "AllowEdit", "True")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "RUN_COUNT", "AllowEdit", "False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "FILE", "AllowEdit", "False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "ESTIMATED_MATERIAL_PER_PIECE", "AllowEdit", "False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "ESTIMATED_TIME_PER_PIECE", "AllowEdit", "False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "ESTIMATED_MATERIAL_THIS_RUN", "AllowEdit", "False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "ESTIMATED_TIME_THIS_RUN", "AllowEdit", "False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "SCRAP_CODE_DISPLAY", "AllowEdit", "True")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "MSEQUENCE", "AllowEdit", "False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "PART_AREA", "AllowEdit", "False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "PART_WEIGHT", "AllowEdit", "False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "RELEASED", "AllowEdit", "False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "FLEXID", "AllowEdit", "False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "INDIRECT", "AllowEdit", "False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "MATERIAL", "AllowEdit", "False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "SCRAP_CODE", "AllowEdit", "False")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "CLOSED", "AllowEdit", "False")

GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "Excess", "DisplayCustomNumeric", "0.00##")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "Time", "DisplayCustomNumeric", "0.00##")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "Issue", "DisplayCustomNumeric", "0.00##")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "Gss_Issue", "DisplayCustomNumeric", "0.00##")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "GOOD_PC", "DisplayCustomNumeric", "0.##")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "BAD_PC", "DisplayCustomNumeric", "0.##")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "ESTIMATED_MATERIAL", "DisplayCustomNumeric", "0.00##")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "ESTIMATED_PIECES", "DisplayCustomNumeric", "0.##")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "ESTIMATED_TIME", "DisplayCustomNumeric", "0.00##")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "ACTUAL_MATERIAL", "DisplayCustomNumeric", "0.00##")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "ACTUAL_PIECES", "DisplayCustomNumeric", "0.##")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "ACTUAL_TIME", "DisplayCustomNumeric", "0.00##")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "RUN_COUNT", "DisplayCustomNumeric", "0")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "ESTIMATED_MATERIAL_PER_PIECE", "DisplayCustomNumeric", "0.00##")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "ESTIMATED_TIME_PER_PIECE", "DisplayCustomNumeric", "0.00##")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "ESTIMATED_MATERIAL_THIS_RUN", "DisplayCustomNumeric", "0.00##")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "ESTIMATED_TIME_THIS_RUN", "DisplayCustomNumeric", "0.00##")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "PART_AREA", "DisplayCustomNumeric", "0.00##")
GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "PART_WEIGHT", "DisplayCustomNumeric", "0.00##")

GUI.FormImport.gsgcWorkOrders.AddSummaryItem("gvWorkOrders", "Excess", "Excess", "Sum", "", "", "0.00")
GUI.FormImport.gsgcWorkOrders.AddSummaryItem("gvWorkOrders", "Time", "Time", "Sum", "", "", "0.00")
GUI.FormImport.gsgcWorkOrders.AddSummaryItem("gvWorkOrders", "Issue", "Issue", "Sum", "", "", "0.00")
GUI.FormImport.gsgcWorkOrders.AddSummaryItem("gvWorkOrders", "Gss_Issue", "Gss_Issue", "Sum", "", "", "0.00")
GUI.FormImport.gsgcWorkOrders.AddSummaryItem("gvWorkOrders", "GOOD_PC", "GOOD_PC", "Sum", "", "", "0.##")
GUI.FormImport.gsgcWorkOrders.AddSummaryItem("gvWorkOrders", "BAD_PC", "BAD_PC", "Sum", "", "", "0.##")
GUI.FormImport.gsgcWorkOrders.AddSummaryItem("gvWorkOrders", "ESTIMATED_MATERIAL", "ESTIMATED_MATERIAL", "Sum", "", "", "0.00")
GUI.FormImport.gsgcWorkOrders.AddSummaryItem("gvWorkOrders", "ESTIMATED_PIECES", "ESTIMATED_PIECES", "Sum", "", "", "0.##")
GUI.FormImport.gsgcWorkOrders.AddSummaryItem("gvWorkOrders", "ESTIMATED_TIME", "ESTIMATED_TIME", "Sum", "", "", "0.00")
GUI.FormImport.gsgcWorkOrders.AddSummaryItem("gvWorkOrders", "ACTUAL_MATERIAL", "ACTUAL_MATERIAL", "Sum", "", "", "0.00")
GUI.FormImport.gsgcWorkOrders.AddSummaryItem("gvWorkOrders", "ACTUAL_PIECES", "ACTUAL_PIECES", "Sum", "", "", "0.##")
GUI.FormImport.gsgcWorkOrders.AddSummaryItem("gvWorkOrders", "ACTUAL_TIME", "ACTUAL_TIME", "Sum", "", "", "0.00")
GUI.FormImport.gsgcWorkOrders.AddSummaryItem("gvWorkOrders", "ESTIMATED_MATERIAL_THIS_RUN", "ESTIMATED_MATERIAL_THIS_RUN", "Sum", "", "", "0.00")
GUI.FormImport.gsgcWorkOrders.AddSummaryItem("gvWorkOrders", "ESTIMATED_TIME_THIS_RUN", "ESTIMATED_TIME_THIS_RUN", "Sum", "", "", "0.00")

F.Intrinsic.Control.CallSub(LoadScrapCodes)

GUI.FormImport.gsgcWorkOrders.MainView("gvWorkOrders")

'drop grid
GUI.FormImport.gsgcDrop.AddGridviewFromDatatable("gvDrops","Drop")

GUI.FormImport.gsgcDrop.SetGridviewProperty("gvDrops", "AllowColumnMoving", False)

GUI.FormImport.gsgcDrop.SetColumnProperty("gvDrops","NestID","Visible","False")
GUI.FormImport.gsgcDrop.SetColumnProperty("gvDrops","Qty","Visible","False")
GUI.FormImport.gsgcDrop.SetColumnProperty("gvDrops","LOC","Visible","False")
GUI.FormImport.gsgcDrop.SetColumnProperty("gvDrops","ID","Visible","False")
GUI.FormImport.gsgcDrop.SetColumnProperty("gvDrops","Closed","Visible","False")
GUI.FormImport.gsgcDrop.SetColumnProperty("gvDrops","FlexID","Visible","False")
GUI.FormImport.gsgcDrop.SetColumnProperty("gvDrops","Material","Visible","False")
GUI.FormImport.gsgcDrop.SetColumnProperty("gvDrops","Lot","Visible","False")
GUI.FormImport.gsgcDrop.SetColumnProperty("gvDrops","Bin","Visible","False")
GUI.FormImport.gsgcDrop.SetColumnProperty("gvDrops","Heat","Visible","False")
GUI.FormImport.gsgcDrop.SetColumnProperty("gvDrops","Next_FlexID","Visible","False")
GUI.FormImport.gsgcDrop.SetColumnProperty("gvDrops","UM","Visible","False")
GUI.FormImport.gsgcDrop.SetColumnProperty("gvDrops","Serial","Visible","True")
GUI.FormImport.gsgcDrop.SetColumnProperty("gvDrops","DROP_WEIGHT","Visible","False")
GUI.FormImport.gsgcDrop.SetColumnProperty("gvDrops","DROP_AREA","Visible","False")

GUI.FormImport.gsgcDrop.SetColumnProperty("gvDrops","Size","HeaderBackColor","#d3d3d3")
GUI.FormImport.gsgcDrop.SetColumnProperty("gvDrops","Drop_Issue","HeaderBackColor","#d3d3d3")
GUI.FormImport.gsgcDrop.SetColumnProperty("gvDrops","Serial","HeaderBackColor","#d3d3d3")
GUI.FormImport.gsgcDrop.SetColumnProperty("gvDrops","DROP_ID","HeaderBackColor","#d3d3d3")
GUI.FormImport.gsgcDrop.SetColumnProperty("gvDrops","DROP_WEIGHT","HeaderBackColor","#d3d3d3")
GUI.FormImport.gsgcDrop.SetColumnProperty("gvDrops","DROP_AREA","HeaderBackColor","#d3d3d3")

GUI.FormImport.gsgcDrop.SetColumnProperty("gvDrops","Drop_Issue","Caption","Drop Issue")
GUI.FormImport.gsgcDrop.SetColumnProperty("gvDrops","Serial","Caption","Serial")
GUI.FormImport.gsgcDrop.SetColumnProperty("gvDrops","DROP_ID","Caption","Drop ID")
GUI.FormImport.gsgcDrop.SetColumnProperty("gvDrops","DROP_WEIGHT","Caption","Drop Weight")
GUI.FormImport.gsgcDrop.SetColumnProperty("gvDrops","DROP_AREA","Caption","Drop Area")

GUI.FormImport.gsgcDrop.SetColumnProperty("gvDrops","Size","ReadOnly","True")
GUI.FormImport.gsgcDrop.SetColumnProperty("gvDrops","Size","AllowEdit","False")
GUI.FormImport.gsgcDrop.SetColumnProperty("gvDrops","Size","Caption","Size")

GUI.FormImport.gsgcDrop.SetColumnProperty("gvDrops","Serial","ReadOnly","True")
GUI.FormImport.gsgcDrop.SetColumnProperty("gvDrops","Serial","AllowEdit","False")

GUI.FormImport.gsgcDrop.SetColumnProperty("gvDrops","Drop_Issue","ReadOnly","True")
GUI.FormImport.gsgcDrop.SetColumnProperty("gvDrops","Drop_Issue","AllowEdit","False")

GUI.FormImport.gsgcDrop.SetColumnProperty("gvDrops","DROP_ID","ReadOnly","True")
GUI.FormImport.gsgcDrop.SetColumnProperty("gvDrops","DROP_ID","AllowEdit","False")

GUI.FormImport.gsgcDrop.SetColumnProperty("gvDrops","DROP_WEIGHT","ReadOnly","True")
GUI.FormImport.gsgcDrop.SetColumnProperty("gvDrops","DROP_WEIGHT","AllowEdit","False")

GUI.FormImport.gsgcDrop.SetColumnProperty("gvDrops","DROP_AREA","ReadOnly","True")
GUI.FormImport.gsgcDrop.SetColumnProperty("gvDrops","DROP_AREA","AllowEdit","False")

GUI.FormImport.gsgcDrop.SetColumnProperty("gvDrops", "DROP_WEIGHT", "DisplayCustomNumeric", "0.00##")
GUI.FormImport.gsgcDrop.SetColumnProperty("gvDrops", "DROP_AREA", "DisplayCustomNumeric", "0.00##")

GUI.FormImport.gsgcDrop.SetGridViewProperty("gvDrops","MultiSelect", False)
GUI.FormImport.gsgcDrop.SetGridViewProperty("gvDrops","AllowSort","False")
GUI.FormImport.gsgcDrop.SetGridViewProperty("gvDrops","AllowFilter","False")

GUI.FormImport.gsgcDrop.AddSummaryItem("gvDrops", "Drop_Issue", "Drop_Issue", "Sum", "Total: ", "", "")

GUI.FormImport.gsgcDrop.MainView("gvDrops")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.SetGridViewProperties.End

Program.Sub.LoadScrapCodes.Start
F.Intrinsic.Control.Try

V.Local.sRet.Declare(String)

F.ODBC.Connection!Con.ExecuteAndReturn("select RTRIM(CODE) + ' - ' + RTRIM(DESCR) from V_REJECTED_CODE", V.Local.sRet)
F.Intrinsic.String.Replace(V.Local.sRet, "#$#", "*!*", V.Local.sRet)
F.Intrinsic.String.Build("*!*{0}", V.Local.sRet, V.Local.sRet)
GUI.FormImport.gsgcWorkOrders.ColumnEdit("gvWorkOrders", "SCRAP_CODE_DISPLAY", "DropDownList", V.Local.sRet)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.LoadScrapCodes.End

Program.Sub.FlexScheduleNextWC.Start
F.Intrinsic.Control.Try

V.Local.sSQL.Declare(String)
V.Local.sScheduleNumber.Declare(String)
V.Local.iIncrement.Declare(Long, 0)
V.Local.sIncrement.Declare(String)
V.Local.iCount.Declare(Long)
V.Local.sJob.Declare(String)
V.Local.sSuffix.Declare(String)
V.Local.sSeq.Declare(String)
V.Local.sWorkCenter.Declare(String)
V.Local.sPart.Declare(String)
V.Local.sLine.Declare(String)
V.Local.sFiller.Declare(String)
V.Local.sFileName.Declare(String)
V.Local.sFiller2.Declare(String)
V.Local.sMJob.Declare(String)
V.Local.sMSuffix.Declare(String)
V.Local.sMSeq.Declare(String)
V.Local.sPrint.Declare(String)
V.Local.sWCWG.Declare(String)
V.Local.sLineCheck.Declare
V.Local.sLoc.Declare
V.Local.sNest.Declare(String)
V.Local.sContents.Declare(String)
V.Local.bRelease.Declare(Boolean, False)

'check release option
F.Intrinsic.Control.CallSub(GetSetting, "PROFILE", V.Global.sProfile, "TYPE", "IMPORT_OPTION", "SETTING", "RELEASE_WORK_ORDERS")
F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
	V.Local.bRelease.Set(V.Args.Setting)
F.Intrinsic.Control.EndIf

'uploading flex schedule
F.Intrinsic.Control.CallSub(GetNextFlexSchedule)
V.Local.sScheduleNumber.Set(V.Args.Schedule)

F.Intrinsic.Control.For(V.Local.iCount,0,V.DataView.dtWorkOrders!dvWorkOrder.RowCount--,1)
	'Add increment
	F.Intrinsic.Math.Add(V.Local.iIncrement.long,1,V.Local.iIncrement)
	F.Intrinsic.String.Format(V.Local.iIncrement,"000000",V.Local.sIncrement)

	V.Local.sJob.Set(V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).Job!FieldValTrim)
	V.Local.sSuffix.Set(V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).Suffix!FieldValTrim)
	V.Local.sMJob.Set(V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).Job!FieldValTrim)
	V.Local.sMSuffix.Set(V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).Suffix!FieldValTrim)
	V.Local.sLoc.Set(V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).Loc!FieldValTrim)
	V.Local.sMSeq.Set(V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).MSequence!FieldValTrim)
	
	V.Local.sWCWG.set(V.DataView.ProfDT!ProfChkVw(0).WORKCG!FieldValTrim)
	F.Intrinsic.Control.If(V.DataView.ProfDT!ProfChkVw(0).WC!FieldVal)
		F.Intrinsic.String.Build("SELECT SEQ, PART AS WC FROM V_JOB_OPERATIONS WHERE JOB = '{0}' AND SUFFIX = '{1}' AND LMO = 'L' and part = '{2}' and SEQ > '{3}' ORDER BY SEQ ASC",V.Local.sJob.Trim,V.Local.sSuffix.Trim,V.Local.sWCWG.Trim, V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).Sequence!FieldValTrim,V.Local.sSQL)
	F.Intrinsic.Control.Else
		F.Intrinsic.String.Build("SELECT SEQ, PART AS WC FROM V_JOB_OPERATIONS WHERE JOB = '{0}' AND SUFFIX = '{1}' and SEQ > '{3}' AND LMO = 'L' and (part in (Select distinct WORKCENTER from WORKGROUP_LINE where WORKGROUP = '{2}') or PART = '{2}') ORDER BY SEQ ASC",V.Local.sJob.Trim,V.Local.sSuffix.Trim,V.Local.sWCWG.Trim, V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).Sequence!FieldValTrim,V.Local.sSQL)
	F.Intrinsic.Control.EndIf
	
	'search for the work center, part and sequence
	F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL,V.Local.sWorkCenter)
	F.Intrinsic.String.Split(V.Local.sWorkCenter,"*!*",V.Local.sWorkCenter)
	F.Intrinsic.Control.If(V.Local.sWorkCenter.UBound,>,0)
		V.Local.sWorkCenter.RedimPreserve(0,1)
		V.Local.sSeq.Set(V.Local.sWorkCenter(0))
		V.Local.sWorkCenter.Set(V.Local.sWorkCenter(1))
	F.Intrinsic.Control.Else
		F.Intrinsic.Control.GoTo("SkipFlex")
	F.Intrinsic.Control.EndIf

	F.Data.DataTable.AddRow("6000", "SchedNumber", V.Local.sScheduleNumber, "SchedIncrement", V.Local.sIncrement, "MatWO", V.Local.sMJob, "MatSuff", V.Local.sMSuffix, "MatSeq", V.Local.sMSeq, "LabWO", V.Local.sJob, "LabSuff", V.Local.sSuffix, "LabSeq", V.Local.sSeq, "LabWorkCenter", V.Local.sWorkCenter, "LabWOPart", V.Local.sPart, "LabWOLoc", V.Local.sLoc, "SchedFromDate", V.Ambient.Date.FormatMMDDYY)
	
	F.Intrinsic.Control.If(V.Local.bRelease)
		F.Intrinsic.Control.If(V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).RELEASED!FieldValTrim, !=, "Y")
			F.Intrinsic.Control.CallSub(ReleaseWorkOrder, "Job", V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).JOB!FieldValTrim, "Suffix", V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).SUFFIX!FieldValTrim)
			F.Data.DataView.SetValue("dtWorkOrders", "dvWorkOrder", V.Local.iCount, "RELEASED", "Y")
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.Label("SkipFlex")
	V.Local.sWorkCenter.Redim(0,0)

F.Intrinsic.Control.Next(V.Local.iCount)

'upload
F.Intrinsic.Control.If(V.DataTable.6000.RowCount, >, 0)
	F.Intrinsic.Control.CallSub(6000Sync)
	
	'back up the flex schedule file (it remains after uploading)
	F.Intrinsic.String.Build("{0}\SCHED.txt", V.Caller.FilesDir, V.Local.sFileName)
	F.Intrinsic.File.File2String(V.Local.sFileName, V.Local.sContents)
	F.Intrinsic.String.StripCharacters(V.Screen.FormImport!cmboNest.Text.Trim, V.Local.sNest)
	F.Intrinsic.String.Build("FlexScheduleUpload_{0}_{1}.txt", V.Caller.User, V.Local.sNest, V.Local.sFileName)
	F.Intrinsic.Control.CallSub(BackUpFileString, "Type", "Flex Schedule Uploads", "Project", "4980", "Name", V.Local.sFileName, "Contents", V.Local.sContents)
	
	F.Intrinsic.Control.CallSub(UpdateLastScheduleNumber, "SCHEDULE", V.Local.sScheduleNumber)
	
	F.Intrinsic.String.Left(V.Local.sScheduleNumber,6,V.Local.sScheduleNumber)
	'adds the flexid to the table for later use
	F.Intrinsic.String.Build("UPDATE GCG_4980_WO SET NEXT_FLEXID = '{0}' WHERE NESTID = '{1}' ",V.Local.sScheduleNumber,V.DataView.dtWorkOrders!dvWorkOrder(V.DataView.dtWorkOrders!dvWorkOrder.RowCount--).NestID!FieldValTrim,V.Local.sSQL)
	F.Data.DataView.SetValue("dtWorkOrders","dvWorkOrder",-1,"NEXT_FLEXID",V.Local.sScheduleNumber)
	F.ODBC.Connection!Con.Execute(V.Local.sSQL)
	
	'adds the flexid to the table for later use
	F.Intrinsic.String.Build("UPDATE GCG_4980_DROP SET NEXT_FLEXID = '{0}' WHERE NESTID = '{1}' ",V.Local.sScheduleNumber,V.DataView.dtWorkOrders!dvWorkOrder(V.DataView.dtWorkOrders!dvWorkOrder.RowCount--).NestID!FieldValTrim,V.Local.sSQL)
	F.Data.DataView.SetValue("Drops","dvDrops",-1,"NEXT_FLEXID",V.Local.sScheduleNumber)
	F.Data.DataTable.SetValue("Drop",-1,"NEXT_FLEXID",V.Local.sScheduleNumber)
	F.ODBC.Connection!Con.Execute(V.Local.sSQL)
	
	F.Intrinsic.String.Build("UPDATE GCG_4980_MAT SET NEXT_FLEXID = '{0}' WHERE NESTID = '{1}' ",V.Local.sScheduleNumber,V.DataView.dtWorkOrders!dvWorkOrder(V.DataView.dtWorkOrders!dvWorkOrder.RowCount--).NestID!FieldValTrim,V.Local.sSQL)
	F.Data.DataView.SetValue("Material","dvMaterial",-1,"NEXT_FLEXID",V.Local.sScheduleNumber)
	F.ODBC.Connection!Con.Execute(V.Local.sSQL)
	
	'Print flex schedule
	F.Data.DataTable.AddRow("900300", "StartDate", "000000", "EndDate", "000000", "StartFSNum", V.Local.sScheduleNumber, "StartFSSuffix", "000", "EndFSNum", V.Local.sScheduleNumber, "EndFSSuffix", "000", "ShowMatl", "Y", "UseExtBarcode", "Y")
	F.Intrinsic.Control.CallSub(900300Sync)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.FlexScheduleNextWC.End

Program.Sub.FlexSchedule.Start
F.Intrinsic.Control.Try

V.Local.sSQL.Declare(String)
V.Local.sScheduleNumber.Declare(String)
V.Local.iIncrement.Declare(Long, 0)
V.Local.sIncrement.Declare(String)
V.Local.iCount.Declare(Long)
V.Local.sJob.Declare(String)
V.Local.sSuffix.Declare(String)
V.Local.sSeq.Declare(String)
V.Local.sWorkCenter.Declare(String)
V.Local.sPart.Declare(String)
V.Local.sLoc.Declare
V.Local.sLine.Declare(String)
V.Local.sFiller.Declare(String)
V.Local.sFileName.Declare(String)
V.Local.sFiller2.Declare(String)
V.Local.sMJob.Declare(String)
V.Local.sMSuffix.Declare(String)
V.Local.sMSeq.Declare(String)
V.Local.sPrint.Declare(String)
V.Local.sLineCheck.Declare
V.Local.bDone.Declare(Boolean, False)
V.Local.sRet.Declare(String)
V.Local.sNest.Declare(String)
V.Local.sContents.Declare(String)
V.Local.bRelease.Declare(Boolean, False)

'check release option
F.Intrinsic.Control.CallSub(GetSetting, "PROFILE", V.Global.sProfile, "TYPE", "IMPORT_OPTION", "SETTING", "RELEASE_WORK_ORDERS")
F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
	V.Local.bRelease.Set(V.Args.Setting)
F.Intrinsic.Control.EndIf

'uploading flex schedule
F.Intrinsic.Control.CallSub(GetNextFlexSchedule)
V.Local.sScheduleNumber.Set(V.Args.Schedule)

F.Intrinsic.Control.For(V.Local.iCount,0,V.DataView.dtWorkOrders!dvWorkOrder.RowCount--,1)
	'Add increment
	
	F.Intrinsic.Math.Add(V.Local.iIncrement,1,V.Local.iIncrement)
    F.Intrinsic.String.Format(V.Local.iIncrement,"000000",V.Local.sIncrement)

	V.Local.sJob.Set(V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).Job!FieldValTrim)
	V.Local.sSuffix.Set(V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).Suffix!FieldValTrim)
	V.Local.sMJob.Set(V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).Job!FieldValTrim)
	V.Local.sMSuffix.Set(V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).Suffix!FieldValTrim)
	V.Local.sSeq.Set(V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).Sequence!FieldValTrim)
	V.Local.sMSeq.Set(V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).MSequence!FieldValTrim)
	V.Local.sPart.Set(V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).Material!FieldValTrim)
	V.Local.sLoc.Set(V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).Loc!FieldValTrim)

	'search for the work center, part and sequence
	F.Intrinsic.String.Build("SELECT TOP 1 PART AS WC FROM V_JOB_OPERATIONS WHERE JOB = '{0}' AND SUFFIX = '{1}' AND SEQ = '{2}' AND LMO = 'L' ORDER BY SEQ ASC",V.Local.sJob.Trim,V.Local.sSuffix.Trim,V.Local.sSeq.Trim,V.Local.sSQL)
	F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL,V.Local.sWorkCenter)
	F.Intrinsic.String.Split(V.Local.sWorkCenter,"*!*",V.Local.sWorkCenter)
	V.Local.sWorkCenter.RedimPreserve(0,0)
	
	F.Intrinsic.Control.If(V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).WC!FieldValTrim,=,"")
		V.Local.sWorkCenter.Set(V.Local.sWorkCenter(0))
	F.Intrinsic.Control.Else
		V.Local.sWorkCenter.Set(V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).WC!FieldValTrim)
	F.Intrinsic.Control.EndIf

	F.Data.DataTable.AddRow("6000", "SchedNumber", V.Local.sScheduleNumber, "SchedIncrement", V.Local.sIncrement, "MatWO", V.Local.sMJob, "MatSuff", V.Local.sMSuffix, "MatSeq", V.Local.sMSeq, "LabWO", V.Local.sJob, "LabSuff", V.Local.sSuffix, "LabSeq", V.Local.sSeq, "LabWorkCenter", V.Local.sWorkCenter, "LabWOPart", V.Local.sPart, "LabWOLoc", V.Local.sLoc, "SchedFromDate", V.Ambient.Date.FormatMMDDYY)
	
	F.Intrinsic.Control.If(V.Local.bRelease)
		F.Intrinsic.Control.If(V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).RELEASED!FieldValTrim, !=, "Y")
			F.Intrinsic.Control.CallSub(ReleaseWorkOrder, "Job", V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).JOB!FieldValTrim, "Suffix", V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).SUFFIX!FieldValTrim)
			F.Data.DataView.SetValue("dtWorkOrders", "dvWorkOrder", V.Local.iCount, "RELEASED", "Y")
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Next(V.Local.iCount)

'upload
F.Intrinsic.Control.If(V.DataTable.6000.RowCount, >, 0)
	F.Intrinsic.Control.CallSub(6000Sync)
	
	'back up the flex schedule file (it remains after uploading)
	F.Intrinsic.String.Build("{0}\SCHED.txt", V.Caller.FilesDir, V.Local.sFileName)
	F.Intrinsic.File.File2String(V.Local.sFileName, V.Local.sContents)
	F.Intrinsic.String.StripCharacters(V.Screen.FormImport!cmboNest.Text.Trim, V.Local.sNest)
	F.Intrinsic.String.Build("FlexScheduleUpload_{0}_{1}.txt", V.Caller.User, V.Local.sNest, V.Local.sFileName)
	F.Intrinsic.Control.CallSub(BackUpFileString, "Type", "Flex Schedule Uploads", "Project", "4980", "Name", V.Local.sFileName, "Contents", V.Local.sContents)
	
	F.Intrinsic.Control.CallSub(UpdateLastScheduleNumber, "SCHEDULE", V.Local.sScheduleNumber)
	F.Intrinsic.String.Left(V.Local.sScheduleNumber,6,V.Local.sScheduleNumber)
	
	'adds the flexid to the table for later use
	F.Intrinsic.String.Build("UPDATE GCG_4980_WO SET FLEXID = '{0}' WHERE NESTID = '{1}' ",V.Local.sScheduleNumber,V.DataView.dtWorkOrders!dvWorkOrder(V.DataView.dtWorkOrders!dvWorkOrder.RowCount--).NestID!FieldValTrim,V.Local.sSQL)
	F.Data.DataView.SetValue("dtWorkOrders","dvWorkOrder",-1,"FlexID",V.Local.sScheduleNumber)
	F.ODBC.Connection!Con.Execute(V.Local.sSQL)
	
	'adds the flexid to the table for later use
	F.Intrinsic.String.Build("UPDATE GCG_4980_DROP SET FLEXID = '{0}' WHERE NESTID = '{1}' ",V.Local.sScheduleNumber,V.DataView.dtWorkOrders!dvWorkOrder(V.DataView.dtWorkOrders!dvWorkOrder.RowCount--).NestID!FieldValTrim,V.Local.sSQL)
	F.Data.DataView.SetValue("Drops","dvDrops",-1,"FlexID",V.Local.sScheduleNumber)
	F.Data.DataTable.SetValue("Drop",-1,"FlexID",V.Local.sScheduleNumber)
	F.ODBC.Connection!Con.Execute(V.Local.sSQL)
	
	F.Intrinsic.String.Build("UPDATE GCG_4980_MAT SET FLEXID = '{0}' WHERE NESTID = '{1}' ",V.Local.sScheduleNumber,V.DataView.dtWorkOrders!dvWorkOrder(V.DataView.dtWorkOrders!dvWorkOrder.RowCount--).NestID!FieldValTrim,V.Local.sSQL)
	F.Data.DataView.SetValue("Material","dvMaterial",-1,"FlexID",V.Local.sScheduleNumber)
	F.ODBC.Connection!Con.Execute(V.Local.sSQL)
	
	'Print flex schedule
	F.Data.DataTable.AddRow("900300", "StartDate", "000000", "EndDate", "000000", "StartFSNum", V.Local.sScheduleNumber, "StartFSSuffix", "000", "EndFSNum", V.Local.sScheduleNumber, "EndFSSuffix", "000", "ShowMatl", "Y", "UseExtBarcode", "Y")
	F.Intrinsic.Control.CallSub(900300Sync)
	
	GUI.FormImport.txtFlexSchedule.Text(V.Local.sScheduleNumber)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.FlexSchedule.End

Program.Sub.CheckFlexSchedule.Start
F.Intrinsic.Control.Try

F.Intrinsic.Control.If(V.DataView.Material!dvMaterial.RowCount, >, 0)
	GUI.FormImport.txtFlexSchedule.Text(V.DataView.Material!dvMaterial(0).FLEXID!FieldValTrim)
	
	F.Intrinsic.Control.If(V.DataView.ProfDT!ProfChkVw(0).Back_flush_Lab!FieldVal)
		GUI.FormImport.cmdCreateFlexSchedule.Enabled(False)
	F.Intrinsic.Control.Else
		GUI.FormImport.cmdCreateFlexSchedule.Enabled(True)
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(V.DataView.Material!dvMaterial(0).FLEXID!FieldValTrim, !=, "")
		GUI.FormImport.cmdPrintFlexSchedule.Enabled(True)
	F.Intrinsic.Control.Else
		GUI.FormImport.cmdPrintFlexSchedule.Enabled(False)
	F.Intrinsic.Control.EndIf
		
F.Intrinsic.Control.Else
	GUI.FormImport.txtFlexSchedule.Text("")
	GUI.FormImport.cmdCreateFlexSchedule.Enabled(False)
	GUI.FormImport.cmdPrintFlexSchedule.Enabled(False)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.CheckFlexSchedule.End

Program.Sub.CheckFlexColumn.Start
F.Intrinsic.Control.Try

V.Local.bBackFlushLabor.Declare(Boolean, True)

F.Intrinsic.Control.If(V.DataView.ProfDT!ProfChkVw.RowCount, >, 0)
	V.Local.bBackFlushLabor.Set(V.DataView.ProfDT!ProfChkVw(0).Back_flush_Lab!FieldVal)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Global.bFlexColumnsVisible, !=, V.Local.bBackFlushLabor.Not)
	GUI.FormImport.gsgcNestList.SetColumnProperty("gvNests", "FLEX", "Visible", V.Local.bBackFlushLabor.Not)
F.Intrinsic.Control.EndIf
V.Global.bFlexColumnsVisible.Set(V.Local.bBackFlushLabor.Not)

F.Intrinsic.Control.If(V.Local.bBackFlushLabor.Not)
	GUI.FormImport.gsgcNestList.SetColumnProperty("gvNests", "FLEX", "VisibleIndex", 1)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.CheckFlexColumn.End

Program.Sub.Post.Start
'post the labor and material usage for the selected nest

F.Intrinsic.Control.Try

V.Local.sLine.Declare(String)
V.Local.i.Declare(Long)
V.Local.sIssue.Declare(String)
V.Local.sFile.Declare(String)
V.Local.sPart.Declare(String)
V.Local.sReV.Declare(String)
V.Local.sLoc.Declare(String)
V.Local.iCount.Declare(Long)
V.Local.sSql.Declare(String)
V.Local.sBadPc.Declare(String)
V.Local.fBadPc.Declare(Float)
V.Local.sTimeIn.Declare(String)
V.Local.sTimeOut.Declare(String)
V.Local.fPercentAmt.Declare(Float)
V.Local.fPercent.Declare(Float)
V.Local.sWC.Declare(String)
V.Local.sRet.Declare(String)
V.Local.sClose.Declare(String)
V.Local.sQty.Declare(String)
V.Local.fQty.Declare(Float)
V.Local.sIssueLot.Declare(String)
V.Local.sIssueBin.Declare(String)
V.Local.sIssueHeat.Declare(String)
V.Local.sIssueSerial.Declare(String)
V.Local.sDate.Declare(String)
V.Local.sTime.Declare(String)
V.Local.fTime.Declare
V.Local.fIssue.Declare(Float)
V.Local.sFilter.Declare(String)
V.Local.bState.Declare
V.Local.sJob.Declare(String)
V.Local.sMaterial.Declare(String)
V.Local.sProfile.Declare
V.Local.sNest.Declare(String)
V.Local.bPrintMoveTicket.Declare(Boolean, False)
V.Local.iRowCountMinus.Declare(Long)
V.Local.bUsingRev.Declare(Boolean, False)
V.Local.fTotalUsed.Declare(Float, 0)
V.Local.fCurrentUsed.Declare(Float, 0)
V.Local.fWorkOrderTotalUsed.Declare(Float, 0)
V.Local.fWorkOrderCurrentUsed.Declare(Float, 0)
V.Local.fBinCurrentUsed.Declare(Float, 0)
V.Local.fBinRemaining.Declare(Float, 0)
V.Local.fWorkOrderRemaining.Declare(Float, 0)
V.Local.iWorkOrderCounter.Declare(Long, 0)
V.Local.iBinCounter.Declare(Long, 0)
V.Local.bMultipleBins.Declare(Boolean, False)
V.Local.fBinQuantity.Declare(Float, 0)
V.Local.fBinIssue.Declare(Float, 0)
V.Local.sWorkOrder.Declare(String)
V.Local.sSuffix.Declare(String)
V.Local.sSequence.Declare(String)
V.Local.bNextBin.Declare(Boolean, False)
V.Local.bNextWorkOrder.Declare(Boolean, False)
V.Local.sTJob.Declare(String)
V.Local.iID.Declare(Long)
V.Local.dPost.Declare(Date)
V.Local.sMessage.Declare(String)
V.Local.s450100.Declare(String)
V.Local.sWorkOrderDV.Declare(String)
V.Local.sBinDV.Declare(String)
V.Local.bOverwriteOperation.Declare(Boolean, False)
V.Local.bExists.Declare(Boolean)
V.Local.fResult.Declare(Float)
V.Local.sJobsInProcess.Declare(String)
V.Local.fQuantityToBeProcessed.Declare(Float, 0)
V.Local.iJ.Declare(Long)
V.Local.sLaborCloseSetting.Declare(String)
V.Local.sMaterialCloseSetting.Declare(String)
V.Local.bClose.Declare(Boolean, False)
V.Local.fMaterial.Declare(Float, 0)
V.Local.sScrapCode.Declare(String)
V.Local.sTempSplit.Declare(String)
V.Local.sName.Declare(String)

F.Intrinsic.Control.CallSub(SaveDataTables)

'converting this to use arguments instead of screen
V.Local.sNest.Set(V.Args.Nest)
V.Local.bPrintMoveTicket.Set(V.Args.PrintMoveTicket)
V.Local.dPost.Set(V.Ambient.Now)

F.Intrinsic.String.Build("Select Distinct PROFILE from GCG_4980_MAT where NESTID = '{0}'", V.Local.sNest,V.Local.sSql)

F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSql,V.Local.sProfile)
F.Intrinsic.Control.If(V.DataView.ProfDT!ProfChkVw.Exists,=,False)
	F.Data.Dataview.Create("ProfDT","ProfChkVw",22)
	F.Intrinsic.String.Build("PROFILE = '{0}'",V.Local.sProfile,V.Local.sfilter)
	F.Data.DataView.SetFilter("ProfDT","ProfChkVw",V.Local.sFilter)
F.Intrinsic.Control.Else
	F.Intrinsic.String.Build("PROFILE = '{0}'",V.Local.sProfile,V.Local.sfilter)
	F.Data.DataView.SetFilter("ProfDT","ProfChkVw",V.Local.sFilter)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.DataView.ProfDT!ProfChkVw.RowCount, <, 1)
	F.Intrinsic.UI.Msgbox("Error: No records found for this profile.")
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.DataView.dtWorkOrders!dvWorkOrder.Exists, =, False)
	F.Intrinsic.UI.Msgbox("Error: No records found for this nest.")
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.Else
	F.Intrinsic.Control.If(V.DataView.dtWorkOrders!dvWorkOrder.RowCount, <, 1)
		F.Intrinsic.UI.Msgbox("Error: No records found for this nest.")
		F.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Data.DataTable.AcceptChanges("dtWorkOrders")

F.Intrinsic.Control.If(V.DataTable.Part.Exists)
	F.Data.DataTable.AcceptChanges("Part")
F.Intrinsic.Control.EndIf

V.Local.iRowCountMinus.Set(V.DataView.dtWorkOrders!dvWorkOrder.RowCount--)
F.Intrinsic.Control.If(V.DataView.ProfDT!ProfChkVw(0).Back_flush_Lab!FieldVal)
	F.Intrinsic.Control.If(V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iRowCountMinus).Employee.FieldValTrim,=,"","AND", V.Screen.FormImport!txtEmployee.Text.Trim, =, "")
		F.Intrinsic.UI.Msgbox("Enter an Employee")
		F.Intrinsic.UI.CloseWaitDialog
		F.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.DataView.ProfDT!ProfChkVw(0).BACK_FLUSH_MAT!FieldVal)
	F.Intrinsic.String.Build("NESTID = '{0}'", V.DataView.dtWorkOrders!dvWorkOrder(0).NESTID!FieldValTrim, V.Local.sFilter)
	F.Data.DataTable.Compute("dtWorkOrders", "Sum(GSS_ISSUE)", V.Local.sFilter, V.Local.fTotalUsed)
	F.Intrinsic.Control.If(V.Local.fTotalUsed, >, 0)
		F.Intrinsic.UI.ChangeWaitStatus("Writing Issue File",30)
		
		'check if they are using revisions
		F.Global.General.ReadOption("070008", 0, False, V.Local.bUsingRev)
		
		'check if they are issuing from multiple bins
		F.Intrinsic.Control.CallSub(GetSetting, "PROFILE", V.Global.sProfile, "TYPE", "IMPORT_OPTION", "SETTING", "MULTIPLE_BINS")
		F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
			V.Local.bMultipleBins.Set(V.Args.Setting)
			F.Intrinsic.Control.If(V.Local.bMultipleBins)
				F.Data.DataView.Create("Part", "dvBins", 22, "Issue = True", "")
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.EndIf
		
		'build issue material file
		F.Intrinsic.UI.ChangeWaitStatus("Issuing Material",50)
	
		V.Local.sMaterial.Set(V.DataView.dtWorkOrders!dvWorkOrder(0).Material!FieldValTrim)
		V.Local.sLoc.Set(V.DataView.dtWorkOrders!dvWorkOrder(0).Loc!FieldValTrim)
		F.Intrinsic.String.RPad(V.DataView.dtWorkOrders!dvWorkOrder(0).Material!FieldValTrim," ",20,V.Local.sPart)
		V.Local.sReV.Set(V.Local.sPart.Right3)
		V.Local.sPart.Set(V.Local.sPart.Left17)
		
		'option to issue waste to indirect work order
		F.Intrinsic.Control.If(V.DataView.ProfDT!ProfChkVw(0).INDIRECT_ISSUE!FieldValTrim)
			F.Intrinsic.String.Build("NESTID = '{0}'", V.DataView.dtWorkOrders!dvWorkOrder(0).NESTID!FieldValTrim, V.Local.sFilter)
			F.Data.DataTable.Compute("dtWorkOrders", "Sum(Excess)", V.Local.sFilter, V.Local.fIssue)
			F.Data.DataTable.Compute("dtWorkOrders", "Max(ID)", V.Local.sFilter, V.Local.iID)
		
			F.Intrinsic.String.Split(V.DataView.ProfDT!ProfChkVw(0).ISSUE_WO!FieldValTrim, "-", V.Local.sJob)
			F.Data.DataTable.AddRow("dtWorkOrders", "NESTID", V.Screen.FormImport!cmboNest.Text.Trim, "EMPLOYEE", V.Screen.FormImport!txtEmployee.Text.Trim, "Employee_Name", V.Screen.FormImport!txtEmployeeName.Text.Trim, "TJOB", V.DataView.ProfDT!ProfChkVw(0).ISSUE_WO!FieldValTrim, "TIME", 0, "MATERIAL", V.DataView.dtWorkOrders!dvWorkOrder(0).Material!FieldValTrim, "JOB", V.Local.sJob(0).Trim, "SUFFIX", V.Local.sJob(1).Trim, "MSEQUENCE", V.Local.sJob(2).Trim, "ISSUE", V.Local.fIssue, "GSS_ISSUE", V.Local.fIssue, "INDIRECT", True, "ID", V.Local.iID.++)
		F.Intrinsic.Control.EndIf
		
		'prepare for issue loop below
		V.Local.fBinQuantity.Set(V.Local.fTotalUsed)
		V.Local.bNextBin.Set(True)
		V.Local.bNextWorkOrder.Set(True)
		
		'set initial lot/bin values
		V.Local.sIssueLot.Set(V.DataView.dtWorkOrders!dvWorkOrder(0).Lot!FieldValTrim)
		V.Local.sIssueSerial.Set(V.DataView.dtWorkOrders!dvWorkOrder(0).Serial!FieldValTrim)
		V.Local.sIssueBin.Set(V.DataView.dtWorkOrders!dvWorkOrder(0).Bin!FieldValTrim)
		V.Local.sIssueHeat.Set(V.DataView.dtWorkOrders!dvWorkOrder(0).Heat!FieldValTrim)
		
		'issue material until all is done
		F.Intrinsic.Math.Round(V.Local.fTotalUsed, V.Global.iDecimals, V.Local.fTotalUsed)
		F.Intrinsic.Control.DoUntil(V.Local.fCurrentUsed, >=, V.Local.fTotalUsed)
			
			'if the last bin was fully issued, get the issue amount for the next one, otherwise just use the remaining amount
			F.Intrinsic.Control.If(V.Local.bNextBin)
				'get bin if using multiple bins, else use initial value above
				F.Intrinsic.Control.If(V.Local.bMultipleBins)
					F.Intrinsic.Control.If(V.DataView.Part!dvBins.RowCount, >, 0)
						V.Local.sIssueLot.Set(V.DataView.Part!dvBins(V.Local.iBinCounter).Lot!FieldValTrim)
						V.Local.sIssueSerial.Set(V.DataView.Part!dvBins(V.Local.iBinCounter).Serial_Number!FieldValTrim)
						V.Local.sIssueBin.Set(V.DataView.Part!dvBins(V.Local.iBinCounter).Bin!FieldValTrim)
						V.Local.sIssueHeat.Set(V.DataView.Part!dvBins(V.Local.iBinCounter).Heat!FieldValTrim)
						V.Local.fBinQuantity.Set(V.DataView.Part!dvBins(V.Local.iBinCounter).Issue_Quantity!FieldValFloat)
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.Else
				V.Local.fBinQuantity.Set(V.Local.fBinRemaining)
			F.Intrinsic.Control.EndIf
			
			'get wo
			V.Local.sWorkOrder.Set(V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iWorkOrderCounter).Job!FieldValTrim)
			V.Local.sSuffix.Set(V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iWorkOrderCounter).Suffix!FieldValTrim)
			V.Local.sSequence.Set(V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iWorkOrderCounter).MSequence!FieldValTrim)
			
			'if the last work order was fully issued, get the issue amount for the next one, otherwise just use the remaining amount
			F.Intrinsic.Control.If(V.Local.bNextWorkOrder)
				'option to issue wast to indirect work order instead of proportionally to all work orders
				F.Intrinsic.Control.If(V.DataView.ProfDT!ProfChkVw(0).INDIRECT_ISSUE!FieldValTrim)
					V.Local.fWorkOrderTotalUsed.Set(V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iWorkOrderCounter).Issue!FieldValFloat)
				F.Intrinsic.Control.Else
					V.Local.fWorkOrderTotalUsed.Set(V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iWorkOrderCounter).Gss_Issue!FieldValFloat)
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.Else
				V.Local.fWorkOrderTotalUsed.Set(V.Local.fWorkOrderRemaining)
			F.Intrinsic.Control.EndIf
			
			V.Local.bNextBin.Set(False)
			V.Local.bNextWorkOrder.Set(False)
			
			F.Intrinsic.Math.Round(V.Local.fWorkOrderTotalUsed, V.Global.iDecimals, V.Local.fWorkOrderTotalUsed)
			F.Intrinsic.Math.Round(V.Local.fBinQuantity, V.Global.iDecimals, V.Local.fBinQuantity)
			
			'calculate issue
			F.Intrinsic.Control.If(V.Local.fBinQuantity, >=, V.Local.fWorkOrderTotalUsed)
				V.Local.fIssue.Set(V.Local.fWorkOrderTotalUsed)
			F.Intrinsic.Control.Else
				V.Local.fIssue.Set(V.Local.fBinQuantity)
			F.Intrinsic.Control.EndIf
			
			F.Intrinsic.Math.Round(V.Local.fIssue, 4, V.Local.fIssue)
			
			'if they are using it pass part and rev seperately, else pass together
			F.Intrinsic.String.Format(V.Local.fIssue,"########.0000",V.Local.sIssue)
			F.Intrinsic.Control.If(V.Local.bUsingRev)
				F.Data.DataTable.AddRow("450100", "Part", V.Local.sPart, "Rev", V.Local.sRev, "Location", V.Local.sLoc, "Quantity", V.Local.sIssue, "Lot", V.Local.sIssueLot, "Bin", V.Local.sIssueBin, "Heat", V.Local.sIssueHeat, "Serial", V.Local.sIssueSerial, "WONumber", V.Local.sWorkOrder, "WOSuffix", V.Local.sSuffix, "WOSeq", V.Local.sSequence)
			F.Intrinsic.Control.Else
				F.Data.DataTable.AddRow("450100", "Part", V.Local.sMaterial, "Location", V.Local.sLoc, "Quantity", V.Local.sIssue, "Lot", V.Local.sIssueLot, "Bin", V.Local.sIssueBin, "Heat", V.Local.sIssueHeat, "Serial", V.Local.sIssueSerial, "WONumber", V.Local.sWorkOrder, "WOSuffix", V.Local.sSuffix, "WOSeq", V.Local.sSequence)
			F.Intrinsic.Control.EndIf
			
			'calculate remaining / current used
			F.Intrinsic.Math.Sub(V.Local.fBinQuantity, V.Local.fIssue, V.Local.fBinRemaining)
			F.Intrinsic.Math.Sub(V.Local.fWorkOrderTotalUsed, V.Local.fIssue, V.Local.fWorkOrderRemaining)
			F.Intrinsic.Math.Add(V.Local.fCurrentUsed, V.Local.fIssue, V.Local.fCurrentUsed)
			
			F.Intrinsic.Math.Round(V.Local.fBinRemaining, V.Global.iDecimals, V.Local.fBinRemaining)
			F.Intrinsic.Math.Round(V.Local.fWorkOrderRemaining, V.Global.iDecimals, V.Local.fWorkOrderRemaining)
			F.Intrinsic.Math.Round(V.Local.fCurrentUsed, V.Global.iDecimals, V.Local.fCurrentUsed)
			
			'move to next bin if this one is fully issued
			F.Intrinsic.Control.If(V.Local.fBinRemaining, <=, 0)
				V.Local.bNextBin.Set(True)
				F.Intrinsic.Math.Add(V.Local.iBinCounter, 1, V.Local.iBinCounter)
			F.Intrinsic.Control.EndIf
			
			'move to next work order if this one is fully issued
			F.Intrinsic.Control.If(V.Local.fWorkOrderRemaining, <=, 0)
				V.Local.bNextWorkOrder.Set(True)
				F.Intrinsic.Math.Add(V.Local.iWorkOrderCounter, 1, V.Local.iWorkOrderCounter)
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.Loop
		
		'backup and then issue
		F.Intrinsic.Control.If(V.DataTable.450100.RowCount, >, 0)
			'create a copy of this file to back it up
			F.Data.DataView.Create("450100", "dvBackup", 22)
			F.Data.DataView.ToString("450100", "dvBackup", ",", V.Ambient.NewLine, V.Local.sLine)
			F.Data.DataView.Close("450100", "dvBackup")
			
			F.Intrinsic.String.StripCharacters(V.Local.sNest, V.Local.sName)
			F.Intrinsic.String.Build("MaterialIssue_{0}_{1}.txt", V.Caller.User, V.Local.sName, V.Local.sName)
			F.Intrinsic.Control.CallSub(BackUpFileString, "Type", "Material Issues", "Project", "4980", "Name", V.Local.sName, "Contents", V.Local.sLine)
			
			'save to history table
			F.Intrinsic.Control.CallSub(SaveItemHistory, "NESTID", V.Screen.FormImport!cmboNest.Text.Trim, "POST_TIMESTAMP", V.Local.dPost)
			
			'issue the material
			F.Intrinsic.Control.CallSub(450100Sync)
		F.Intrinsic.Control.EndIf
		
		F.Intrinsic.String.Format(V.Ambient.Date,"MM/DD/YYYY",V.Local.sDate)
		F.Intrinsic.String.Format(V.Ambient.Time,"h:mm:ss",V.Local.sTime)
		
		F.Data.DataView.SetValue("dtWorkOrders","dvWorkOrder",-1,"Post_Date",V.Local.sDate)
		F.Data.DataView.SetValue("dtWorkOrders","dvWorkOrder",-1,"Post_Time",V.Local.sTime)
		
		F.Intrinsic.Control.If(V.DataView.Drops!dvDrops.RowCount, >, 0)
			F.Intrinsic.Control.CallSub(ProcessDrops, "Part", V.Local.sPart, "Rev", V.Local.sRev, "Loc", V.Local.sLoc, "Lot", V.Local.sIssueLot, "Bin", V.Local.sIssueBin, "Heat", V.Local.sIssueHeat, "Serial", V.Local.sIssueSerial, "Full_Material", V.Local.sMaterial, "Using_Rev", V.Local.bUsingRev)
		F.Intrinsic.Control.EndIf
		
		V.Local.sLine.Set("")
	F.Intrinsic.Control.EndIf
	
	'here check material issue option
	F.Intrinsic.Control.CallSub(GetSetting, "PROFILE", V.Global.sProfile, "TYPE", "IMPORT_OPTION", "SETTING", "CLOSE_MAT_SEQUENCE")
	F.Intrinsic.Control.If(V.Args.Setting.Trim, =, "")
		V.Local.sMaterialCloseSetting.Set("ALWAYS")
	F.Intrinsic.Control.Else
		V.Local.sMaterialCloseSetting.Set(V.Args.Setting.Trim)
	F.Intrinsic.Control.EndIf	
	
	F.Intrinsic.Control.For(V.Local.iCount, 0, V.Local.iRowCountMinus, 1)
		F.Intrinsic.Control.If(V.Local.sMaterialCloseSetting.Trim, =, "ALWAYS")
			V.Local.bClose.Set(True)
		F.Intrinsic.Control.ElseIf(V.Local.sMaterialCloseSetting.Trim, =, "NEVER")
			V.Local.bClose.Set(False)
		F.Intrinsic.Control.ElseIf(V.Local.sMaterialCloseSetting.Trim, =, "MANUAL")
			V.Local.bClose.Set(V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).CLOSE_MATERIAL_SEQUENCE!FieldVal)
		'this setting we wait for until the end, after labor has been processed
		'F.Intrinsic.Control.ElseIf(V.Local.sMaterialCloseSetting.Trim, =, "LABOR_CLOSED")
		F.Intrinsic.Control.ElseIf(V.Local.sMaterialCloseSetting.Trim, =, "ESTIMATED_QUANTITY")
			'check if the quantity has been met
			F.Intrinsic.String.Build("select HOURS_ESTIMATED, HOURS_ACTUAL from V_JOB_OPERATIONS where JOB = '{0}' AND SUFFIX = '{1}' AND SEQ = '{2}' ", V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).Job!FieldValTrim, V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).Suffix!FieldValTrim, V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).MSequence!FieldValTrim, V.Local.sSQL)
			
			F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
			F.Intrinsic.String.Split(V.Local.sRet, "*!*", V.Local.sRet)
			V.Local.sRet.RedimPreserve(0, 1)
			
			F.Intrinsic.Math.Add(V.Local.sRet(1).Float, V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).Gss_Issue!FieldValFloat, V.Local.fMaterial)
			F.Intrinsic.Math.Sub(V.Local.sRet(0).Float, V.Local.fMaterial, V.Local.fMaterial)
			F.Intrinsic.Control.If(V.Local.fMaterial, <=, 0)
				V.Local.bClose.Set(True)
			F.Intrinsic.Control.Else
				V.Local.bClose.Set(False)
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.EndIf
		
		'store the close option for now, close it at the end
		F.Data.DataView.SetValue("dtWorkOrders", "dvWorkOrder", V.Local.iCount, "CLOSE_MATERIAL_SEQUENCE", V.Local.bClose)
	F.Intrinsic.Control.Next(V.Local.iCount)
F.Intrinsic.Control.EndIf

'job operation upload
F.Intrinsic.control.If(V.DataView.ProfDT!ProfChkVw(0).Back_flush_Lab!FieldVal)	
	F.Intrinsic.UI.ChangeWaitStatus("Writing Labor File",60)
	F.Intrinsic.Control.If(V.DataView.dtWorkOrders!dvWorkOrder.RowCount--,<>,0)
		F.Intrinsic.Math.Div(25,V.DataView.dtWorkOrders!dvWorkOrder.RowCount--,V.Local.fPercentAmt)
	F.Intrinsic.Control.Else
		V.Local.fPercentAmt.Set(25)
	F.Intrinsic.Control.EndIf
	V.Local.fPercent.Set(60)
	
	'set employee
	'what if employee is pulling form nest and there are different employees on different work orders?
	F.Data.DataView.SetValue("dtWorkOrders", "dvWorkOrder", -1, "EMPLOYEE", V.Screen.FormImport!txtEmployee.Text.Trim)
	F.Data.DataView.SetValue("dtWorkOrders", "dvWorkOrder", -1, "Employee_Name", V.Screen.FormImport!txtEmployeeName.Text.Trim)
	
	F.Intrinsic.Control.CallSub(GetSetting, "PROFILE", V.Global.sProfile, "TYPE", "IMPORT_OPTION", "SETTING", "CLOSE_LABOR_SEQUENCE")
	F.Intrinsic.Control.If(V.Args.Setting.Trim, =, "")
		V.Local.sLaborCloseSetting.Set("RUN_QUANTITY")
	F.Intrinsic.Control.Else
		V.Local.sLaborCloseSetting.Set(V.Args.Setting.Trim)
	F.Intrinsic.Control.EndIf
	
	'update opcode to prevent triggering backflushing
	F.Intrinsic.Control.CallSub(GetSetting, "PROFILE", V.Global.sProfile, "TYPE", "IMPORT_OPTION", "SETTING", "OVERWRITE_OPERATION")
	F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
		V.Local.bOverwriteOperation.Set(V.Args.Setting)
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.For(V.Local.iCount,0,V.DataView.dtWorkOrders!dvWorkOrder.RowCount--,1)
		
		'don't do labor upload for the extra line we added for the indirect issue option
		F.Intrinsic.Control.If(V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).INDIRECT!FieldVal, =, False)
		
			F.Intrinsic.Math.Add(V.Local.fPercent,V.Local.fPercentAmt,V.Local.fPercent)
			F.Intrinsic.UI.ChangeWaitStatus("Writing Labor File",V.Local.fPercent)
			
			'make sure to only do ones with info populated
			F.Intrinsic.Control.If(V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).Job!FieldValTrim,<>,"")
				F.Intrinsic.Control.If(V.Local.bOverwriteOperation)
					'update opcode to prevent triggering backflushing
					F.Intrinsic.String.Build("UPDATE JOB_OPERATIONS SET OPERATION = 'NEST' WHERE LMO = 'L' AND JOB = '{0}' AND SUFFIX = '{1}' AND SEQ = '{2}'",V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).Job!FieldValTrim,V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).Suffix!FieldValTrim,V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).Sequence!FieldValTrim,V.Local.sSQL)
					F.ODBC.Connection!Con.Execute(V.Local.sSQL)
				F.Intrinsic.Control.EndIf
		
				'get work center from sequence
				V.Local.sWC.Set(V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).WC!FieldValTrim)
				F.Intrinsic.Control.If(V.Local.sWC.Trim,=,"")
					'what if this returns a work group?
					F.Intrinsic.String.Build("SELECT PART FROM JOB_OPERATIONS WHERE JOB = '{0}' AND SUFFIX = '{1}' AND SEQ = '{2}' ",V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).Job!FieldValTrim,V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).Suffix!FieldValTrim,V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).Sequence!FieldValTrim,V.Local.sSQL)
					F.ODBC.Connection!Con.OpenLocalRecordsetRO("rst",V.Local.sSQL)
					F.Intrinsic.Control.If(V.ODBC.Con!rst.EOF,=,False)
						V.Local.sWC.Set(V.ODBC.Con!rst.FieldValTrim!PART)
						F.Data.DataView.SetValue("dtWorkOrders", "dvWorkOrder", V.Local.iCount, "WC", V.Local.sWC)
					F.Intrinsic.Control.EndIf
					F.ODBC.Con!rst.Close
				F.Intrinsic.Control.EndIf
				
				'write labor detail line using JB0455
				'Multiply qty by 10,000 to upload
				F.Intrinsic.Math.Mult(V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).GOOD_PC!FieldValFloat,10000,V.Local.fQty)
				V.Local.sQty.Set(V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).GOOD_PC!FieldValFloat)
				
				'Multiply qty by 10,000 to upload
				F.Intrinsic.Math.Mult(V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).BAD_PC!FieldValFloat,10000,V.Local.fBadPc)
				V.Local.sBadPc.Set(V.Local.fBadPc)
				
				'check labor close options
				F.Intrinsic.Control.If(V.Local.sLaborCloseSetting, =, "ALWAYS")
					V.Local.sClose.Set("Y")
				F.Intrinsic.Control.ElseIf(V.Local.sLaborCloseSetting, =, "NEVER")
					V.Local.sClose.Set("")
				F.Intrinsic.Control.ElseIf(V.Local.sLaborCloseSetting, =, "MANUAL")
					F.Intrinsic.Control.If(V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).CLOSE_LABOR_SEQUENCE!FieldVal)
						V.Local.sClose.Set("Y")
					F.Intrinsic.Control.Else
						V.Local.sClose.Set("")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.ElseIf(V.Local.sLaborCloseSetting, =, "MATERIAL_CLOSED")
					F.Intrinsic.Control.If(V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).CLOSE_MATERIAL_SEQUENCE!FieldVal)
						V.Local.sClose.Set("Y")
					F.Intrinsic.Control.Else
						V.Local.sClose.Set("")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.Else
					'checks to see if quantity is complete so that we can set close flag.
					F.Intrinsic.String.Build("SELECT A.UNITS_OPEN, A.UNITS_COMPLETE, B.QTY_CUSTOMER FROM V_JOB_OPERATIONS A left join V_JOB_HEADER B on A.JOB = B.JOB and A.SUFFIX = B.SUFFIX WHERE A.JOB = '{0}' AND A.SUFFIX = '{1}' AND A.SEQ = '{2}' ",V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).Job!FieldValTrim,V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).Suffix!FieldValTrim,V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).Sequence!FieldValTrim,V.Local.sSQL)
					'F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSql)
					F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL,V.Local.sRet)
					F.Intrinsic.String.Split(V.Local.sRet,"*!*",V.Local.sRet)
					V.Local.sRet.RedimPreserve(0,2)
					
					'check for unprocessed online update records
					F.Intrinsic.String.Build("select sum(PIECES_GOOD) from V_JOBS_IN_PROCESS where JOB = '{0}' and SUFFIX = '{1}' and SEQUENCE = '{2}'", V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).Job!FieldValTrim, V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).Suffix!FieldValTrim, V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).Sequence!FieldValTrim, V.Local.sSql)
					'F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSql)
					F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSql, V.Local.sJobsInProcess)
					F.Intrinsic.Control.If(V.Ambient.ExecuteAndReturnEOF)
						V.Local.sJobsInProcess.Set("0")
					F.Intrinsic.Control.EndIf
					
					'check quantities in the records from this nest already processed
					F.Intrinsic.String.Build("[NESTID_TRIMMED] = '{0}' and [Processed] = True and [JOB_TRIMMED] = '{1}' and IsNull([SUFFIX_TRIMMED], '') = '{2}' and [SEQUENCE_TRIMMED] = '{3}'", V.DataView.dtWorkOrders!dvWorkOrder(0).NESTID!FieldValTrim, V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).Job!FieldValTrim, V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).Suffix!FieldValTrim, V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).Sequence!FieldValTrim, V.Local.sFilter)
					F.Data.DataTable.Compute("dtWorkOrders", "SUM(GOOD_PC)", V.Local.sFilter, V.Local.fQuantityToBeProcessed)
					
					F.Intrinsic.Control.If(V.Local.sLaborCloseSetting, =, "RUN_QUANTITY")
						F.Intrinsic.Math.Sub(V.Local.sRet(0).Float, V.Local.sRet(1).Float, V.Local.sJobsInProcess.Float, V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).Good_PC!FieldValFloat, V.Local.fQuantityToBeProcessed, V.Local.fResult)
					F.Intrinsic.Control.ElseIf(V.Local.sLaborCloseSetting, =, "CUSTOMER_QUANTITY")
						F.Intrinsic.Math.Sub(V.Local.sRet(2).Float, V.Local.sRet(1).Float, V.Local.sJobsInProcess.Float, V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).Good_PC!FieldValFloat, V.Local.fQuantityToBeProcessed, V.Local.fResult)
					F.Intrinsic.Control.EndIf
					
					F.Intrinsic.Control.If(V.Local.fResult,<=,0)
						V.Local.sClose.Set("Y")
					F.Intrinsic.Control.Else
						V.Local.sClose.Set("")
					F.Intrinsic.Control.EndIf
					
					F.Intrinsic.String.Build("Sequence Close Information: NEST: {10}, JOB: {0}, SUFFIX: {1}, SEQUENCE: {2}, UNITS_OPEN: {3}, CUSTOMER_QUANTITY: {11}, UNITS_COMPLETE: {4}, UNPROCESSED_JOBS_IN_PROCESS_PIECES: {5}, UNPROCESSED_PIECES_IN_PROGRAM: {9}, GOOD_PC: {6}, CALCULATION: {7}, CLOSE: {8}", V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).Job!FieldValTrim, V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).Suffix!FieldValTrim, V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).Sequence!FieldValTrim, V.Local.sRet(0).Float, V.Local.sRet(1).Float, V.Local.sJobsInProcess.Float, V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).Good_PC!FieldValFloat, V.Local.fResult, V.Local.sClose, V.Local.fQuantityToBeProcessed, V.DataView.dtWorkOrders!dvWorkOrder(0).NESTID!FieldValTrim, V.Local.sRet(1).Float, V.Local.sMessage)
					F.Intrinsic.Control.If(V.Global.bPostingLogging)
						F.Intrinsic.Control.CallSub(AddLog, "Project", "4980", "Task", "Nesting_Posting", "Message", V.Local.sMessage)
					F.Intrinsic.Control.EndIf
					
					V.Local.sRet.Redim(0, 0)
				F.Intrinsic.Control.EndIf
				
				'store close option for later
				F.Intrinsic.Control.If(V.Local.sClose, =, "Y")
					F.Data.DataView.SetValue("dtWorkOrders", "dvWorkOrder", V.Local.iCount, "CLOSE_LABOR_SEQUENCE", True)
				F.Intrinsic.Control.Else
					F.Data.DataView.SetValue("dtWorkOrders", "dvWorkOrder", V.Local.iCount, "CLOSE_LABOR_SEQUENCE", False)
				F.Intrinsic.Control.EndIf
				
				V.Local.fTime.Set(V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).TIME!FieldValFloat)
				
				'get scrap option
				F.Intrinsic.Control.If(V.Local.fBadPc, >, 0)
					F.Intrinsic.String.Split(V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).SCRAP_CODE_DISPLAY!FieldValTrim, "-", V.Local.sTempSplit)
					V.Local.sScrapCode.Set(V.Local.sTempSplit(0).Trim)
					V.Local.sTempSplit.Redim(0, 0)
				F.Intrinsic.Control.Else
					V.Local.sScrapCode.Set("")
				F.Intrinsic.Control.EndIf
				
				F.Data.DataView.SetValue("dtWorkOrders", "dvWorkOrder", V.Local.iCount, "SCRAP_CODE", V.Local.sScrapCode)
	
				'create line for upload
				F.Data.DataTable.AddRow("JB0455", "Date", V.Ambient.Date.FormatMMDDYY, "Employee", V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).Employee!FieldValTrim, "Job", V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).Job!FieldValTrim, "Suffix", V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).Suffix!FieldValTrim, "Seq", V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).Sequence!FieldValTrim, "WC", V.Local.sWC.Trim, "Hours", V.Local.fTime, "Closed", V.Local.sClose, "Indirect", "D", "RateType", "R", "GoodPcs", V.Local.fQty, "ScrapPcs", V.Local.fBadPc, "Reason", V.Local.sScrapCode)
				
				F.Data.DataView.SetValue("dtWorkOrders", "dvWorkOrder", V.Local.iCount, "Processed", True)
				F.Data.DataTable.AcceptChanges("dtWorkOrders")
				
				'print move ticket if necessary
				F.Intrinsic.Control.If(V.Local.bPrintMoveTicket)
					F.Intrinsic.UI.ChangeWaitStatus("Printing move ticket", 75)
					F.Intrinsic.Control.CallSub(MoveTicket,"Job",V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).Job!FieldValTrim,"Suffix",V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).Suffix!FieldValTrim,"Seq",V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).Sequence!FieldValTrim,"Qty",V.Local.sQty,"Employee",V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).Employee!FieldValTrim,"WC",V.Local.sWC.Trim,"Closeflag",V.Local.sClose, "QUALITYNUMBER", "", "SCRAPREF", "", "SCRAPQTY", V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).BAD_PC!FieldValFloat, "COMMENTS", "", "SCRAP_CODE", V.Local.sScrapCode)
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.EndIf
	F.intrinsic.Control.Next(V.Local.iCount)
	
	F.Intrinsic.UI.ChangeWaitStatus("Updating Labor",90)
	
	'back up this datatable here
	F.Intrinsic.Control.If(V.DataTable.JB0455.RowCount, >, 0)
		F.Data.DataView.Create("JB0455", "dvJB0455", 22)
		F.Data.DataView.ToString("JB0455", "dvJB0455", V.Ambient.Tab, V.Ambient.NewLine, V.Local.sLine)
		F.Data.DataView.Close("JB0455", "dvJB0455")
		
		F.Intrinsic.String.StripCharacters(V.Local.sNest, V.Local.sName)
		F.Intrinsic.String.Build("LaborPost_{0}_{1}.txt", V.Caller.User, V.Local.sName, V.Local.sName)
		F.Intrinsic.Control.CallSub(BackUpFileString, "Type", "Labor Posts", "Project", "4980", "Name", V.Local.sName, "Contents", V.Local.sLine)
			
		F.Intrinsic.Control.CallSub(JB0455Sync)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Else
	F.Intrinsic.Control.CallSub(GetSetting, "PROFILE", V.Global.sProfile, "TYPE", "IMPORT_OPTION", "SETTING", "CREATE_FLEX_SCHEDULE")
	F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
		F.Intrinsic.Control.If(V.Args.Setting)
			F.Intrinsic.Control.If(V.DataView.Material!dvMaterial.RowCount, >, 0)
				F.Intrinsic.Control.If(V.DataView.Material!dvMaterial(0).FLEXID!FieldValTrim, =, "")
					F.Intrinsic.UI.ChangeWaitStatus("Creating Flex Schedule",90)
					F.Intrinsic.Control.CallSub(Flexschedule)
					F.Intrinsic.UI.ChangeWaitStatus("Printing Flex Schedule",100)
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

'now close material if necessary
F.Intrinsic.Control.For(V.Local.iCount, 0, V.Local.iRowCountMinus, 1)
	F.Intrinsic.Control.If(V.Local.sMaterialCloseSetting.Trim, =, "LABOR_CLOSED")
		V.Local.bClose.Set(V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).CLOSE_LABOR_SEQUENCE!FieldVal)
	F.Intrinsic.Control.Else
		V.Local.bClose.Set(V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).CLOSE_MATERIAL_SEQUENCE!FieldVal)
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(V.Local.bClose)
		F.Intrinsic.Control.If(V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).INDIRECT!FieldVal, =, False)
			F.Global.Callwrapper.New("CloseMaterialSequence", "Manufacturing.CloseWorkOrderSequence")
			F.Global.Callwrapper.SetProperty("CloseMaterialSequence", "BeginningWorkOrder", V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).Job!FieldValTrim)
			F.Global.Callwrapper.SetProperty("CloseMaterialSequence", "BeginningWorkOrderSuffix", V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).Suffix!FieldValTrim)
			F.Global.Callwrapper.SetProperty("CloseMaterialSequence", "WorkOrderSequence", V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).MSequence!FieldValTrim)
			F.Global.Callwrapper.SetProperty("CloseMaterialSequence", "CloseDate", V.Ambient.Date.FormatYYYYMMDD)
			F.Global.CallWrapper.Run("CloseMaterialSequence")
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Next(V.Local.iCount)

'update all closed flags to closed
F.Intrinsic.String.Build("UPDATE GCG_4980_MAT SET CLOSED = 'Y' WHERE NESTID = '{0}' ",V.DataView.dtWorkOrders!dvWorkOrder(V.DataView.dtWorkOrders!dvWorkOrder.RowCount--).NestID!FieldValTrim,V.Local.sSQL)
F.ODBC.Connection!Con.Execute(V.Local.sSQL)
F.Intrinsic.String.Build("UPDATE GCG_4980_WO SET CLOSED = 'Y' WHERE NESTID = '{0}' ",V.DataView.dtWorkOrders!dvWorkOrder(V.DataView.dtWorkOrders!dvWorkOrder.RowCount--).NestID!FieldValTrim,V.Local.sSQL)
F.Data.DataView.SetValue("dtWorkOrders","dvWorkOrder",-1,"Closed","Y")
F.ODBC.Connection!Con.Execute(V.Local.sSQL)
F.Intrinsic.String.Build("UPDATE GCG_4980_DROP SET CLOSED = 'Y' WHERE NESTID = '{0}' ",V.DataView.dtWorkOrders!dvWorkOrder(V.DataView.dtWorkOrders!dvWorkOrder.RowCount--).NestID!FieldValTrim,V.Local.sSQL)
F.Data.DataTable.SetValue("Drop",-1,"Closed","Y")
F.Data.DataView.SetValue("Drops","dvDrops",-1,"Closed","Y")
F.ODBC.Connection!Con.Execute(V.Local.sSQL)

'create flex schedule for next labor step option
F.Intrinsic.Control.If(V.DataView.ProfDT!ProfChkVw(0).WCWG!FieldVal)
	F.Intrinsic.UI.ChangeWaitStatus("Creating Flex Schedule",90)
	F.Intrinsic.Control.CallSub(FlexScheduleNextWC)
	F.Intrinsic.UI.ChangeWaitStatus("Printing Flex Schedule",100)
F.Intrinsic.Control.EndIf

'save history
F.Intrinsic.Control.CallSub(MoveNestToHistory, "POST_TIMESTAMP", V.Local.dPost, "NEST_ID", V.DataView.dtWorkOrders!dvWorkOrder(V.DataView.dtWorkOrders!dvWorkOrder.RowCount--).NestID!FieldValTrim, "PROFILE", V.Global.sProfile)

F.Data.DataTable.DeleteRow("Drop")

GUI.FormImport.ddlLot.ClearItems
GUI.FormImport.txtMaterial.Text("")
GUI.FormImport.ddlSerial.Text("")
GUI.FormImport.txtTotalSheets.Text("")

F.Intrinsic.UI.CloseWaitDialog
GUI.FormImport.chkDoubleHead.Value(0)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.Post.End

Program.Sub.ProcessDrops.Start
'loop through drops, standalone issue them and standalone receive them

F.Intrinsic.Control.Try

V.Local.sIssueLot.Declare(String)
V.Local.sIssueBin.Declare(String)
V.Local.sIssueHeat.Declare(String)
V.Local.sIssueSerial.Declare(String)
V.Local.sPart.Declare(String)
V.Local.sReV.Declare(String)
V.Local.sLoc.Declare(String)
V.Local.sFile.Declare(String)
V.Local.sLot.Declare(String)
V.Local.sRecept.Declare(String)
V.Local.sReceptLine.Declare(String)
V.Local.i.Declare(Long)
V.Local.sSQL.Declare(String, "")
V.Local.sFullPart.Declare(String)
V.Local.sOldKey.Declare(String)
V.Local.sNewKey.Declare(String)
V.Local.sNewBin.Declare(String)
V.Local.sNewHeat.Declare(String)
V.Local.sNewSerial.Declare(String)
V.Local.sNewLot.Declare(String)
V.Local.sBackupName.Declare(String)
V.Local.sNest.Declare(String)

V.Local.sPart.Set(V.Args.Part)
V.Local.sReV.Set(V.Args.Rev)
V.Local.sLoc.Set(V.Args.Loc)
V.Local.sIssueLot.Set(V.Args.Lot)
V.Local.sIssueBin.Set(V.Args.Bin)
V.Local.sIssueHeat.Set(V.Args.Heat)
V.Local.sIssueSerial.Set(V.Args.Serial)

F.Intrinsic.String.GSSPartString(V.Local.sPart, V.Local.sRev, V.Local.sFullPart)

F.Intrinsic.Control.If(V.DataTable.Drop.RowCount, >, 0)
	'set -drop suffix to the end of the lot
	F.Intrinsic.UI.ChangeWaitStatus("Issuing Remnants", 50)
	V.Local.sLot.Set(V.Local.sIssueLot.Trim)
	
	'check drop suffix option
	F.Intrinsic.Control.CallSub(GetSetting, "PROFILE", V.Global.sProfile, "TYPE", "REMNANT_OPTION", "SETTING", "DROP_SUFFIX")
	F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
		F.Intrinsic.Control.If(V.Local.sLot.Length, <, 14, "AND", V.Local.sLot.Trim, <>, "")
			F.Intrinsic.String.Build("{0}-{1}", V.Local.sLot.Trim, V.Args.Setting, V.Local.sLot)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
	
	'setting dlot in datatable
	F.Data.DataTable.SetValue("Drop", -1, "Lot", V.Local.sLot)
	F.Data.DataView.SetValue("Drops", "dvDrops", -1, "Lot", V.Local.sLot)

	F.Intrinsic.Control.For(V.Local.i, 0, V.DataTable.Drop.RowCount--, 1)
	
		'issue recepts instead
		'Part, Rev, Loc, Qty, Description, Lot,Bin, Hea, Serial, I/R, Drop
		'PART, REV, LOC, QTY, REF, LOT, BIN, HEAT, SERIAL, ISS-REC(I for Issue, R for Rec), GL-ACCT, COST, ALLOW-ZERO-COST-FLAG, WIDTH, LENGTH, UM-WIDTH, UM-LENGTH
		F.Intrinsic.String.Build("{0},{1},{2},{3},,{4},{5},{6},{7},{8},{9},,,,", V.Local.sPart.Trim, V.Local.sReV.Trim, V.Local.sLoc.trim, V.DataTable.Drop(V.Local.i).Drop_Issue!FieldValFloat, V.Local.sIssueLot, V.Local.sIssueBin, V.Local.sIssueHeat, V.Local.sIssueSerial, "I", "N", V.Local.sReceptLine)
		F.Intrinsic.Control.If(V.Local.sRecept, <>, "")
			F.Intrinsic.String.Build("{0}{1}{2}", V.Local.sRecept, V.Ambient.NewLine, V.Local.sReceptLine, V.Local.sRecept)
		F.Intrinsic.Control.Else
			V.Local.sRecept.Set(V.Local.sReceptLine)
		F.Intrinsic.Control.EndIf

		F.Intrinsic.String.Build("{0},{1},{2},{3},,{4},{5},{6},{7},{8},{9},,,,",V.Local.sPart.Trim, V.Local.sReV.Trim, V.Local.sLoc.Trim, V.DataTable.Drop(V.Local.i).Drop_Issue!FieldValFloat, V.Local.sLot, V.DataTable.Drop(V.Local.i).bin!FieldValTrim, V.DataTable.Drop(V.Local.i).Heat!FieldValTrim, V.DataTable.Drop(V.Local.i).Serial!FieldValTrim, "R", "N", V.Local.sReceptLine)
		F.Intrinsic.String.Build("{0}{1}{2}", V.Local.sRecept, V.Ambient.NewLine, V.Local.sReceptLine, V.Local.sRecept)
		
		'build the SQL to update the new item master records with the drop size
		'might want to store drop ID as well
		'storing drop size in drop size and user field 2 because drop size is an obsolete field and doesn't load on the menu
		F.Intrinsic.String.Build("{0}{1}update ITEM_MASTER set DROP_SIZE = '{2}', USER_FIELD_1 = '{9}', USER_FIELD_2 = '{2}' where PART = '{3}' and LOCATION = '{4}' and LOT = '{5}' and BIN = '{6}' and HEAT = '{7}' and SERIAL_NUMBER = '{8}';", V.Local.sSQL, V.Ambient.NewLine, V.DataTable.Drop(V.Local.i).SIZE!FieldValTrim, V.Local.sFullPart, V.Local.sLoc, V.Local.sLot, V.DataTable.Drop(V.Local.i).bin!FieldValTrim, V.DataTable.Drop(V.Local.i).Heat!FieldValTrim, V.DataTable.Drop(V.Local.i).Serial!FieldValTrim, V.DataTable.Drop(V.Local.i).DROP_ID!FieldValTrim, V.Local.sSQL)	
	F.Intrinsic.Control.Next(V.Local.i)
	
	F.Intrinsic.Control.If(V.Local.sRecept.Trim, <>, "")

		F.Intrinsic.String.Build("{0}\{1}", V.Caller.FilesDir, "ISSREC.txt", V.Local.sFile)
	    F.Intrinsic.File.String2File(V.Local.sFile, V.Local.sRecept)
	    
	    'backup file
	    F.Intrinsic.String.StripCharacters(V.Screen.FormImport!cmboNest.Text.Trim, V.Local.sNest)
	    F.Intrinsic.String.Build("StandaloneIssuesReceipts_{0}_{1}.txt", V.Caller.User, V.Local.sNest, V.Local.sBackupName)
		F.Intrinsic.Control.CallSub(BackUpFileString, "Type", "Standalone Issues and Receipts", "Project", "4980", "Name", V.Local.sBackupName, "Contents", V.Local.sRecept)
	    
	    'Run the standalone receipts/issues callwrapper
	    F.Global.Callwrapper.New("IssueReceipt", "Inventory.StandAloneIssueReceipts")
	    F.Global.Callwrapper.SetProperty("IssueReceipt", "FileName", "ISSREC.txt")
	    F.Global.Callwrapper.Run("IssueReceipt")
	    F.Intrinsic.File.DeleteFile(V.Local.sFile)
	    
	    'update the new item master records with the drop size
	    F.ODBC.Connection!Con.Execute(V.Local.sSQL)
	F.Intrinsic.Control.EndIf
	
	'copy item master document control links
	F.Intrinsic.String.RPad(V.Local.sFullPart, " ", 20, V.Local.sFullPart)
	F.Intrinsic.String.RPad(V.Local.sLoc, " ", 2, V.Local.sLoc)
	F.Intrinsic.String.RPad(V.Local.sIssueLot, " ", 15, V.Local.sIssueLot)
	F.Intrinsic.String.RPad(V.Local.sIssueBin, " ", 6, V.Local.sIssueBin)
	F.Intrinsic.String.RPad(V.Local.sIssueHeat, " ", 15, V.Local.sIssueHeat)
	F.Intrinsic.String.RPad(V.Local.sIssueSerial, " ", 30, V.Local.sIssueSerial)
	F.Intrinsic.String.Build("{0}{1}{2}{3}{4}{5}", V.Local.sFullPart, V.Local.sLoc, V.Local.sIssueLot, V.Local.sIssueBin, V.Local.sIssueHeat, V.Local.sIssueSerial, V.Local.sOldKey)
	
	F.Intrinsic.Control.For(V.Local.i, 0, V.DataTable.Drop.RowCount--, 1)
		F.Intrinsic.String.RPad(V.DataTable.Drop(V.Local.i).Lot!FieldValTrim, " ", 15, V.Local.sNewLot)
		F.Intrinsic.String.RPad(V.DataTable.Drop(V.Local.i).bin!FieldValTrim, " ", 6, V.Local.sNewBin)
		F.Intrinsic.String.RPad(V.DataTable.Drop(V.Local.i).Heat!FieldValTrim, " ", 15, V.Local.sNewHeat)
		F.Intrinsic.String.RPad(V.DataTable.Drop(V.Local.i).Serial!FieldValTrim, " ", 30, V.Local.sNewSerial)
		
		F.Intrinsic.String.Build("{0}{1}{2}{3}{4}{5}", V.Local.sFullPart, V.Local.sLoc, V.Local.sNewLot, V.Local.sNewBin, V.Local.sNewHeat, V.Local.sNewSerial, V.Local.sNewKey)
		F.Intrinsic.Control.CallSub(CopyDocumentLinks, "OLD_KEY", V.Local.sOldKey, "NEW_KEY", V.Local.sNewKey, "Type", 31)
	F.Intrinsic.Control.Next(V.Local.i)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.ProcessDrops.End

Program.Sub.PopulateQtyGrid.Start
'get the items and quantities for given material, display in grid

F.Intrinsic.Control.Try

V.Local.sPart.Declare(String)
V.Local.sBin.Declare(String)
V.Local.sSql.Declare(String)
V.Local.sLoc.Declare(String)
V.Local.bMultipleBinIssue.Declare(Boolean, False)

F.Intrinsic.Control.If(V.Screen.FormImport!txtMaterial.Text.Trim, =, "")
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

'Load Lot records for Selected part
F.Intrinsic.Control.If(V.DataTable.Part.Exists,=,True)
	F.Data.DataTable.Close("Part")
F.Intrinsic.Control.EndIf

V.Local.sBin.Set(V.Screen.FormImport!ddlBin.Text)
V.Local.sPart.Set(V.Screen.FormImport!txtMaterial.Text)
V.Local.sLoc.Set(V.Screen.FormImport!txtLocation.Text)
F.Intrinsic.String.Build("select IF(Bin = '{0}',1,2) as Row, Cast(0 as Bit) Issue, 0.0 as Issue_Quantity, Bin, Lot, Heat, Serial_Number, Location, RTRIM(DROP_SIZE) as Size, RTRIM(USER_FIELD_1) DROP_ID, Quantity from v_ITEM_MASTER where Part = '{1}' Order by Row,Bin",V.Local.sBin.PSQLFriendly,V.Local.sPart.PSQLFriendly,V.Local.sLoc.PSQLFriendly,V.Local.sSql)
F.Data.DataTable.CreateFromSQL("Part","Con",V.Local.sSql,True)
F.Intrinsic.Control.If(V.DataTable.Part.RowCount,=,0)
	GUI.FormImport.gsgcMaterial.Enabled(False)
	GUI.FormImport.cmdBinXFer.Enabled(False)
F.Intrinsic.Control.Else
	GUI.FormImport.gsgcMaterial.Enabled(True)
	GUI.FormImport.cmdBinXFer.Enabled(True)
F.Intrinsic.Control.EndIf

GUI.FormImport.gsgcMaterial.AddGridviewFromDatatable("Part","Part")
GUI.FormImport.gsgcMaterial.SetColumnProperty("Part","Row","Visible","False")

F.Intrinsic.Control.CallSub(GetSetting, "PROFILE", V.Global.sProfile, "TYPE", "IMPORT_OPTION", "SETTING", "MULTIPLE_BINS")
F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
	V.Local.bMultipleBinIssue.Set(V.Args.Setting)
F.Intrinsic.Control.EndIf

GUI.FormImport.gsgcMaterial.SetColumnProperty("Part", "Issue", "Visible", V.Local.bMultipleBinIssue)
GUI.FormImport.gsgcMaterial.SetColumnProperty("Part", "Issue_Quantity", "Visible", V.Local.bMultipleBinIssue)
GUI.FormImport.gsgcMaterial.SetColumnProperty("Part", "DROP_ID", "Visible", False)
GUI.FormImport.gsgcMaterial.SetColumnProperty("Part", "ROW", "Visible", False)

GUI.FormImport.gsgcMaterial.SetColumnProperty("Part", "ROW", "AllowShowHide", False)

GUI.FormImport.gsgcMaterial.SetColumnProperty("Part","Bin","HeaderBackColor","#d3d3d3")
GUI.FormImport.gsgcMaterial.SetColumnProperty("Part","Size","HeaderBackColor","#d3d3d3")
GUI.FormImport.gsgcMaterial.SetColumnProperty("Part","Lot","HeaderBackColor","#d3d3d3")
GUI.FormImport.gsgcMaterial.SetColumnProperty("Part","Location","HeaderBackColor","#d3d3d3")
GUI.FormImport.gsgcMaterial.SetColumnProperty("Part","Heat","HeaderBackColor","#d3d3d3")
GUI.FormImport.gsgcMaterial.SetColumnProperty("Part","Serial_Number","HeaderBackColor","#d3d3d3")
GUI.FormImport.gsgcMaterial.SetColumnProperty("Part","Quantity","HeaderBackColor","#d3d3d3")
GUI.FormImport.gsgcMaterial.SetColumnProperty("Part","Issue","HeaderBackColor","#d3d3d3")
GUI.FormImport.gsgcMaterial.SetColumnProperty("Part","Issue_Quantity","HeaderBackColor","#d3d3d3")
GUI.FormImport.gsgcMaterial.SetColumnProperty("Part","DROP_ID","HeaderBackColor","#d3d3d3")
GUI.FormImport.gsgcMaterial.SetColumnProperty("Part","ROW","HeaderBackColor","#d3d3d3")

GUI.FormImport.gsgcMaterial.SetColumnProperty("Part","Serial_Number","Caption","Serial")
GUI.FormImport.gsgcMaterial.SetColumnProperty("Part","Issue_Quantity","Caption","Issue Qty")
GUI.FormImport.gsgcMaterial.SetColumnProperty("Part","DROP_ID","Caption","Drop ID")

GUI.FormImport.gsgcMaterial.SetColumnProperty("Part","Bin","AllowEdit","False")
GUI.FormImport.gsgcMaterial.SetColumnProperty("Part","Size","AllowEdit","False")
GUI.FormImport.gsgcMaterial.SetColumnProperty("Part","Lot","AllowEdit","False")
GUI.FormImport.gsgcMaterial.SetColumnProperty("Part","Location","AllowEdit","False")
GUI.FormImport.gsgcMaterial.SetColumnProperty("Part","Heat","AllowEdit","False")
GUI.FormImport.gsgcMaterial.SetColumnProperty("Part","Serial_Number","AllowEdit","False")
GUI.FormImport.gsgcMaterial.SetColumnProperty("Part","Quantity","AllowEdit","False")
GUI.FormImport.gsgcMaterial.SetColumnProperty("Part", "Issue", "AllowEdit", V.Local.bMultipleBinIssue)
GUI.FormImport.gsgcMaterial.SetColumnProperty("Part", "Issue_Quantity", "AllowEdit", V.Local.bMultipleBinIssue)
GUI.FormImport.gsgcMaterial.SetColumnProperty("Part", "DROP_ID", "AllowEdit", False)

GUI.FormImport.gsgcMaterial.SetColumnProperty("Part","Bin","ReadOnly","True")
GUI.FormImport.gsgcMaterial.SetColumnProperty("Part","Size","ReadOnly","True")
GUI.FormImport.gsgcMaterial.SetColumnProperty("Part","Lot","ReadOnly","True")
GUI.FormImport.gsgcMaterial.SetColumnProperty("Part","Location","ReadOnly","True")
GUI.FormImport.gsgcMaterial.SetColumnProperty("Part","Heat","ReadOnly","True")
GUI.FormImport.gsgcMaterial.SetColumnProperty("Part","Serial_Number","ReadOnly","True")
GUI.FormImport.gsgcMaterial.SetColumnProperty("Part","Quantity","ReadOnly","True")
GUI.FormImport.gsgcMaterial.SetColumnProperty("Part", "Issue", "ReadOnly", V.Local.bMultipleBinIssue.Not)
GUI.FormImport.gsgcMaterial.SetColumnProperty("Part", "Issue_Quantity", "ReadOnly", V.Local.bMultipleBinIssue.Not)
GUI.FormImport.gsgcMaterial.SetColumnProperty("Part", "DROP_ID", "ReadOnly", True)

GUI.FormImport.gsgcMaterial.SetColumnProperty("Part", "Issue", "MaxWidth", 40)

'takes up too much space
GUI.FormImport.gsgcMaterial.AddSummaryItem("Part", "Quantity", "TotalQuantity", "SUM", "Total :", "", "0.00")
GUI.FormImport.gsgcMaterial.AddSummaryItem("Part", "Issue_Quantity", "TotalIssue", "SUM", "Total Issue :", "", "0.00")

GUI.FormImport.gsgcMaterial.MainView("Part")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.PopulateQtyGrid.End

Program.Sub.PopulateBinComboBox.Start
F.Intrinsic.Control.Try

V.Local.sSql.Declare(String)
V.Local.sMat.Declare(String)
V.Local.sLoc.Declare(String)
V.Local.sLoc.Set(V.Screen.FormImport!txtLocation.text.trim)
V.Local.sMat.Set(V.Screen.FormImport!txtMaterial.text.trim)

'getting a list of bin
F.Intrinsic.String.Build("SELECT DISTINCT Bin as BID, BIN FROM V_ITEM_MASTER WHERE PART = '{0}' and Location = '{1}' AND QUANTITY > 0",V.Local.sMat.Trim,V.Local.sLoc.trim,V.Local.sSQL)
F.Data.DataTable.CreateFromSQL("BinDt","Con",V.Local.sSql)

F.Intrinsic.Control.If(V.DataTable.BinDt.RowCount,=,0)
	GUI.FormImport.ddlBin.Enabled(False)
	GUI.FormImport.ddlBin.ClearItems

	GUI.FormImport.ddlBin.Text("")
F.Intrinsic.Control.Else
	GUI.FormImport.ddlBin.Enabled(True)
	GUI.FormImport.ddlBin.ClearItems

	F.Data.Dictionary.CreateFromDataTable("Bin","BinDt","BID","BIN")
	GUI.FormImport.ddlBin.AddItems("Dictionary","Bin")
	F.Data.Dictionary.Close("Bin")
F.Intrinsic.Control.EndIf

F.Data.DataTable.Close("BinDt")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.PopulateBinComboBox.End

Program.Sub.PopulateLotComboBox.Start
F.Intrinsic.Control.Try

V.Local.sSql.Declare(String)
V.Local.sBin.Declare(String)
V.Local.sMat.Declare(String)
V.Local.sLoc.Declare(String)
V.Local.sLoc.Set(V.Screen.FormImport!txtLocation.text.trim)
V.Local.sMat.Set(V.Screen.FormImport!txtMaterial.text.trim)
V.Local.sBin.Set(V.Screen.FormImport!ddlBin.text.trim)

'getting a list of lot
F.Intrinsic.String.Build("SELECT DISTINCT Lot as LID, LOT FROM V_ITEM_MASTER WHERE PART = '{0}' AND QUANTITY > 0 and BIN = '{1}' and Location = '{2}'",V.Local.sMat,V.Local.sBin.trim,V.Local.sLoc.trim,V.Local.sSQL)
F.Data.DataTable.CreateFromSQL("LotDT","Con",V.Local.sSql)

F.Intrinsic.Control.If(V.DataTable.LotDT.RowCount,=,0)
	GUI.FormImport.ddlLot.Enabled(False)

	GUI.FormImport.ddlLot.ClearItems

	GUI.FormImport.ddlLot.Text("")
F.Intrinsic.Control.Else
	GUI.FormImport.ddlLot.Enabled(True)
	GUI.FormImport.ddlLot.ClearItems
	F.Data.Dictionary.CreateFromDataTable("Lot","LotDT","LID","LOT")
	GUI.FormImport.ddlLot.AddItems("Dictionary","Lot")
	F.Data.Dictionary.Close("Lot")
F.Intrinsic.Control.EndIf

F.Data.DataTable.Close("LotDt")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.PopulateLotComboBox.End

Program.Sub.PopulateHeatComboBox.Start
F.Intrinsic.Control.Try

V.Local.sSql.Declare(String)
V.Local.sLot.Declare(String)
V.Local.sBin.Declare(String)
V.Local.sMat.Declare(String)
V.Local.sLoc.Declare(String)
V.Local.sLoc.Set(V.Screen.FormImport!txtLocation.text.trim)
V.Local.sMat.Set(V.Screen.FormImport!txtMaterial.text.trim)
'getting a list of Heat
V.Local.sBin.Set(V.Screen.FormImport!ddlBin.text.trim)
V.Local.sLot.Set(V.Screen.FormImport!ddlLot.text.trim)
F.Intrinsic.String.Build("SELECT DISTINCT HEAT as HID, HEAT FROM V_ITEM_MASTER WHERE PART = '{0}' AND QUANTITY > 0 and BIN = '{1}' and LOT = '{2}' and Location = '{3}'",V.Local.sMat,V.Local.sBin.Trim,V.Local.sLot,V.Local.sLoc.trim,V.Local.sSQL)
F.Data.DataTable.CreateFromSQL("HeatDT","Con",V.Local.sSql)

F.Intrinsic.Control.If(V.DataTable.HeatDT.RowCount,=,0)
	GUI.FormImport.ddlHeat.Enabled(False)

	GUI.FormImport.ddlHeat.ClearItems
	GUI.FormImport.ddlHeat.Text("")
F.Intrinsic.Control.Else
	GUI.FormImport.ddlHeat.Enabled(True)

	GUI.FormImport.ddlHeat.ClearItems
	F.Data.Dictionary.CreateFromDataTable("Heat","HeatDT","HID","HEAT")
	GUI.FormImport.ddlHeat.AddItems("Dictionary","Heat")
	F.Data.Dictionary.Close("Heat")
F.Intrinsic.Control.EndIf

F.Data.DataTable.Close("HeatDt")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.PopulateHeatComboBox.End

Program.Sub.PopulateSerialComboBox.Start
F.Intrinsic.Control.Try

V.Local.sSql.Declare(String)
V.Local.sLot.Declare(String)
V.Local.sHeat.Declare(String)
V.Local.sBin.Declare(String)
V.Local.sMat.Declare(String)
V.Local.sLoc.Declare(String)
V.Local.sLoc.Set(V.Screen.FormImport!txtLocation.text.trim)
V.Local.sMat.Set(V.Screen.FormImport!txtMaterial.text.trim)
'getting a list of serial

V.Local.sLot.Set(V.Screen.FormImport!ddlLot.text.trim)
V.Local.sHeat.Set(V.Screen.FormImport!ddlHeat.text.trim)
V.Local.sBin.Set(V.Screen.FormImport!ddlBin.text.trim)
F.Intrinsic.String.Build("SELECT DISTINCT SERIAL_NUMBER as SID, SERIAL_NUMBER FROM V_ITEM_MASTER WHERE PART = '{0}' AND QUANTITY > 0 and BIN = '{1}' and LOT = '{2}' and HEAT = '{3}' and Location = '{4}'",V.Local.sMat,V.Local.sBin.trim,V.Local.sLot.Trim,V.Local.sHeat.Trim,V.Local.sLoc.trim,V.Local.sSQL)
F.Data.DataTable.CreateFromSQL("SerialDT","Con",V.Local.sSql)

F.Intrinsic.Control.If(V.DataTable.SerialDT.RowCount,=,0)
	GUI.FormImport.ddlSerial.Enabled(False)
	GUI.FormImport.ddlSerial.ClearItems
	GUI.FormImport.ddlSerial.AddItem("")
	GUI.FormImport.ddlSerial.Text("")
F.Intrinsic.Control.Else
	GUI.FormImport.ddlSerial.Enabled(True)

	GUI.FormImport.ddlSerial.ClearItems
	GUI.FormImport.ddlSerial.AddItem("")
	F.Data.Dictionary.CreateFromDataTable("Serial","SerialDT","SID","SERIAL_NUMBER")
	GUI.FormImport.ddlSerial.AddItems("Dictionary","Serial")
	F.Data.Dictionary.Close("Serial")
F.Intrinsic.Control.EndIf

F.Data.DataTable.Close("SerialDT")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.PopulateSerialComboBox.End

Program.Sub.ContextMenuItemSelection.Start
'add or remove rows from the drop table

F.Intrinsic.Control.Try

V.Local.sSQL.Declare(String)
V.Local.iIndex.Declare(Long)
V.Local.fDrop.Declare(Float)

F.Intrinsic.Control.If(V.DataTable.Drops.Exists, =, False)
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.DataView.Drops!dvDrops.Exists, =, False)
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.DataTable.Material.Exists, =, False)
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.DataView.Material!dvMaterial.Exists, =, False)
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.DataView.Material!dvMaterial.RowCount, <, 1)
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.DataTable.dtWorkOrders.Exists, =, False)
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.DataView.dtWorkOrders!dvWorkOrder.Exists, =, False)
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.DataView.dtWorkOrders!dvWorkOrder.RowCount, <, 1)
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

GUI.FormImport.gsgcDrop.GetSelectedRows("gvDrops", V.Local.iIndex)

F.Intrinsic.Control.If(V.Args.ItemName,=,"DELETE")

	F.Intrinsic.Control.If(V.DataView.Drops!dvDrops.RowCount, >, 0)
		V.Local.fDrop.Set(V.DataTable.Drop(V.Local.iIndex).drop_issue!FieldValfloat)
		F.Data.DataTable.DeleteRow("Drop",V.Local.iIndex)
		V.Local.iIndex.Set(V.DataView.Drops!dvDrops(V.Local.iIndex).DataTableIndex)
		
		F.Intrinsic.String.build("Delete From GCG_4980_DROP Where NestID = '{0}' and ID = {1}",V.DataView.Drops!dvDrops(V.DataView.Drops!dvDrops.RowCount--).NestID!FieldValTrim,V.DataView.Drops!dvDrops(V.Local.iIndex).ID!FieldValLong,V.Local.sSQL)
		F.ODBC.Connection!Con.execute(V.Local.sSQL)
		F.Data.DataTable.DeleteRow("Drops",V.Local.iIndex)
		
		F.Intrinsic.Control.CallSub(RecalculateIssues)
	F.Intrinsic.Control.EndIf
	
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.ContextMenuItemSelection.End

Program.Sub.cmboNest_Click.Start
'load the selected nest in on the screen

F.Intrinsic.Control.Try

V.Local.sFilter.Declare(String)
V.Local.fQty.Declare(Float)
V.Local.fFinalIssue.Declare(Float)
V.Local.fFinalDrop.Declare(Float)
V.Local.i.Declare(Long)
V.Local.sProfile.Declare(String)
V.Local.sSelect.Declare(String)
V.Local.bIndirectIssue.Declare(Boolean)
V.Local.sMaterial.Declare(String)
V.Local.bIssueMaterial.Declare(Boolean)
V.Local.sLabel.Declare(String)
V.Local.sWO.Declare(String)
V.Local.fTotal.Declare(Float)
V.Local.bUploadLabor.Declare(Boolean)
V.Local.sSQL.Declare(String)
V.Local.bShowCloseMaterialColumn.Declare(Boolean, False)
V.Local.bShowCloseLaborColumn.Declare(Boolean, False)

F.Intrinsic.Control.If(V.Screen.FormImport!cmboNest.Text.Trim, !=, V.Global.sNest.Trim)
	V.Global.sNest.Set(V.Screen.FormImport!cmboNest.Text.Trim)
F.Intrinsic.Control.Else
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

GUI.FormImport.lblLoading.Visible(True)
GUI.FormImport.gsgcWorkOrders.Visible(False)
F.Intrinsic.Control.BlockEvents

F.Intrinsic.Control.If(V.Screen.FormImport!cmboNest.Text.Trim,<>,"")
	
	GUI.FormImport.gsgcNestList.Enabled(False)
	GUI.FormImport.gsgcWorkOrders.Enabled(False)
	GUI.FormImport.gsgcDrop.Enabled(False)
	GUI.FormImport.gsgcMaterial.Enabled(False)
	
	'clearing datatable that is set to the grid
	F.Data.DataTable.DeleteRow("Drop")
	
	F.Intrinsic.String.Build("NestId = '{0}'",V.Screen.FormImport!cmboNest.Text,V.Local.sFilter)

	F.Data.DataView.SetFilter("Material", "dvMaterial", V.Local.sFilter)
	F.Data.DataView.SetFilter("dtWorkOrders", "dvWorkOrder", V.Local.sFilter)
	F.Data.DataView.SetFilter("Drops", "dvDrops", V.Local.sFilter)
	
	F.Intrinsic.Control.If(V.DataView.Material!dvMaterial.RowCount, >, 0)
		V.Global.sProfile.Set(V.DataView.Material!dvMaterial(0).Profile!FieldValTrim)
		GUI.FormImport.txtProfile.Text(V.Global.sProfile)
		F.Intrinsic.String.Build("Profile = '{0}'", V.Global.sProfile, V.Local.sSelect)
		
		F.Data.DataView.SetFilter("ProfDT", "ProfChkVw", V.Local.sSelect)
		F.Intrinsic.Control.If(V.DataView.ProfDT!ProfChkVw.RowCount, <, 1)
			F.Intrinsic.UI.Msgbox("Error: This nest was imported on a profile that no longer exists and cannot be posted.")
			F.Intrinsic.Control.CallSub(ClearScreen)
			F.Intrinsic.Control.ExitSub
		F.Intrinsic.Control.Else
			V.Local.bIssueMaterial.Set(V.DataView.ProfDT!ProfChkVw(0).BACK_FLUSH_MAT!FieldVal)
			V.Local.bIndirectIssue.Set(V.DataView.ProfDT!ProfChkVw(0).INDIRECT_ISSUE!FieldVal)
			V.Local.sWO.Set(V.DataView.ProfDT!ProfChkVw(0).ISSUE_WO!FieldValTrim)
			V.Local.bUploadLabor.Set(V.DataView.ProfDT!ProfChkVw(0).BACK_FLUSH_LAB!FieldVal)
			V.Global.sEmployee.Set(V.DataView.ProfDT!ProfChkVw(0).DEFAULT_EMP!FieldValTrim)
			
			'grab decimal option
			F.Intrinsic.Control.CallSub(GetSetting, "PROFILE", V.Global.sProfile, "TYPE", "IMPORT_OPTION", "SETTING", "ISSUE_DECIMALS")
			F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
				V.Global.iDecimals.Set(V.Args.Setting)
			F.Intrinsic.Control.Else
				V.Global.iDecimals.Set(4)
			F.Intrinsic.Control.EndIf

		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Else
		F.Intrinsic.UI.Msgbox("Error: Records for this nest not found.")
		F.Intrinsic.Control.CallSub(ClearScreen)
		F.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.EndIf
	
	'check closing labor sequnece option
	F.Intrinsic.Control.CallSub(GetSetting, "PROFILE", V.Global.sProfile, "TYPE", "IMPORT_OPTION", "SETTING", "CLOSE_LABOR_SEQUENCE")
	F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
		F.Intrinsic.Control.If(V.Args.Setting.Trim, =, "MANUAL")
			V.Local.bShowCloseLaborColumn.Set(True)
		F.Intrinsic.Control.Else
			V.Local.bShowCloseLaborColumn.Set(False)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Else
		V.Local.bShowCloseLaborColumn.Set(False)
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(V.Global.bCloseLaborColumnVisible, !=, V.Local.bShowCloseLaborColumn)
		GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "CLOSE_LABOR_SEQUENCE", "Visible", V.Local.bShowCloseLaborColumn)
		GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "CLOSE_LABOR_SEQUENCE", "AllowEdit", V.Local.bShowCloseLaborColumn)
		GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "CLOSE_LABOR_SEQUENCE", "ReadOnly", V.Local.bShowCloseLaborColumn.Not)
	F.Intrinsic.Control.EndIf
	V.Global.bCloseLaborColumnVisible.Set(V.Local.bShowCloseLaborColumn)
	
	'material settings
	F.Intrinsic.Control.If(V.Local.bIssueMaterial)
		F.Intrinsic.Control.If(V.Global.bMaterialColumnsVisible.Not)
			GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "ISSUE", "Visible", True)
			GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "ISSUE", "VisibleIndex", 2)
			GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "GSS_ISSUE", "Visible", True)
			GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "GSS_ISSUE", "VisibleIndex", 3)
		F.Intrinsic.Control.EndIf
		V.Global.bMaterialColumnsVisible.Set(True)
		
		GUI.FormImport.txtDropLength.Enabled(True)
		GUI.FormImport.txtDropWidth.Enabled(True)
		GUI.FormImport.txtDropID.Enabled(True)
		GUI.FormImport.cmdAddDrop.Enabled(True)
		GUI.FormImport.txtTotalSheets.Enabled(True)
		GUI.FormImport.txtMaterial.Enabled(True)
		GUI.FormImport.cmdMaterialBrowser.Enabled(True)
		'GUI.FormImport.txtLocation.Enabled(True)
		GUI.FormImport.ddlBin.Enabled(True)
		GUI.FormImport.ddlLot.Enabled(True)
		GUI.FormImport.ddlHeat.Enabled(True)
		GUI.FormImport.ddlSerial.Enabled(True)
		GUI.FormImport.cmdBinXFer.Enabled(True)
		GUI.FormImport.cmdReFreshQty.Enabled(True)
		GUI.FormImport.txtDropID.Enabled(True)
		GUI.FormImport.txtDropLength.Enabled(True)
		GUI.FormImport.txtDropWidth.Enabled(True)
		
		F.Intrinsic.Control.If(V.Local.bIndirectIssue)
			F.Intrinsic.Control.If(V.Global.bIndirectColumnsVisible.Not)
				GUI.FormImport.lblIssueToIndirect.Visible(True)
				GUI.FormImport.txtIssueToIndirect.Visible(True)
				GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "Excess", "Visible", True)
				GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "Excess", "VisibleIndex", 4)
				GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "GSS_ISSUE", "Visible", False)
				F.Intrinsic.String.Build("Issue to {0}", V.Local.sWO, V.Local.sLabel)
			F.Intrinsic.Control.EndIf
			V.Global.bIndirectColumnsVisible.Set(True)
			
			GUI.FormImport.lblIssueToIndirect.Caption(V.Local.sLabel)
			F.Data.DataTable.Compute("dtWorkOrders", "Sum(Excess)", V.Local.sFilter, V.Local.fTotal)
			GUI.FormImport.txtIssueToIndirect.Text(V.Local.fTotal)
		F.Intrinsic.Control.Else
			F.Intrinsic.Control.If(V.Global.bIndirectColumnsVisible)
				GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "Excess", "Visible", False)
				GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "GSS_ISSUE", "Visible", True)
				
				GUI.FormImport.lblIssueToIndirect.Visible(False)
				GUI.FormImport.txtIssueToIndirect.Visible(False)
			F.Intrinsic.Control.EndIf
			V.Global.bIndirectColumnsVisible.Set(False)
		F.Intrinsic.Control.EndIf
		
		'check closing option
		F.Intrinsic.Control.CallSub(GetSetting, "PROFILE", V.Global.sProfile, "TYPE", "IMPORT_OPTION", "SETTING", "CLOSE_MAT_SEQUENCE")
		F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
			F.Intrinsic.Control.If(V.Args.Setting.Trim, =, "MANUAL")
				V.Local.bShowCloseMaterialColumn.Set(True)
			F.Intrinsic.Control.Else
				V.Local.bShowCloseMaterialColumn.Set(False)
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.Else
			V.Local.bShowCloseMaterialColumn.Set(False)
		F.Intrinsic.Control.EndIf
		
		F.Intrinsic.Control.If(V.Global.bCloseMaterialColumnVisible, !=, V.Local.bShowCloseMaterialColumn)
			GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "CLOSE_MATERIAL_SEQUENCE", "Visible", V.Local.bShowCloseMaterialColumn)
			GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "CLOSE_MATERIAL_SEQUENCE", "AllowEdit", V.Local.bShowCloseMaterialColumn)
			GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "CLOSE_MATERIAL_SEQUENCE", "ReadOnly", V.Local.bShowCloseMaterialColumn.Not)
		F.Intrinsic.Control.EndIf
		V.Global.bCloseMaterialColumnVisible.Set(V.Local.bShowCloseMaterialColumn)
	
		'seeing if dataview isn't empty
		F.Intrinsic.Control.If(V.DataView.dtWorkOrders!dvWorkOrder.RowCount--,<>,-1)
			'set material information
			
			V.Local.sMaterial.Set(V.DataView.dtWorkOrders!dvWorkOrder(V.DataView.dtWorkOrders!dvWorkOrder.RowCount--).Material!FieldValTrim)
			GUI.FormImport.txtMaterial.Text(V.Local.sMaterial.UCase)
			
			'check for long part
			F.Intrinsic.String.Build("select RTRIM(DISPLAY_PART) from INV_LXR where GSS_PART = '{0}'", V.Local.sMaterial, V.Local.sSQL)
			F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sSQL)
			F.Intrinsic.Control.If(V.Ambient.ExecuteAndReturnEOF.Not)
				GUI.FormImport.txtLongMaterial.Visible(True)
				GUI.FormImport.txtLocation.Enabled(False)
				GUI.FormImport.cmdMaterialBrowser.Enabled(False)
				GUI.FormImport.txtLongMaterial.Text(V.Local.sSQL)
			F.Intrinsic.Control.Else
				GUI.FormImport.txtLongMaterial.Visible(False)
				GUI.FormImport.txtLocation.Enabled(True)
				GUI.FormImport.cmdMaterialBrowser.Enabled(True)
				GUI.FormImport.txtLongMaterial.Text("")
			F.Intrinsic.Control.EndIf
			
			GUI.FormImport.txtUM.Text(V.Dictionary.UMDict![V.Local.sMaterial].Trim)
			GUI.FormImport.txtLocation.Text(V.DataView.dtWorkOrders!dvWorkOrder(V.DataView.dtWorkOrders!dvWorkOrder.RowCount--).Loc!FieldValTrim)
			
			'get amount of material to issue
			F.Intrinsic.Control.CallSub(SetMaterialAmount)
			
			F.Intrinsic.Control.CallSub(PopulateBinComboBox)
			F.Intrinsic.Control.If(V.DataView.ProfDT!ProfChkVw(0).MANUAL_BIN!FieldVal)
				GUI.FormImport.ddlBin.Text(V.DataView.ProfDT!ProfChkVw(0).MANUAL_BIN_ENTRY!FieldVal)
			F.Intrinsic.Control.Else
				GUI.FormImport.ddlBin.Text(V.DataView.dtWorkOrders!dvWorkOrder(V.DataView.dtWorkOrders!dvWorkOrder.RowCount--).Bin!FieldVal)
			F.Intrinsic.Control.EndIf
	
			F.Intrinsic.Control.If(V.DataView.Drops!dvDrops.RowCount,>,0)
				F.Intrinsic.Control.For(V.Local.i,0,V.DataView.Drops!dvDrops.RowCount--,1)
					F.Data.DataTable.AddRow("Drop","Nestid",V.DataView.Drops!dvDrops(V.Local.i).NestID!FieldValTrim,"Material",V.DataView.Drops!dvDrops(V.Local.i).Material!FieldValTrim,"Qty",V.DataView.Drops!dvDrops(V.Local.i).Qty!FieldValFloat,"Lot",V.DataView.Drops!dvDrops(V.Local.i).LOT!FieldValTrim,"BIN",V.DataView.Drops!dvDrops(V.Local.i).Bin!FieldValTrim,"Serial",V.DataView.Drops!dvDrops(V.Local.i).Serial!FieldValTrim,"Size",V.DataView.Drops!dvDrops(V.Local.i).Size!FieldValTrim,"Closed","N","ID",V.DataView.Drops!dvDrops(V.Local.i).ID!FieldValTrim,"LOC",V.DataView.dtWorkOrders!dvWorkOrder(0).LOC!FieldValTrim, "Drop_Issue", V.DataView.Drops!dvDrops(V.Local.i).DROP_ISSUE!FieldValTrim, "DROP_ID", V.DataView.Drops!dvDrops(V.Local.i).DROP_ID!FieldValTrim)
				F.Intrinsic.Control.Next(V.Local.i)
			F.Intrinsic.Control.EndIf
			
		F.Intrinsic.Control.Else
			F.Intrinsic.Control.CallSub(PopulateBinComboBox)
		F.Intrinsic.Control.EndIf
		
		F.Intrinsic.Control.CallSub(populatelotcombobox)
		F.Intrinsic.Control.CallSub(populateHeatcombobox)
		F.Intrinsic.Control.CallSub(populateSerialComboBox)
		F.Intrinsic.Control.CallSub(RecalculateIssues)
		F.Intrinsic.Control.CallSub(populateqtygrid)
		F.Intrinsic.Control.CallSub(CheckMultipleBinIssue)
		
		GUI.FormImport.gsgcDrop.Enabled(True)
	F.Intrinsic.Control.Else
		GUI.FormImport.txtTotalSheets.Enabled(False)
		GUI.FormImport.txtTotalSheets.Text("")
		GUI.FormImport.txtMaterial.Enabled(False)
		GUI.FormImport.cmdMaterialBrowser.Enabled(False)
		GUI.FormImport.txtMaterial.Text("")
		GUI.FormImport.txtLocation.Text("")
		GUI.FormImport.txtUM.Text("")
		GUI.FormImport.ddlBin.Enabled(False)
		GUI.FormImport.ddlLot.Enabled(False)
		GUI.FormImport.ddlHeat.Enabled(False)
		GUI.FormImport.ddlSerial.Enabled(False)
		GUI.FormImport.gsgcMaterial.Enabled(False)
		GUI.FormImport.cmdBinXFer.Enabled(False)
		GUI.FormImport.cmdReFreshQty.Enabled(False)
		GUI.FormImport.txtDropID.Enabled(False)
		GUI.FormImport.txtDropID.Text("")
		GUI.FormImport.txtDropLength.Enabled(False)
		GUI.FormImport.txtDropLength.Text("")
		GUI.FormImport.txtDropWidth.Enabled(False)
		GUI.FormImport.txtDropWidth.Text("")
		GUI.FormImport.gsgcDrop.Enabled(False)
		
		F.Intrinsic.Control.If(V.Global.bMaterialColumnsVisible)
			GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "GSS_ISSUE", "Visible", False)
			GUI.FormImport.gsgcWorkOrders.SetColumnProperty("gvWorkOrders", "ISSUE", "Visible", False)
		F.Intrinsic.Control.EndIf
		V.Global.bMaterialColumnsVisible.Set(False)
		
		F.Intrinsic.Control.If(V.DataTable.Part.Exists,=,True)
			F.Data.DataTable.DeleteRow("Part")
			F.Data.DataTable.AcceptChanges("Part")
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.CallSub(CheckGrids, "Issue_Material", V.Local.bIssueMaterial)
	
	F.Intrinsic.Control.If(V.Local.bUploadLabor)
		GUI.FormImport.txtEmployee.Enabled(True)
		GUI.FormImport.cmdEmployeeBrowser.Enabled(True)
		F.Intrinsic.Control.CallSub(LoadDefaultEmployee)
	F.Intrinsic.Control.Else
		GUI.FormImport.txtEmployee.Enabled(False)
		GUI.FormImport.cmdEmployeeBrowser.Enabled(False)
		GUI.FormImport.txtEmployee.Text("")
		F.Intrinsic.Control.CallSub(txtEmployee_LostFocus)
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.CallSub(GetMaterialSequences)
	
F.Intrinsic.Control.Else
	F.Intrinsic.Control.CallSub(ClearScreen)
F.Intrinsic.Control.EndIf

GUI.FormImport.chkDoubleHead.Value(0)

GUI.FormImport.gsgcWorkOrders.Visible(True)
GUI.FormImport.gsgcDrop.Visible(True)
GUI.FormImport.gsgcMaterial.Visible(True)

GUI.FormImport.cmdPost.Enabled(True)
GUI.FormImport.cmdCloseNest.Enabled(True)

F.Intrinsic.Control.CallSub(CheckFlexSchedule)
F.Intrinsic.Control.CallSub(CheckMoveTicket)
F.Intrinsic.Control.CallSub(CheckFlexColumn)
F.Intrinsic.Control.CallSub(SetOriginalMaterial)

F.Intrinsic.Control.UnBlockEvents
GUI.FormImport.gsgcNestList.Enabled(True)
GUI.FormImport.gsgcWorkOrders.Visible(True)
GUI.FormImport.lblLoading.Visible(False)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.cmboNest_Click.End

Program.Sub.CheckMultipleBinIssue.Start
F.Intrinsic.Control.Try

V.Local.bMultipleBinIssue.Declare(Boolean, False)

F.Intrinsic.Control.CallSub(GetSetting, "PROFILE", V.Global.sProfile, "TYPE", "IMPORT_OPTION", "SETTING", "MULTIPLE_BINS")
F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
	V.Local.bMultipleBinIssue.Set(V.Args.Setting)
F.Intrinsic.Control.EndIf

GUI.FormImport.ddlBin.Enabled(V.Local.bMultipleBinIssue.Not)
GUI.FormImport.ddlLot.Enabled(V.Local.bMultipleBinIssue.Not)
GUI.FormImport.ddlHeat.Enabled(V.Local.bMultipleBinIssue.Not)
GUI.FormImport.ddlSerial.Enabled(V.Local.bMultipleBinIssue.Not)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.CheckMultipleBinIssue.End

Program.Sub.CheckMoveTicket.Start
F.Intrinsic.Control.Try

V.Local.sMoveTicketPath.Declare(String)
V.Local.bExists.Declare(Boolean)

F.Intrinsic.Control.CallSub(GetSetting, "PROFILE", V.Global.sProfile, "TYPE", "IMPORT_OPTION", "SETTING", "MOVE_TICKET")
F.Intrinsic.Control.If(V.Args.Setting.Trim, =, "", "OR", V.Args.Setting.Trim, =, "NONE")
	GUI.FormImport.chkMoveTicket.Enabled(False)
	GUI.FormImport.chkMoveTicket.Value(False)
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

F.Intrinsic.String.Build("{0}\MOVE_TICKET_CHECK\MOVE-TICKET-CHECKED{1}.dat", V.Global.sNestXPFold, V.Caller.Terminal, V.Local.sMoveTicketPath)
F.Intrinsic.File.Exists(V.Local.sMoveTicketPath, V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists)
	GUI.FormImport.chkMoveTicket.Value(True)
F.Intrinsic.Control.Else
	GUI.FormImport.chkMoveTicket.Value(False)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.CheckMoveTicket.End

Program.Sub.ClearScreen.Start
F.Intrinsic.Control.Try

F.Intrinsic.Control.BlockEvents
GUI.FormImport.txtTotalSheets.Enabled(False)

GUI.FormImport.cmboNest.ListIndex(-1)

F.Data.DataView.SetFilter("dtWorkOrders", "dvWorkOrder", "[NESTID] = ''")
F.Data.DataView.SetFilter("Drops", "dvDrops", "[NESTID] = ''")
F.Data.DataView.SetFilter("Material", "dvMaterial", "[NESTID] = ''")

GUI.FormImport.txtDropLength.Enabled(False)
GUI.FormImport.txtDropWidth.Enabled(False)
GUI.FormImport.txtDropID.Enabled(False)
GUI.FormImport.cmdAddDrop.Enabled(False)
GUI.FormImport.cmdCreateFlexSchedule.Enabled(False)

F.Intrinsic.Control.If(V.DataTable.Part.Exists)
	F.Data.DataTable.DeleteRow("Part")
	F.Data.DataTable.Close("Part")
F.Intrinsic.Control.EndIf

GUI.FormImport.ddlBin.ListIndex(-1)
GUI.FormImport.ddlHeat.ListIndex(-1)
GUI.FormImport.ddlLot.ListIndex(-1)
GUI.FormImport.ddlSerial.ListIndex(-1)

GUI.FormImport.txtFlexSchedule.Text("")
GUI.FormImport.txtMaterial.Text("")
GUI.FormImport.txtTotalSheets.Text("")
GUI.FormImport.txtLocation.Text("")
GUI.FormImport.txtDropLength.Text("")
GUI.FormImport.txtDropWidth.Text("")
GUI.FormImport.txtDropID.Text("")
GUI.FormImport.txtUM.Text("")
GUI.FormImport.txtIssueToIndirect.Text("")
GUI.FormImport.txtProfile.Text("")
F.Intrinsic.Control.UnBlockEvents

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.ClearScreen.End

Program.Sub.cmboNest_LostFocus.Start
'load the selected nest in on the screen

F.Intrinsic.Control.Try

F.Intrinsic.Control.If(V.Screen.FormImport!cmboNest.Text,<>,"")
	F.Intrinsic.Control.CallSub(cmboNest_click)
	GUI.FormImport.chkDoubleHead.Value(0)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.cmboNest_LostFocus.End

Program.Sub.cmdGetNests_Click.Start
F.Intrinsic.Control.Try

V.Local.iPID.Declare(long)

'refresh by calling iteslF.
F.Global.General.CallAsyncGAS(V.Caller.scriptfile,V.Local.iPID)
F.ODBC.Connection!Con.Close
F.Intrinsic.Control.End

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.cmdGetNests_Click.End

Program.Sub.cmdBinXFer_Click.Start
F.Intrinsic.Control.Try

V.Local.sParams.Declare(String)
F.Intrinsic.String.Build("{0}!*!{1}!*!Y",V.Screen.FormImport!txtMaterial.Text,V.Screen.FormImport!ddlBin.text,V.Local.sParams)

F.Global.General.CallWrapperSync(300080,V.Local.sParams)

F.Intrinsic.Control.CallSub(populateqtygrid)
F.Intrinsic.Control.CallSub(cmboNest_Click)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.cmdBinXFer_Click.End

Program.Sub.MoveTicket.Start
'launch GCG_4980_MoveTicket.g2u to print the appropriate Move Ticket

F.Intrinsic.Control.Try

V.Local.sPassedData.Declare(String)
V.Local.sPath.Declare(String)

'set the data to pass to the move ticket script
F.Intrinsic.Control.CallSub(GetSetting, "PROFILE", V.Global.sProfile, "TYPE", "IMPORT_OPTION", "SETTING", "MOVE_TICKET")
F.Intrinsic.Control.If(V.Args.Setting.Trim, =, "")
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

F.Global.General.SetPassedDataElement("MOVE_TICKET", V.Args.Setting)
F.Intrinsic.Control.If(V.Args.Setting.Trim, =, "CODESOFT")
	F.Intrinsic.Control.CallSub(GetSetting, "PROFILE", V.Global.sProfile, "TYPE", "IMPORT_OPTION", "SETTING", "CUSTOM_LABEL")
	F.Global.General.SetPassedDataElement("CUSTOM_LABEL", V.Args.Setting)
F.Intrinsic.Control.EndIf

F.Intrinsic.String.Build("{0}*#!#*{1}*#!#*{2}*#!#*{3}*#!#*{4}*#!#*{5}*#!#*{6}*#!#*{7}*#!#*{8}*#!#*{9}*#!#*{10}*#!#*{11}", V.Args.JOB, V.Args.SUFFIX, V.Args.SEQ, V.Args.QTY, V.Args.EMPLOYEE, V.Args.WC, V.Args.CLOSEFLAG, V.Args.QUALITYNUMBER, V.Args.SCRAPREF, V.Args.SCRAPQTY, V.Args.COMMENTS, V.Args.SCRAP_CODE, V.Local.sPassedData)
F.Global.General.SetPassedDataElement("DATA", V.Local.sPassedData)

'launch it
F.Intrinsic.String.Build("{0}\GCG_4980_MoveTicket.g2u", V.Ambient.ScriptPath, V.Local.sPath)
F.Global.General.CallSyncGAS(V.Local.sPath)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.MoveTicket.End

Program.Sub.chkMoveTicket_Click.Start
F.Intrinsic.Control.Try

V.Local.bExists.Declare(Boolean)
V.Local.sPath.Declare(String)

F.Intrinsic.String.Build("{0}\MOVE_TICKET_CHECK\", V.Global.sNestXPFold, V.Local.sPath)
F.Intrinsic.Control.CallSub(CheckDirectories, "DIRECTORIES", V.Local.sPath)
F.Intrinsic.String.Build("{0}MOVE-TICKET-CHECKED{1}.dat", V.Local.sPath, V.Caller.Terminal, V.Local.sPath)
F.Intrinsic.Control.If(V.Screen.FormImport!chkMoveTicket.CheckedAsBoolean)
	F.Intrinsic.File.String2File(V.Local.sPath, "MOVE TICKET: TRUE")
F.Intrinsic.Control.Else
	F.Intrinsic.File.DeleteFile(V.Local.sPath)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.chkMoveTicket_Click.End

Program.Sub.chkDoubleHead_Click.Start
F.Intrinsic.Control.Try

V.Local.iCount.Declare
V.Local.sNestID.declare
V.Local.fhold.Declare
V.Local.sTotSheets.Declare

V.Local.sNestID.Set(V.Screen.FormImport!cmboNest.text)
V.Local.sTotSheets.Set(V.Screen.FormImport!txtTotalSheets.text)

F.Intrinsic.Control.If(V.Local.sNestID.Trim,=,"","OR",V.Local.sTotSheets.Float,=,0)
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Screen.FormImport!chkDoubleHead.Checkedasboolean)
	F.Intrinsic.Control.For(V.Local.iCount,0,V.DataView.dtWorkOrders!dvWorkOrder.RowCount--,1)
		V.Local.fHold.Set(V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).GOOD_PC!FieldValFloat)
		F.Intrinsic.Math.Mult(V.Local.fHold,2,V.Local.fHold)
		F.Data.DataView.SetValue("dtWorkOrders","dvWorkOrder",V.Local.iCount,"GOOD_PC",V.Local.fHold)
	F.Intrinsic.Control.Next(V.Local.iCount)
	F.Intrinsic.Math.Mult(V.Local.sTotSheets.Float,2,V.Local.fHold)
	
	F.Intrinsic.Control.CallSub(SetTotalMaterial, "Amount", V.Local.fhold)

F.Intrinsic.Control.Else	
	F.Intrinsic.Control.For(V.Local.iCount,0,V.DataView.dtWorkOrders!dvWorkOrder.RowCount--,1)
		V.Local.fHold.Set(V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCount).GOOD_PC!FieldValFloat)
		F.Intrinsic.Math.Div(V.Local.fHold,2,V.Local.fHold)
		F.Data.DataView.SetValue("dtWorkOrders","dvWorkOrder",V.Local.iCount,"GOOD_PC",V.Local.fHold)
	F.Intrinsic.Control.Next(V.Local.iCount)
	F.Intrinsic.Math.Div(V.Local.sTotSheets.Float,2,V.Local.fHold)

	F.Intrinsic.Control.CallSub(SetTotalMaterial, "Amount", V.Local.fhold)
	
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.chkDoubleHead_Click.End

Program.Sub.LoadNests.Start
'load in the nest list grid

F.Intrinsic.Control.Try

V.Local.sSQL.Declare(String)
V.Local.iCounter.Declare(Long)
V.Local.sTemp.Declare(String)

V.Local.sSQL.Set("Select Distinct rtrim(NestId) as Nest, '' as Parent, Cast(0 as BIT) as Post, RTRIM(FLEXID) FLEX From GCG_4980_MAT Where Closed = 'N' and READY_FLAG = 'Y' and RTRIM(IsNull(NESTID, '')) <> ''  Order by NestID")
F.Intrinsic.Control.If(V.DataTable.dtNests.Exists)
	F.Data.DataTable.Close("dtNests")
F.Intrinsic.Control.EndIf
F.Data.DataTable.CreateFromSQL("dtNests", "Con", V.Local.sSQL, True)

'add nests to drop down
GUI.FormImport.cmboNest.ClearItems
GUI.FormImport.cmboNest.AddItem("")
GUI.FormImport.cmboNest.AddItems("DataTable", "dtNests", "Nest", "Nest")

'split on underscore to get parent nests
'this is mostly for Boost sheet by sheet import. Nests are named with Nest_Sheet, so this way they can group based on parent
'nest and select all of one
F.Intrinsic.Control.For(V.Local.iCounter, 0, V.DataTable.dtNests.RowCount--, 1)
	F.Intrinsic.String.Split(V.DataTable.dtNests(V.Local.iCounter).NEST!FieldValTrim, "_", V.Local.sTemp)
	F.Intrinsic.Control.If(V.Local.sTemp.UBound, >, 0)
		F.Data.DataTable.SetValue("dtNests", V.Local.iCounter, "Parent", V.Local.sTemp(0).Trim)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Next(V.Local.iCounter)

GUI.FormImport.gsgcNestList.AddGridviewFromDatatable("gvNests", "dtNests")

GUI.FormImport.gsgcNestList.SetGridviewProperty("gvNests", "MultiSelect", False)

GUI.FormImport.gsgcNestList.SetColumnProperty("gvNests", "Post", "ShowCaption", False)

GUI.FormImport.gsgcNestList.SetColumnProperty("gvNests", "Nest", "HeaderFontBold", True)
GUI.FormImport.gsgcNestList.SetColumnProperty("gvNests", "Post", "HeaderFontBold", True)
GUI.FormImport.gsgcNestList.SetColumnProperty("gvNests", "Parent", "HeaderFontBold", True)
GUI.FormImport.gsgcNestList.SetColumnProperty("gvNests", "FLEX", "HeaderFontBold", True)

GUI.FormImport.gsgcNestList.SetColumnProperty("gvNests", "Nest", "ReadOnly", True)
GUI.FormImport.gsgcNestList.SetColumnProperty("gvNests", "Post", "ReadOnly", True)
GUI.FormImport.gsgcNestList.SetColumnProperty("gvNests", "Parent", "ReadOnly", True)
GUI.FormImport.gsgcNestList.SetColumnProperty("gvNests", "FLEX", "ReadOnly", True)

GUI.FormImport.gsgcNestList.SetColumnProperty("gvNests", "Nest", "AllowEdit", False)
GUI.FormImport.gsgcNestList.SetColumnProperty("gvNests", "Post", "AllowEdit", False)
GUI.FormImport.gsgcNestList.SetColumnProperty("gvNests", "Parent", "AllowEdit", False)
GUI.FormImport.gsgcNestList.SetColumnProperty("gvNests", "FLEX", "AllowEdit", False)

GUI.FormImport.gsgcNestList.SetColumnProperty("gvNests", "Nest", "HeaderHAlignment", "Near")
GUI.FormImport.gsgcNestList.SetColumnProperty("gvNests", "Post", "HeaderHAlignment", "Center")
GUI.FormImport.gsgcNestList.SetColumnProperty("gvNests", "Parent", "HeaderHAlignment", "Near")
GUI.FormImport.gsgcNestList.SetColumnProperty("gvNests", "FLEX", "HeaderHAlignment", "Near")

GUI.FormImport.gsgcNestList.SetColumnProperty("gvNests", "Parent", "Visible", False)
GUI.FormImport.gsgcNestList.SetColumnProperty("gvNests", "FLEX", "Visible", False)

GUI.FormImport.gsgcNestList.SetColumnProperty("gvNests", "Post", "MaxWidth", 40)

GUI.FormImport.gsgcNestList.SetColumnProperty("gvNests", "Post", "MinWidth", 30)
GUI.FormImport.gsgcNestList.SetColumnProperty("gvNests", "FLEX", "MinWidth", 50)
GUI.FormImport.gsgcNestList.SetColumnProperty("gvNests", "Parent", "MinWidth", 60)
GUI.FormImport.gsgcNestList.SetColumnProperty("gvNests", "Nest", "MinWidth", 60)

GUI.FormImport.gsgcNestList.SetColumnProperty("gvNests", "FLEX", "Caption", "Flex ID")

GUI.FormImport.gsgcNestList.MainView("gvNests")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.LoadNests.End

Program.Sub.cmdPostSelected_Click.Start
'loop through and post each nest selected in the nest grid

F.Intrinsic.Control.Try

V.Local.iCounter.Declare(Long)
V.Local.sMessage.Declare(String)
V.Local.sRet.Declare(String)
V.Local.bMoveTicket.Declare(Boolean)
V.Local.bCheck.Declare(Boolean, False)

F.Intrinsic.Control.If(V.DataTable.dtWorkOrders.RowCount, <, 1)
	F.Intrinsic.Control.If(V.Global.bUnattended.Not)
		F.Intrinsic.UI.Msgbox("No records available to post.")
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

GUI.FormImport..Enabled(False)
V.Local.bMoveTicket.Set(V.Screen.FormImport!chkMoveTicket.checkedAsBoolean)

F.Intrinsic.Control.If(V.DataView.ProfDT!ProfChkVw(0).BACK_FLUSH_MAT!FieldVal)
	F.Intrinsic.Control.CallSub(GetSetting, "PROFILE", V.Global.sProfile, "TYPE", "IMPORT_OPTION", "SETTING", "CHECK_MATERIAL")
	F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
		F.Intrinsic.Control.If(V.Args.Setting.Trim)
			V.Local.bCheck.Set(True)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Data.DataView.Create("dtNests", "dvPost", 22, "[POST] = True", "")
F.Intrinsic.Control.If(V.DataView.dtNests!dvPost.RowCount, >, 0)

	F.Intrinsic.Control.If(V.Global.bUnattended.Not)
		F.Intrinsic.UI.Msgbox("Post selected nests?", "Post Selected", 4, V.Local.sRet)
	F.Intrinsic.Control.Else
		V.Local.sRet.Set(6)
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(V.Local.sRet.Long, =, 6)
		
		F.Intrinsic.UI.InvokeWaitDialog("Checking to see if values are Entered.","Updating")
		F.Intrinsic.Control.BlockEvents
		F.Intrinsic.Control.For(V.Local.iCounter, V.DataView.dtNests!dvPost.RowCount--, 0, -1)
		
			'load the screen
			GUI.FormImport.cmboNest.Text(V.DataView.dtNests!dvPost(V.Local.iCounter).Nest!FieldValTrim)
			F.Intrinsic.Control.CallSub(cmboNest_Click)
			
			'post the nest
			F.Intrinsic.Control.If(V.Local.bCheck)
				F.Intrinsic.Control.CallSub(CheckMaterial)
				F.Intrinsic.Control.If(V.Args.ENOUGH, =, False)
					F.Intrinsic.Control.If(V.Global.bUnattended.Not)
						F.Intrinsic.UI.Msgbox("Not enough material to post.")
					F.Intrinsic.Control.Else
						'add log
						F.Intrinsic.String.Build("Not enough material to post Nest {0}. Skipping...", V.DataView.dtNests!dvPost(V.Local.iCounter).Nest!FieldValTrim, V.Local.sMessage)
						F.Intrinsic.Control.CallSub(AddLog, "Project", "4980", "Task", "Nesting_Posting", "Message", V.Local.sMessage)
					F.Intrinsic.Control.EndIf
					
				F.Intrinsic.Control.Else
					F.Intrinsic.Control.CallSub(Post, "Nest", V.DataView.dtNests!dvPost(V.Local.iCounter).Nest!FieldValTrim, "PrintMoveTicket", V.Local.bMoveTicket)
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.Else
				F.Intrinsic.Control.CallSub(Post, "Nest", V.DataView.dtNests!dvPost(V.Local.iCounter).Nest!FieldValTrim, "PrintMoveTicket", V.Local.bMoveTicket)
			F.Intrinsic.Control.EndIf
			
		F.Intrinsic.Control.Next(V.Local.iCounter)
		F.Intrinsic.Control.UnBlockEvents
		F.Intrinsic.UI.CloseWaitDialog
	F.Intrinsic.Control.EndIf
	
F.Intrinsic.Control.Else
	F.Intrinsic.Control.If(V.Global.bUnattended.Not)
		F.Intrinsic.UI.Msgbox("No nests selected to post.")
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf
F.Data.DataView.Close("dtNests", "dvPost")

'refresh lists
F.Intrinsic.Control.CallSub(LoadNests)

GUI.FormImport.cmboNest.Text("")
F.Intrinsic.Control.CallSub(cmboNest_Click)

GUI.FormImport..SetFocus
GUI.FormImport..Enabled(True)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.cmdPostSelected_Click.End

Program.Sub.txtEmployee_LostFocus.Start
'make sure the employee typed in is valid
'then set it to the workorder datatable

F.Intrinsic.Control.Try

V.Local.sID.Declare(String)
V.Local.sSQL.Declare(String)
V.Local.sRet.Declare(String)

V.Local.sID.Set(V.Screen.FormImport!txtEmployee.Text.Trim)
F.Intrinsic.String.Replace(V.Local.sID, "%", "", V.Local.sID)
F.Intrinsic.String.Replace(V.Local.sID, "$", "", V.Local.sID)

F.Intrinsic.Control.BlockEvents
GUI.FormImport.txtEmployee.Text(V.Local.sID)
F.Intrinsic.Control.UnBlockEvents

F.Intrinsic.Control.If(V.Local.sID.Trim, =, "")
	GUI.FormImport.txtEmployeeName.Text("")
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

F.Intrinsic.String.LPad(V.Local.sID, "0", 5, V.Local.sID)
F.Intrinsic.String.Build("select NAME from V_EMPLOYEE_MSTR where EMPLOYEE = '{0}'", V.Local.sID.PSQLFriendly, V.Local.sSQL)

F.Intrinsic.Control.BlockEvents
F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
F.Intrinsic.Control.If(V.Ambient.ExecuteAndReturnEOF)
	F.Intrinsic.UI.Msgbox("Invalid Employee Entered.")
	GUI.FormImport.txtEmployee.Text("")
	GUI.FormImport.txtEmployeeName.Text("")
F.Intrinsic.Control.Else
	GUI.FormImport.txtEmployee.Text(V.Local.sID)
	GUI.FormImport.txtEmployeeName.Text(V.Local.sRet)
F.Intrinsic.Control.EndIf
F.Intrinsic.Control.UnBlockEvents

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.txtEmployee_LostFocus.End

Program.Sub.gsgcNestList_RowCellClick.Start
'allow user to select nests from the nest list grid

F.Intrinsic.Control.Try

V.Local.bSelected.Declare(Boolean)

F.Intrinsic.Control.If(V.Args.Column, =, "Nest", "OR", V.Args.Column, =, "FLEX")
	F.Intrinsic.Control.BlockEvents
	GUI.FormImport.cmboNest.Text(V.DataTable.dtNests(V.Args.RowIndex).NEST!FieldValTrim)
	F.Intrinsic.Control.CallSub(cmboNest_Click)
	F.Intrinsic.Control.UnBlockEvents
F.Intrinsic.Control.ElseIf(V.Args.Column.UCase, =, "POST")
	V.Local.bSelected.Set(V.DataTable.dtNests(V.Args.RowIndex).POST!FieldVal)
	F.Data.DataTable.SetValue("dtNests", V.Args.RowIndex, "POST", V.Local.bSelected.Not)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.gsgcNestList_RowCellClick.End

Program.Sub.cmdEmployeeBrowser_Click.Start
'a browser to select an employee from

F.Intrinsic.Control.Try

V.Local.sRet.Declare(String)
V.Local.sSql.Declare
V.local.sTitles.Declare
V.Local.iWidths.Declare

'create browser, exclude salaried employess
V.Local.sSql.Set("select EMPLOYEE, NAME from V_EMPLOYEE_MSTR where DATE_TERMINATION = '1900-01-01' and PAY_TYPE <> 'S'")
F.Intrinsic.String.Split("Employee ID*!*Name","*!*",V.Local.sTitles)
F.Intrinsic.String.Split("300*!*600","*!*",V.Local.iWidths)
F.Intrinsic.UI.Browser("Select Employee","Con",V.Local.sSql,V.Local.sTitles,V.Local.iWidths,V.Local.sRet)

F.Intrinsic.Control.If(V.Local.sRet.IsCancel)
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

F.Intrinsic.String.Split(V.Local.sRet, "*!*", V.Local.sRet)
GUI.FormImport.txtEmployee.Text(V.Local.sRet(0).Trim)
GUI.FormImport.txtEmployeeName.Text(V.Local.sRet(1).Trim)

'F.Intrinsic.Control.CallSub(SetEmployee)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.cmdEmployeeBrowser_Click.End

Program.Sub.SetContextMenus.Start
'set up the context menus for the nest list grid and drop grid

F.Intrinsic.Control.Try

GUI.FormImport..ContextMenuCreate("ctxNests")

GUI.FormImport..ContextMenuAddItem("ctxNests", "SelectAll", 0, "Select All")
GUI.FormImport..ContextMenuSetItemEventHandler("ctxNests", "SelectAll", "ctxSelectAll")

GUI.FormImport..ContextMenuAddItem("ctxNests", "DeselectAll", 0, "Deselect All")
GUI.FormImport..ContextMenuSetItemEventHandler("ctxNests", "DeselectAll", "ctxSelectAll")

GUI.FormImport..ContextMenuAddItem("ctxNests", "SelectFiltered", 0, "Select Filtered Rows")
GUI.FormImport..ContextMenuSetItemEventHandler("ctxNests", "SelectFiltered", "ctxSelectFilteredRows")

GUI.FormImport..ContextMenuAddItem("ctxNests", "DeselectFiltered", 0, "Deselect Filtered Rows")
GUI.FormImport..ContextMenuSetItemEventHandler("ctxNests", "DeselectFiltered", "ctxSelectFilteredRows")

GUI.FormImport..ContextMenuAddItem("ctxNests", "FlexSchedule", 0, "Create Flex Schedule for Selected Nests")
GUI.FormImport..ContextMenuSetItemEventHandler("ctxNests", "FlexSchedule", "ctxFlexSchedule")

GUI.FormImport..ContextMenuAddItem("ctxNests", "PostSelected", 0, "Post Selected Nests")
GUI.FormImport..ContextMenuSetItemEventHandler("ctxNests", "PostSelected", "cmdPostSelected_Click")

GUI.FormImport..ContextMenuAddItem("ctxNests", "Group", 0, "Group by Parent Nest")
GUI.FormImport..ContextMenuSetItemEventHandler("ctxNests", "Group", "ctxGroupByParentNest")

GUI.FormImport..ContextMenuAddItem("ctxNests", "Ungroup", 0, "Clear Grouping")
GUI.FormImport..ContextMenuSetItemEventHandler("ctxNests", "Ungroup", "ctxGroupByParentNest")

GUI.FormImport..ContextMenuAddItem("ctxNests", "Delete", 0, "Delete Selected")
GUI.FormImport..ContextMenuSetItemEventHandler("ctxNests", "Delete", "ctxDeleteSelected")

GUI.FormImport.gsgcNestList.ContextMenuAttach("ctxNests")

GUI.FormImport..ContextMenuCreate("ctxDrops")
GUI.FormImport..ContextMenuAddItem("ctxDrops","Delete",0,"Delete")
GUI.FormImport..ContextMenuSetItemEventHandler("ctxDrops","Delete","ContextMenuItemSelection")
GUI.FormImport.gsgcDrop.ContextMenuAttach("ctxDrops")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.SetContextMenus.End

Program.Sub.ctxDeleteSelected.Start
'delete the selected nests

V.Local.iRet.Declare(Long)
V.Local.iCounter.Declare(Long)

GUI.FormImport.cmdCreateFlexSchedule.Enabled(False)
GUI.FormImport..Enabled(False)

'check selection
F.Data.DataView.Create("dtNests", "dvDelete", 22, "[POST] = True", "")
F.Intrinsic.Control.If(V.DataView.dtNests!dvDelete.RowCount, >, 0)
	F.Intrinsic.UI.Msgbox("Delete the selected Nests?", "Delete", 4, V.Local.iRet)
	F.Intrinsic.Control.If(V.Local.iRet, =, V.Ambient.MsgBoxYes)
		V.Global.bMultipleDelete.Set(True)
		F.Intrinsic.Control.For(V.Local.iCounter, 0, V.DataView.dtNests!dvDelete.RowCount--, 1)
			'load the screen
			GUI.FormImport.cmboNest.Text(V.DataView.dtNests!dvDelete(V.Local.iCounter).Nest!FieldValTrim)
			F.Intrinsic.Control.CallSub(cmboNest_Click)
			
			'delete nest
			F.Intrinsic.Control.CallSub(cmdCloseNest_Click)
		F.Intrinsic.Control.Next(V.Local.iCounter)
		V.Global.bMultipleDelete.Set(False)
		V.Global.bDoNotDeleteFlexSchedule.Set(False)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf
F.Data.DataView.Close("dtNests", "dvDelete")

F.Intrinsic.Control.CallSub(LoadNests)

GUI.FormImport.cmboNest.Text("")
F.Intrinsic.Control.CallSub(cmboNest_Click)

GUI.FormImport..Enabled(True)
GUI.FormImport..SetFocus
Program.Sub.ctxDeleteSelected.End

Program.Sub.ctxFlexSchedule.Start
'create one flex schedule for all nests selected

F.Intrinsic.Control.Try

V.Local.sRet.Declare(String)
V.Local.iRet.Declare(Long)
V.Local.iCounter.Declare(Long)
V.Local.sFileName.Declare(String)
V.Local.sContents.Declare(String)
V.Local.sFilter.Declare(String)
V.Local.iWorkOrderCounter.Declare(Long)
V.Local.iSequence.Declare(Long, 0)
V.Local.sSequence.Declare(String)
V.Local.sSQL.Declare(String)
V.Local.bRelease.Declare(Boolean, False)

GUI.FormImport.cmdCreateFlexSchedule.Enabled(False)
GUI.FormImport..Enabled(False)

'maybe check if this/these profiles are set to use flex schedules

'check release option
F.Intrinsic.Control.CallSub(GetSetting, "PROFILE", V.Global.sProfile, "TYPE", "IMPORT_OPTION", "SETTING", "RELEASE_WORK_ORDERS")
F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
	V.Local.bRelease.Set(V.Args.Setting)
F.Intrinsic.Control.EndIf

'check selection
F.Data.DataView.Create("dtNests", "dvFlex", 22, "[POST] = True", "")
F.Intrinsic.Control.If(V.DataView.dtNests!dvFlex.RowCount, >, 0)
	F.Intrinsic.UI.Msgbox("Create flex schedule with selected nests?", "Flex Schedule", 4, V.Local.iRet)
	F.Intrinsic.Control.If(V.Local.iRet, =, V.Ambient.MsgBoxYes)
	
		'check if flex schedules already exist
		F.Data.DataView.SetFilter("dtNests", "dvFlex", "[POST] = True and [FLEX] <> ''")
		F.Intrinsic.Control.If(V.DataView.dtNests!dvFlex.RowCount, >, 0)
			F.Intrinsic.UI.Msgbox("Some of these nests already have flex schedules assigned. Continue?", "Flex Schedule", 4, V.Local.iRet)
		F.Intrinsic.Control.EndIf
		
		F.Intrinsic.Control.If(V.Local.iRet, =, V.Ambient.MsgBoxYes)
			F.Data.DataView.SetFilter("dtNests", "dvFlex", "[POST] = True")
			
			'grab flex schedule number
			F.Intrinsic.Control.CallSub(GetNextFlexSchedule)
			
			F.Data.DataView.Create("dtWorkOrders", "dvWorkOrdersFlex", 22)
			F.Intrinsic.Control.For(V.Local.iCounter, 0, V.DataView.dtNests!dvFlex.RowCount--, 1)
				'grab the work orders in this nest
				F.Intrinsic.String.Build("[NESTID] = '{0}'", V.DataView.dtNests!dvFlex(V.Local.iCounter).NEST!FieldValTrim, V.Local.sFilter)
				F.Data.DataView.SetFilter("dtWorkOrders", "dvWorkOrdersFlex", V.Local.sFilter)
				
				'add nests to flex schedule datatable
				F.Intrinsic.Control.For(V.Local.iWorkOrderCounter, 0, V.DataView.dtWorkOrders!dvWorkOrdersFlex.RowCount--, 1)
					
					'format flex schedule sequence
					F.Intrinsic.Math.Add(V.Local.iSequence, 1, V.Local.iSequence)
    				F.Intrinsic.String.Format(V.Local.iSequence, "000000", V.Local.sSequence)
    				
    				'grab WC, part, and sequence
    				F.Intrinsic.String.Build("SELECT TOP 1 PART AS WC FROM V_JOB_OPERATIONS WHERE JOB = '{0}' AND SUFFIX = '{1}' AND SEQ = '{2}' AND LMO = 'L' ORDER BY SEQ ASC", V.DataView.dtWorkOrders!dvWorkOrdersFlex(V.Local.iWorkOrderCounter).JOB!FieldValTrim, V.DataView.dtWorkOrders!dvWorkOrdersFlex(V.Local.iWorkOrderCounter).SUFFIX!FieldValTrim, V.DataView.dtWorkOrders!dvWorkOrdersFlex(V.Local.iWorkOrderCounter).SEQUENCE!FieldValTrim, V.Local.sSQL)
					F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
					F.Intrinsic.String.Split(V.Local.sRet, "*!*", V.Local.sRet)
					V.Local.sRet.RedimPreserve(0, 0)
					
					F.Intrinsic.Control.If(V.DataView.dtWorkOrders!dvWorkOrdersFlex(V.Local.iWorkOrderCounter).WC!FieldValTrim, =, "")
						V.Local.sRet.Set(V.Local.sRet(0))
					F.Intrinsic.Control.Else
						V.Local.sRet.Set(V.DataView.dtWorkOrders!dvWorkOrdersFlex(V.Local.iWorkOrderCounter).WC!FieldValTrim)
					F.Intrinsic.Control.EndIf
    				
    				F.Data.DataTable.AddRow("6000", "SchedNumber", V.Args.Schedule, "SchedIncrement", V.Local.sSequence, "MatWO", V.DataView.dtWorkOrders!dvWorkOrdersFlex(V.Local.iWorkOrderCounter).JOB!FieldValTrim, "MatSuff", V.DataView.dtWorkOrders!dvWorkOrdersFlex(V.Local.iWorkOrderCounter).SUFFIX!FieldValTrim, "MatSeq", V.DataView.dtWorkOrders!dvWorkOrdersFlex(V.Local.iWorkOrderCounter).MSEQUENCE!FieldValTrim, "LabWO", V.DataView.dtWorkOrders!dvWorkOrdersFlex(V.Local.iWorkOrderCounter).JOB!FieldValTrim, "LabSuff", V.DataView.dtWorkOrders!dvWorkOrdersFlex(V.Local.iWorkOrderCounter).SUFFIX!FieldValTrim, "LabSeq", V.DataView.dtWorkOrders!dvWorkOrdersFlex(V.Local.iWorkOrderCounter).SEQUENCE!FieldValTrim, "LabWorkCenter", V.Local.sRet, "LabWOPart", V.DataView.dtWorkOrders!dvWorkOrdersFlex(V.Local.iWorkOrderCounter).MATERIAL!FieldValTrim, "LabWOLoc", V.DataView.dtWorkOrders!dvWorkOrdersFlex(V.Local.iWorkOrderCounter).LOC!FieldValTrim, "SchedFromDate", V.Ambient.Date.FormatMMDDYY)
    				
    				F.Intrinsic.Control.If(V.Local.bRelease)
    					F.Intrinsic.Control.If(V.DataView.dtWorkOrders!dvWorkOrdersFlex(V.Local.iWorkOrderCounter).RELEASED!FieldValTrim, !=, "Y")
    						F.Intrinsic.Control.CallSub(ReleaseWorkOrder, "Job", V.DataView.dtWorkOrders!dvWorkOrdersFlex(V.Local.iWorkOrderCounter).JOB!FieldValTrim, "Suffix", V.DataView.dtWorkOrders!dvWorkOrdersFlex(V.Local.iWorkOrderCounter).SUFFIX!FieldValTrim)
    						F.Data.DataView.SetValue("dtWorkOrders", "dvWorkOrdersFlex", V.Local.iWorkOrderCounter, "RELEASED", "Y")
    					F.Intrinsic.Control.EndIf
    				F.Intrinsic.Control.EndIf
    				
				F.Intrinsic.Control.Next(V.Local.iWorkOrderCounter)
			F.Intrinsic.Control.Next(V.Local.iCounter)
			V.Local.sRet.Redim(0, 0)
			
			'upload
			F.Intrinsic.Control.CallSub(6000Sync)
			
			'back up the flex schedule file (it remains after uploading)
			F.Intrinsic.String.Build("{0}\SCHED.txt", V.Caller.FilesDir, V.Local.sFileName)
			F.Intrinsic.File.File2String(V.Local.sFileName, V.Local.sContents)
			F.Intrinsic.String.Build("FlexScheduleUpload_{0}_{1}.txt", V.Caller.User, V.Args.Schedule, V.Local.sFileName)
			F.Intrinsic.Control.CallSub(BackUpFileString, "Type", "Flex Schedule Uploads", "Project", "4980", "Name", V.Local.sFileName, "Contents", V.Local.sContents)
			
			'update last used schedule number
			F.Intrinsic.Control.CallSub(UpdateLastScheduleNumber, "SCHEDULE", V.Args.Schedule)
				
			'now update the flex id everywhere
			F.Data.DataView.Create("Material", "dvMaterialFlex", 22)
			F.Data.DataView.Create("Drops", "dvDropsFlex", 22)
			F.Intrinsic.Control.For(V.Local.iCounter, 0, V.DataView.dtNests!dvFlex.RowCount--, 1)
				'update tables
				F.Intrinsic.String.Build("UPDATE GCG_4980_WO SET FLEXID = '{0}' WHERE NESTID = '{1}' ", V.Args.Schedule, V.DataView.dtNests!dvFlex(V.Local.iCounter).NEST!FieldValTrim, V.Local.sSQL)
				F.ODBC.Connection!Con.Execute(V.Local.sSQL)
				
				F.Intrinsic.String.Build("UPDATE GCG_4980_DROP SET FLEXID = '{0}' WHERE NESTID = '{1}' ", V.Args.Schedule, V.DataView.dtNests!dvFlex(V.Local.iCounter).NEST!FieldValTrim, V.Local.sSQL)
				F.ODBC.Connection!Con.Execute(V.Local.sSQL)
				
				F.Intrinsic.String.Build("UPDATE GCG_4980_MAT SET FLEXID = '{0}' WHERE NESTID = '{1}' ", V.Args.Schedule, V.DataView.dtNests!dvFlex(V.Local.iCounter).NEST!FieldValTrim, V.Local.sSQL)
				F.ODBC.Connection!Con.Execute(V.Local.sSQL)
				
				'update datatables
				F.Intrinsic.String.Build("[NESTID] = '{0}'", V.DataView.dtNests!dvFlex(V.Local.iCounter).NEST!FieldValTrim, V.Local.sFilter)
				F.Data.DataView.SetFilter("dtWorkOrders", "dvWorkOrdersFlex", V.Local.sFilter)
				F.Data.DataView.SetValue("dtWorkOrders", "dvWorkOrder", -1, "FlexID", V.Args.Schedule)
				
				F.Data.DataView.SetFilter("Drops", "dvDropsFlex", V.Local.sFilter)
				F.Data.DataView.SetValue("Drops", "dvDropsFlex", -1, "FlexID", V.Args.Schedule)
			
				F.Data.DataView.SetFilter("Material", "dvMaterialFlex", V.Local.sFilter)
				F.Data.DataView.SetValue("Material", "dvMaterialFlex", -1, "FlexID", V.Args.Schedule)
			F.Intrinsic.Control.Next(V.Local.iCounter)
			F.Data.DataTable.SetValue("Drop", -1, "FlexID", V.Args.Schedule)
			F.Data.DataView.Close("dtWorkOrders", "dvWorkOrdersFlex")
			F.Data.DataView.Close("Material", "dvMaterialFlex")
			F.Data.DataView.Close("Drops", "dvDropsFlex")
			
			'Print flex schedule
			F.Data.DataTable.AddRow("900300", "StartDate", "000000", "EndDate", "000000", "StartFSNum", V.Args.Schedule, "StartFSSuffix", "000", "EndFSNum", V.Args.Schedule, "EndFSSuffix", "000", "ShowMatl", "Y", "UseExtBarcode", "Y")
			F.Intrinsic.Control.CallSub(900300Sync)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Else
	F.Intrinsic.UI.Msgbox("No records selected.")
F.Intrinsic.Control.EndIf
F.Data.DataView.Close("dtNests", "dvFlex")

F.Intrinsic.Control.CallSub(ctxSelectAll, "ItemName", "DESELECTALL")
F.Intrinsic.Control.CallSub(CheckFlexSchedule)

GUI.FormImport..Enabled(True)
GUI.FormImport..SetFocus

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.ctxFlexSchedule.End

Program.Sub.GetNextFlexSchedule.Start
F.Intrinsic.Control.Try

V.Local.sSQL.Declare(String)
V.Local.sScheduleNumber.Declare(String)
V.Local.bDone.Declare(Boolean, False)
V.Local.sRet.Declare(String)

F.ODBC.Connection!Con.GetID("V_JOB_CT_FLX_SCHD","SCHEDULE",TRUE,V.Local.sScheduleNumber)
F.Intrinsic.String.Format(V.Local.sScheduleNumber,"000000",V.Local.sScheduleNumber)

F.Intrinsic.Control.DoUntil(V.Local.bDone)
	V.Local.bDone.Set(True)
	
	'check if already a nest with that
	F.Intrinsic.String.Build("select FLEXID from GCG_4980_MAT where FLEXID = '{0}'", V.Local.sScheduleNumber, V.Local.sSQL)
	F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
	F.Intrinsic.Control.If(V.Ambient.ExecuteAndReturnEOF.Not)
		V.Local.bDone.Set(False)
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.String.Build("FLEXID = '{0}'", V.Local.sScheduleNumber, V.Local.sSQL)
	F.Data.DataTable.Select("Material", V.Local.sSQL, V.Local.sRet)
	F.Intrinsic.Control.If(V.Local.sRet.IsNotNoReturn)
		V.Local.bDone.Set(False)
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(V.Local.bDone.Not)
		F.Intrinsic.Math.Add(V.Local.sScheduleNumber, 1, V.Local.sScheduleNumber)
		F.Intrinsic.String.Format(V.Local.sScheduleNumber,"000000",V.Local.sScheduleNumber)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Loop

F.Intrinsic.Variable.AddRV("SCHEDULE", V.Local.sScheduleNumber)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.GetNextFlexSchedule.End

Program.Sub.ctxSelectAll.Start
'select/deselect all nests for posting

F.Intrinsic.Control.Try

V.Local.bSelect.Declare(Boolean)

F.Intrinsic.Control.If(V.DataTable.dtNests.Exists, =, False)
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Args.ItemName.Trim, =, "SELECTALL")
	V.Local.bSelect.Set(True)
F.Intrinsic.Control.Else(V.Args.ItemName.Trim, =, "DESELECTALL")
	V.Local.bSelect.Set(False)
F.Intrinsic.Control.EndIf

F.Data.DataTable.SetValue("dtNests", -1, "Post", V.Local.bSelect)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.ctxSelectAll.End

Program.Sub.CheckGrids.Start
'disable not relevant grids

F.Intrinsic.Control.Try

F.Intrinsic.Control.If(V.DataView.dtWorkOrders!dvWorkOrder.Exists, =, False)
	GUI.FormImport.gsgcWorkOrders.Enabled(False)
F.Intrinsic.Control.ElseIf(V.DataView.dtWorkOrders!dvWorkOrder.RowCount, =, 0)
	GUI.FormImport.gsgcWorkOrders.Enabled(False)
F.Intrinsic.Control.Else
	GUI.FormImport.gsgcWorkOrders.Enabled(True)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Args.Issue_Material)
	F.Intrinsic.Control.If(V.DataTable.Part.Exists)
		F.Intrinsic.Control.If(V.DataTable.Part.RowCount, =, 0)
			GUI.FormImport.gsgcMaterial.Enabled(False)
		F.Intrinsic.Control.Else
			GUI.FormImport.gsgcMaterial.Enabled(True)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Else
		GUI.FormImport.gsgcMaterial.Enabled(False)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Else
	GUI.FormImport.gsgcMaterial.Enabled(False)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Screen.FormImport!cmboNest.Text.Trim, =, "")
	GUI.FormImport.gsgcDrop.Enabled(False)
F.Intrinsic.Control.Else
	GUI.FormImport.gsgcDrop.Enabled(True)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.CheckGrids.End

Program.Sub.gsgcNestList_ColumnFilterChanged.Start
'keep track of the current column filter on the nest list

F.Intrinsic.Control.Try

V.Global.sNestListFilter.Set(V.Args.ActiveFilterExpression)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.gsgcNestList_ColumnFilterChanged.End

Program.Sub.ctxSelectFilteredRows.Start
'select/deselect the currently filtered rows

F.Intrinsic.Control.Try

V.Local.bSelect.Declare(Boolean)

F.Intrinsic.Control.If(V.DataTable.dtNests.Exists, =, False)
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Args.ItemName.Trim, =, "SELECTFILTERED")
	V.Local.bSelect.Set(True)
F.Intrinsic.Control.ElseIf(V.Args.ItemName.Trim, =, "DESELECTFILTERED")
	V.Local.bSelect.Set(False)
F.Intrinsic.Control.EndIf

F.Data.DataView.Create("dtNests", "dvFilteredNests", 22, V.Global.sNestListFilter, "")
F.Data.DataView.SetValue("dtNests", "dvFilteredNests", -1, "Post", V.Local.bSelect)
F.Data.DataView.Close("dtNests", "dvFilteredNests")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.ctxSelectFilteredRows.End

Program.Sub.ctxGroupByParentNest.Start
'Group / ungroup the parent column

F.Intrinsic.Control.Try

F.Intrinsic.Control.If(V.DataTable.dtNests.Exists, =, False)
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Args.ItemName.Trim, =, "GROUP")
	GUI.FormImport.gsgcNestList.SetColumnProperty("gvNests", "Parent", "GroupIndex", 0)
F.Intrinsic.Control.ElseIf(V.Args.ItemName.Trim, =, "UNGROUP")
	GUI.FormImport.gsgcNestList.ClearGrouping("gvNests")
	GUI.FormImport.gsgcNestList.SetColumnProperty("gvNests", "Parent", "Visible", False)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.ctxGroupByParentNest.End

Program.Sub.SaveDataTables.Start
'save the Material, WorkOrder, and Drops datatables to their respective database tables

F.Intrinsic.Control.Try

V.Local.sSQL.Declare(String)

F.Intrinsic.Control.If(V.DataView.dtWorkOrders!dvWorkOrder.Exists)
	F.Data.DataView.ToDataTable("dtWorkOrders", "dvWorkOrder", "dtWOSave")
	F.Data.DataTable.SaveToDB("dtWOSave","Con","GCG_4980_WO","NESTID*!*ID",256,"NESTID@!@NESTID*!*ID@!@ID*!*EMPLOYEE@!@EMPLOYEE*!*TJOB@!@TJOB*!*START_TIME@!@START_TIME*!*END_TIME@!@END_TIME*!*POST_DATE@!@POST_DATE*!*POST_TIME@!@POST_TIME*!*TIME@!@TIME*!*MATERIAL@!@MATERIAL*!*QTY@!@QTY*!*SERIAL@!@SERIAL*!*JOB@!@JOB*!*SUFFIX@!@SUFFIX*!*SEQUENCE@!@SEQUENCE*!*MSEQUENCE@!@MSEQUENCE*!*BIN@!@BIN*!*LOT@!@LOT*!*ISSUE@!@ISSUE*!*GSS_ISSUE@!@GSS_ISSUE*!*CLOSED@!@CLOSED*!*FLEXID@!@FLEXID*!*HEAT@!@HEAT*!*GOOD_PC@!@GOOD_PC*!*BAD_PC@!@BAD_PC*!*PROFILE@!@PROFILE*!*NEXT_FLEXID@!@NEXT_FLEXID*!*WC@!@WC*!*LOC@!@LOC*!*READY_FLAG@!@READY_FLAG")
	F.Data.DataTable.Close("dtWOSave")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.DataView.Material!dvMaterial.Exists)
	F.Data.DataView.ToDataTable("Material", "dvMaterial", "dtMatSave")
	
	'because we're summing these up, we need to delete before saving
	F.Data.DataTable.AddColumn("dtMatSave", "READY_FLAG", "String", "Y")
	
	F.Intrinsic.String.Build("delete from GCG_4980_MAT Where Closed <> 'Y' and READY_FLAG = 'Y' and NESTID = '{0}'", V.DataTable.dtMatSave(0).NESTID!FieldValTrim, V.Local.sSQL)
	F.ODBC.Connection!Con.Execute(V.Local.sSQL)
	
	F.Data.DataTable.SaveToDB("dtMatSave", "Con", "GCG_4980_MAT", "NESTID", 128, "NESTID@!@NESTID*!*MATERIAL@!@MATERIAL*!*QTY@!@QTY*!*AREA@!@AREA*!*ISSUE@!@ISSUE*!*FLEXID@!@FLEXID*!*PROFILE@!@PROFILE*!*UM@!@UM*!*NEXT_FLEXID@!@NEXT_FLEXID*!*LOC@!@LOC*!*READY_FLAG@!@READY_FLAG")
	F.Data.DataTable.Close("dtMatSave")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.DataView.Drops!dvDrops.Exists)
	F.Data.DataView.ToDataTable("Drops", "dvDrops", "dtDropSave")
	F.Data.DataTable.SaveToDB("dtDropSave","Con","GCG_4980_DROP","NESTID*!*ID",256,"NESTID@!@NESTID*!*ID@!@ID*!*MATERIAL@!@MATERIAL*!*QTY@!@QTY*!*LOT@!@LOT*!*BIN@!@BIN*!*SERIAL@!@SERIAL*!*SERIAL@!@SERIAL*!*SIZE@!@SIZE*!*DROP_ISSUE@!@DROP_ISSUE*!*CLOSED@!@CLOSED*!*FLEXID@!@FLEXID*!*HEAT@!@HEAT*!*NEXT_FLEXID@!@NEXT_FLEXID*!*UM@!@UM*!*LOC@!@LOC")
	F.Data.DataTable.Close("dtDropSave")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.SaveDataTables.End

Program.Sub.cmdAddDrop_Click.Start
F.Intrinsic.Control.Try

V.Local.fLength.Declare(Float)
V.Local.fWidth.Declare(Float)
V.Local.sSize.Declare(String)
V.Local.fIssue.Declare(Float)
V.Local.sNestID.Declare(String)
V.Local.sMaterial.Declare(String)
V.Local.sLot.Declare(String)
V.Local.sBin.Declare(String)
V.Local.sSerial.Declare(String)
V.Local.iID.Declare(Long)
V.Local.sUM.Declare(String)
V.Local.fArea.Declare(Float)
V.Local.sDropID.Declare(String)

F.Intrinsic.Control.If(V.DataTable.Drops.Exists, =, False)
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.DataView.Drops!dvDrops.Exists, =, False)
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.DataTable.Material.Exists, =, False)
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.DataView.Material!dvMaterial.Exists, =, False)
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.DataView.Material!dvMaterial.RowCount, <, 1)
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.DataTable.dtWorkOrders.Exists, =, False)
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.DataView.dtWorkOrders!dvWorkOrder.Exists, =, False)
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.DataView.dtWorkOrders!dvWorkOrder.RowCount, <, 1)
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Screen.FormImport!txtDropLength.Text.Trim, =, "")
	F.Intrinsic.UI.Msgbox("Drop length must be entered.")
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Screen.FormImport!txtDropWidth.Text.Trim, =, "")
	F.Intrinsic.UI.Msgbox("Drop width must be entered.")
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Screen.FormImport!txtDropID.Text.Trim, =, "")
	F.Intrinsic.UI.Msgbox("Drop ID must be entered.")
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

V.Local.fLength.Set(V.Screen.FormImport!txtDropLength.Text.Trim)
V.Local.fWidth.Set(V.Screen.FormImport!txtDropWidth.Text.Trim)

F.Intrinsic.Control.If(V.Local.fLength, =, 0)
	F.Intrinsic.UI.Msgbox("Length cannot be 0.")
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Local.fWidth, =, 0)
	F.Intrinsic.UI.Msgbox("Width cannot be 0.")
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

F.Intrinsic.String.Build("{0}X{1}", V.Local.fLength, V.Local.fWidth, V.Local.sSize)

F.Intrinsic.Math.Mult(V.Local.fLength, V.Local.fWidth, V.Local.fIssue)

V.Local.sNestId.Set(V.DataView.Material!dvMaterial(0).NESTID!FieldValTrim)
V.Local.sMaterial.Set(V.DataView.Material!dvMaterial(0).MATERIAL!FieldValTrim)
V.Local.sLot.Set(V.DataView.dtWorkOrders!dvWorkOrder(0).LOT!FieldValTrim)
V.Local.sBin.Set(V.DataView.dtWorkOrders!dvWorkOrder(0).BIN!FieldValTrim)
V.Local.fArea.Set(V.DataView.Material!dvMaterial(0).Area!FieldValTrim)

'check serial option
V.Local.sDropID.Set(V.Screen.FormImport!txtDropID.Text.Trim)
V.Local.sSerial.Set(V.Screen.FormImport!txtDropID.Text.Trim)
F.Intrinsic.Control.CallSub(GetSetting, "PROFILE", V.Global.sProfile, "TYPE", "REMNANT_OPTION", "SETTING", "STORE_SIZE_IN_SERIAL")
F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
	F.Intrinsic.Control.If(V.Args.Setting)
		V.Local.sSerial.Set(V.Local.sSize)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Data.DataTable.Compute("Drop", "Max(ID)", "", V.Local.iID)
F.Intrinsic.Math.Add(V.Local.iID, 1, V.Local.iID)

V.Local.sUM.Set(V.Dictionary.UMDict![V.Local.sMaterial].Trim)

'fIssue is in SI at this point
F.Intrinsic.Control.SelectCase(V.Local.sUM.Trim)
	F.Intrinsic.Control.CaseAny("SI", "SQ")
		'it's already in square inches, leave it
		V.Local.fIssue.Set(V.Local.fIssue)
	F.Intrinsic.Control.Case("SF")
		F.Intrinsic.Math.Div(V.Local.fIssue, 144, V.Local.fIssue)
	F.Intrinsic.Control.Case("SM")
		F.Intrinsic.Math.Mult(V.Local.fIssue, 0.00064516, V.Local.fIssue)
	F.Intrinsic.Control.Case("LB")
		V.Local.fIssue.Set(0)
	F.Intrinsic.Control.CaseAny("EA", "SH")
		F.Intrinsic.Math.Div(V.Local.fIssue, V.Local.fArea, V.Local.fIssue)
	F.Intrinsic.Control.CaseElse
		V.Local.fIssue.Set(0)
F.Intrinsic.Control.EndSelect

F.Intrinsic.Math.Round(V.Local.fIssue, V.Global.iDecimals, V.Local.fIssue)

F.Data.DataTable.AddRow("Drop", "NestID", V.Local.sNestId, "ID", V.Local.iID, "MATERIAL", V.Local.sMaterial, "Lot", V.Local.sLot, "Bin", V.Local.sBin, "Serial", V.Local.sSerial, "Closed", "N", "SIZE", V.Local.sSize, "Drop_Issue", V.Local.fIssue, "DROP_ID", V.Local.sDropID, "QTY", V.Local.fArea)
F.Data.DataTable.AddRow("Drops", "NestID", V.Local.sNestId, "ID", V.Local.iID, "MATERIAL", V.Local.sMaterial, "Lot", V.Local.sLot, "Bin", V.Local.sBin, "Serial", V.Local.sSerial, "Closed", "N", "SIZE", V.Local.sSize, "Drop_Issue", V.Local.fIssue, "DROP_ID", V.Local.sDropID, "QTY", V.Local.fArea)

F.Data.DataTable.SaveToDB("Drop","Con","GCG_4980_DROP","NESTID*!*ID",256,"NESTID@!@NESTID*!*ID@!@ID*!*MATERIAL@!@MATERIAL*!*QTY@!@QTY*!*SIZE@!@SIZE*!*DROP_ISSUE@!@DROP_ISSUE*!*SERIAL@!@SERIAL*!*DROP_ID@!@DROP_ID")

GUI.FormImport.txtDropWidth.Text("")
GUI.FormImport.txtDropLength.Text("")
GUI.FormImport.txtDropID.Text("")

F.Intrinsic.Control.CallSub(RecalculateIssues)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.cmdAddDrop_Click.End

Program.Sub.txtDropLength_LostFocus.Start
F.Intrinsic.Control.Try

V.Local.sLength.Declare(String)

V.Local.sLength.Set(V.Screen.FormImport!txtDropLength.Text.Trim)
F.Intrinsic.String.Replace(V.Local.sLength, "-", "", V.Local.sLength)
GUI.FormImport.txtDropLength.Text(V.Local.sLength)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.txtDropLength_LostFocus.End

Program.Sub.txtDropWidth_LostFocus.Start
F.Intrinsic.Control.Try

V.Local.sWidth.Declare(String)

V.Local.sWidth.Set(V.Screen.FormImport!txtDropWidth.Text.Trim)
F.Intrinsic.String.Replace(V.Local.sWidth, "-", "", V.Local.sWidth)
GUI.FormImport.txtDropWidth.Text(V.Local.sWidth)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.txtDropWidth_LostFocus.End

Program.Sub.gsgcMaterial_RowCellClick.Start
F.Intrinsic.Control.Try

V.Local.bMultipleBins.Declare(Boolean, False)

F.Intrinsic.Control.BlockEvents
F.intrinsic.Control.If(V.args.clicks,<,2)
	F.Intrinsic.Control.UnBlockEvents
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

'don't want to do this if they are using the multiple bin option
F.Intrinsic.Control.CallSub(GetSetting, "Profile", V.Global.sProfile, "TYPE", "IMPORT_OPTION", "SETTING", "MULTIPLE_BINS")
F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
	V.Local.bMultipleBins.Set(V.Args.Setting)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Local.bMultipleBins)
	'if they double click a record, select all in that one
	F.Data.DataTable.SetValue("PART", -1, "Issue", False, "Issue_Quantity", 0)
	F.Data.DataTable.SetValue("PART", V.Args.RowIndex, "Issue", True, "Issue_Quantity", V.Screen.FormImport!txtTotalSheets.Text.Trim)
	F.Intrinsic.Control.CallSub(gsgcMaterial_CellValueChanged, "Column", "Issue_Quantity", "RowIndex", V.Args.RowIndex, "Value", V.Screen.FormImport!txtTotalSheets.Text.Trim)
F.Intrinsic.Control.Else

	GUI.FormImport.ddlBin.Text(V.DataTable.Part(V.Args.rowindex).Bin!fieldVal)
	F.Data.DataView.SetValue("dtWorkOrders","dvWorkOrder",-1,"bin",V.DataTable.Part(V.Args.rowindex).Bin!fieldVal)
	F.Intrinsic.Control.CallSub(PopulateLotComboBox)
	
	GUI.FormImport.ddlLot.Text(V.DataTable.Part(V.Args.rowindex).Lot!fieldVal)
	F.Data.DataView.SetValue("dtWorkOrders","dvWorkOrder",-1,"Lot",V.DataTable.Part(V.Args.rowindex).Lot!fieldVal)
	F.Intrinsic.Control.CallSub(PopulateHeatComboBox)
	
	GUI.FormImport.ddlHeat.Text(V.DataTable.Part(V.Args.rowindex).Heat!fieldVal)
	F.Data.DataView.SetValue("dtWorkOrders","dvWorkOrder",-1,"Heat",V.DataTable.Part(V.Args.rowindex).Heat!fieldVal)
	F.Intrinsic.Control.CallSub(PopulateSerialComboBox)
	
	GUI.FormImport.ddlSerial.Text(V.DataTable.Part(V.Args.rowindex).Serial_Number!fieldVal)
	F.Data.DataView.SetValue("dtWorkOrders","dvWorkOrder",-1,"Serial", V.DataTable.Part(V.Args.rowindex).Serial_Number!fieldVal)
	F.Intrinsic.Control.CallSub(ddlSerial_Click)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.UnBlockEvents

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.gsgcMaterial_RowCellClick.End

Program.Sub.CopyDocumentLinks.Start
'copies document control links from one key to another
'pass OLD_KEY, NEW_KEY, TYPE

F.Intrinsic.Control.Try

V.Local.iType.Declare(Long)
V.Local.sOldKey.Declare(String)
V.Local.bCopied.Declare(Boolean)
V.Local.iOldLink.Declare(Long)
V.Local.iNewLink.Declare(Long)
V.Local.sNewKey.Declare(String)

V.Local.sOldKey.Set(V.Args.OLD_KEY.Trim)
V.Local.sNewKey.Set(V.Args.NEW_KEY.Trim)
V.Local.iType.Set(V.Args.TYPE)

'get old link id
F.Global.DocumentControl.GetLinkID(V.Local.sOldKey, V.Local.iType, V.Local.iOldLink)
F.Intrinsic.Control.If(V.Local.iOldLink, =, -1)
	'No link for this type / key
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

'create new link, copy
F.Global.DocumentControl.CreateReference(V.Local.sNewKey, V.Local.iType, V.Local.iNewLink)
F.Global.DocumentControl.Copy(V.Local.iOldLink, V.Local.iNewLink, V.Local.bCopied)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.CopyDocumentLinks.End

Program.Sub.txtEmployee_Click.Start
F.Intrinsic.Control.Try

GUI.FormImport.txtEmployee.SelectAll

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.txtEmployee_Click.End

Program.Sub.GetMaterialSequences.Start
F.Intrinsic.Control.Try

V.Local.iCounter.Declare(Long)
V.Local.sSQL.Declare(String)
V.Local.sRet.Declare(String)
V.Local.bSetting.Declare(Boolean, False)

F.Intrinsic.Control.For(V.Local.iCounter, 0, V.DataView.dtWorkOrders!dvWorkOrder.RowCount--, 1)
	F.Intrinsic.Control.If(V.DataView.ProfDT!ProfChkVw(0).BACKFLUSH_MISC_MAT!FieldVal)
		F.Data.DataView.SetValue("dtWorkOrders","dvWorkOrder",V.Local.iCounter,"MSequence","995000")

	F.Intrinsic.Control.ElseIf(V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCounter).MSequence!FieldValTrim, =, "")
		'grab the first material sequence before the cutting sequence
		F.Intrinsic.String.Build("SELECT TOP 1 SEQ FROM V_JOB_OPERATIONS WHERE JOB = '{0}' AND SUFFIX = '{1}' and SEQ < '{2}' AND LMO = 'M' ORDER BY SEQ DESC", V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCounter).Job!FieldValTrim, V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCounter).Suffix!FieldValTrim, V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCounter).SEQUENCE!FieldValTrim, V.Local.sSql)
		F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
		
		F.Intrinsic.Control.If(V.Ambient.ExecuteAndReturnEOF)
			'if one is not found, check if they have the 990000 option on
			F.Intrinsic.Control.CallSub(GetSetting, "PROFILE", V.Global.sProfile, "TYPE", "IMPORT_OPTION", "SETTING", "USE_990000_SEQUENCE")
			F.Intrinsic.Control.If(V.Args.Setting, !=, "")
				V.Local.bSetting.Set(V.Args.Setting)
			F.Intrinsic.Control.EndIf
			
			F.Intrinsic.Control.If(V.Local.bSetting)
				'if they do, look for a 990000 sequence
				F.Intrinsic.String.Build("SELECT TOP 1 SEQ FROM V_JOB_OPERATIONS WHERE JOB = '{0}' AND SUFFIX = '{1}' and SEQ = '990000'", V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCounter).Job!FieldValTrim, V.DataView.dtWorkOrders!dvWorkOrder(V.Local.iCounter).Suffix!FieldValTrim, V.Local.sSql)
				F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
				F.Intrinsic.Control.If(V.Ambient.ExecuteAndReturnEOF.Not)
					F.Data.DataView.SetValue("dtWorkOrders", "dvWorkOrder", V.Local.iCounter, "MSequence", V.Local.sRet.Trim)
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.Else
			F.Data.DataView.SetValue("dtWorkOrders", "dvWorkOrder", V.Local.iCounter, "MSequence", V.Local.sRet.Trim)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
	
F.Intrinsic.Control.Next(V.Local.iCounter)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.GetMaterialSequences.End

Program.Sub.cmdCreateFlexSchedule_Click.Start
F.Intrinsic.Control.Try

V.Local.iReturn.Declare(Long)

F.Intrinsic.Control.If(V.Screen.FormImport!txtFlexSchedule.Text.Trim, !=, "")
	F.Intrinsic.UI.Msgbox("This nest already has a flex schedule assigned. Continue?", "Flex Schedule", 4, V.Local.iReturn)
	F.Intrinsic.Control.If(V.Local.iReturn, !=, V.Ambient.MsgBoxYes)
		F.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

GUI.FormImport.cmdCreateFlexSchedule.Enabled(False)
GUI.FormImport..Enabled(False)

F.Intrinsic.UI.InvokeWaitDialog("Creating Flex Schedule...")
F.Intrinsic.Control.CallSub(SaveDataTables)
F.Intrinsic.Control.CallSub(FlexSchedule)
F.Intrinsic.UI.CloseWaitDialog
GUI.FormImport..Enabled(True)

GUI.FormImport..AlwaysOnTop(True)
GUI.FormImport..AlwaysOnTop(False)

F.Intrinsic.Control.CallSub(CheckFlexSchedule)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.cmdCreateFlexSchedule_Click.End

Program.Sub.cmdPrintFlexSchedule_Click.Start
F.Intrinsic.Control.Try

V.Local.sScheduleNumber.Declare(String)
V.Local.sPrint.Declare(String)

V.Local.sScheduleNumber.Set(V.Screen.FormImport!txtFlexSchedule.Text.Trim)

'Print flex schedule
GUI.FormImport..Enabled(False)
F.Data.DataTable.AddRow("900300", "StartDate", "000000", "EndDate", "000000", "StartFSNum", V.Local.sScheduleNumber, "StartFSSuffix", "000", "EndFSNum", V.Local.sScheduleNumber, "EndFSSuffix", "000", "ShowMatl", "Y", "UseExtBarcode", "Y")
'save nest data
'this is really just for Best Mfg since they have a custom flex report that pulls from these tables and needs the data to be updated
F.Intrinsic.Control.CallSub(SaveDataTables)
F.Intrinsic.Control.CallSub(900300Sync)
GUI.FormImport..Enabled(True)

GUI.FormImport..AlwaysOnTop(True)
GUI.FormImport..AlwaysOnTop(False)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.cmdPrintFlexSchedule_Click.End

Program.Sub.UpdateLastScheduleNumber.Start
'update last shcedule number option with the one we just created

F.Intrinsic.Control.Try

V.Local.iSched.Declare(Long)
V.Local.sSchedule.Declare(String)
V.Local.sSQL.Declare(String)

V.Local.iSched.Set(V.Args.SCHEDULE)

'option 400817 is last schedule number
F.Global.General.SaveOption(400817, "0000", "", "", "", "", V.Local.iSched, "")

'this option is stored in two places, need to update second
V.Local.sSchedule.Set(V.Local.iSched)
F.Intrinsic.String.Format(V.Local.sSchedule, "000000", V.Local.sSchedule)
F.Intrinsic.String.Build("Update Last_PO Set Last_PO_Num = '{0}' + substring(Last_PO_Num,7,1) Where Ass_Sys = 'SCH' and Ass_Sub_Sys = 'OPT'",V.Local.sSchedule,V.Local.sSQL)
F.ODBC.Connection!Con.Execute(V.Local.sSQL)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.UpdateLastScheduleNumber.End

Program.Sub.cmdCloseNest_Click.Start
F.Intrinsic.Control.Try

V.Local.iRet.Declare(Long)
V.Local.sSQL.Declare(String)
V.Local.sRet.Declare(String)

F.Intrinsic.Control.If(V.Global.bMultipleDelete.Not)
	F.Intrinsic.UI.Msgbox("Are you sure you want to close this nest without posting?", "Close", 4, V.Local.iRet)
	F.Intrinsic.Control.If(V.Local.iRet, !=, V.Ambient.MsgBoxYes)
		F.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

GUI.FormImport..Enabled(False)

F.Intrinsic.String.Build("delete from GCG_4980_MAT WHERE NESTID = '{0}'", V.Screen.FormImport!cmboNest.Text.Trim, V.Local.sSQL)
F.ODBC.Connection!Con.Execute(V.Local.sSQL)
F.Intrinsic.String.Build("delete from GCG_4980_WO WHERE NESTID = '{0}'", V.Screen.FormImport!cmboNest.Text.Trim, V.Local.sSQL)
F.ODBC.Connection!Con.Execute(V.Local.sSQL)
F.Intrinsic.String.Build("delete from GCG_4980_DROP WHERE NESTID = '{0}'", V.Screen.FormImport!cmboNest.Text.Trim, V.Local.sSQL)
F.ODBC.Connection!Con.Execute(V.Local.sSQL)

F.Intrinsic.Control.If(V.Global.bDoNotDeleteFlexSchedule.Not)
	'check if there is a flex schedule
	F.Intrinsic.Control.If(V.DataView.Material!dvMaterial(0).FLEXID!FieldValTrim, !=, "")
		'check if the flex schedule exists
		F.Intrinsic.String.Build("select SCHEDULE from V_JOB_CT_FLX_SCHD where SCHEDULE = '{0}'", V.DataView.Material!dvMaterial(0).FLEXID!FieldValTrim, V.Local.sSQL)
		F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
		
		F.Intrinsic.Control.If(V.Ambient.ExecuteAndReturnEOF.Not)
			F.Intrinsic.UI.Msgbox("Would you like to delete the associated flex schedule?", "Flex Schedule", 4, V.Local.iRet)
			F.Intrinsic.Control.If(V.Local.iRet, =, V.Ambient.MsgBoxYes)
				'delete flex schedule
				F.Intrinsic.String.Build("delete from FLEX_SCHD_BASIS where SCHEDULE = '{0}'", V.DataView.Material!dvMaterial(0).FLEXID!FieldValTrim, V.Local.sSQL)
				F.ODBC.Connection!Con.Execute(V.Local.sSQL)
				F.Intrinsic.String.Build("delete from FLEX_SCHD_BASIS_D where SCHEDULE = '{0}'", V.DataView.Material!dvMaterial(0).FLEXID!FieldValTrim, V.Local.sSQL)
				F.ODBC.Connection!Con.Execute(V.Local.sSQL)
				F.Intrinsic.String.Build("delete from JOB_CT_FLX_SCHD where SCHEDULE = '{0}'", V.DataView.Material!dvMaterial(0).FLEXID!FieldValTrim, V.Local.sSQL)
				F.ODBC.Connection!Con.Execute(V.Local.sSQL)
				
				'remove flex schedule from other nests
				F.Intrinsic.String.Build("update GCG_4980_MAT set FLEXID = '' where FLEXID = '{0}'", V.DataView.Material!dvMaterial(0).FLEXID!FieldValTrim, V.Local.sSQL)
				F.ODBC.Connection!Con.Execute(V.Local.sSQL)
				F.Intrinsic.String.Build("update GCG_4980_WO set FLEXID = '' where FLEXID = '{0}'", V.DataView.Material!dvMaterial(0).FLEXID!FieldValTrim, V.Local.sSQL)
				F.ODBC.Connection!Con.Execute(V.Local.sSQL)
				F.Intrinsic.String.Build("update GCG_4980_DROP set FLEXID = '' where FLEXID = '{0}'", V.DataView.Material!dvMaterial(0).FLEXID!FieldValTrim, V.Local.sSQL)
				F.ODBC.Connection!Con.Execute(V.Local.sSQL)
			F.Intrinsic.Control.Else
				V.Global.bDoNotDeleteFlexSchedule.Set(True)
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Global.bMultipleDelete.Not)
	F.Intrinsic.Control.CallSub(LoadNests)
	
	GUI.FormImport.cmboNest.Text("")
	F.Intrinsic.Control.CallSub(cmboNest_Click)
	
	GUI.FormImport..Enabled(True)
	GUI.FormImport.cmdPost.Enabled(False)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.cmdCloseNest_Click.End

Program.Sub.txtEmployee_KeyPressEnter.Start
F.Intrinsic.Control.Try

GUI.FormImport.cmdEmployeeBrowser.SetFocus

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.txtEmployee_KeyPressEnter.End

Program.Sub.LoadNestByEmployee.Start
'for when the import menu is launched from the GUI
'check the selected employee, see if they are in a flex schedule, select the nest for that

F.Intrinsic.Control.Try

V.Local.sSQL.Declare(String)
V.Local.sRet.Declare(String)

'9993 = selected employee
F.Intrinsic.Control.If(V.Passed.009993.Trim, =, "")
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

F.Intrinsic.String.Build("select DISTINCT RTRIM(NESTID) from GCG_4980_MAT where FLEXID = (select SUBSTRING(MAX(SCHEDULE_KEY), 1, 6) from V_JOBS_IN_PROCESS_G where EMPLOYEE = '{0}' and SUSPENDED_TIME_REC <> 'Y') and CLOSED <> 'Y' and READY_FLAG = 'Y'", V.Passed.009993.Trim, V.Local.sSQL)
F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
F.Intrinsic.Control.If(V.Ambient.ExecuteAndReturnEOF, =, False)
	F.Intrinsic.Control.If(V.Local.sRet.Trim, !=, "")
		F.Intrinsic.Control.BlockEvents
		GUI.FormImport.cmboNest.Text(V.Local.sRet.Trim)
		F.Intrinsic.Control.CallSub(cmboNest_Click)
		F.Intrinsic.Control.UnBlockEvents
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.LoadNestByEmployee.End

Program.Sub.gsgcMaterial_CellValueChanged.Start
'mark the bin to issue if they enter an amount

F.Intrinsic.Control.Try

V.Local.bCheckMaterial.Declare(Boolean, True)
V.Local.fValue.Declare(Float, 0)

F.Intrinsic.Control.If(V.Args.Column.UCase.Trim, =, "ISSUE_QUANTITY")
	F.Intrinsic.Control.If(V.Args.Value.Trim, !=, "")
		V.Local.fValue.Set(V.Args.Value)
	F.Intrinsic.Control.Else
		F.Intrinsic.UI.Msgbox("Value must be numeric.")
		F.Data.DataTable.SetValue("Part", V.Args.RowIndex, "Issue_Quantity", 0)
		F.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(V.Local.fValue, >, 0)
		F.Intrinsic.Control.If(V.Local.fValue, <=, V.DataTable.Part(V.Args.RowIndex).Quantity!FieldValFloat)
			F.Data.DataTable.SetValue("Part", V.Args.RowIndex, "Issue", True)
		F.Intrinsic.Control.Else
		
			'do they want us to check material?
			F.Intrinsic.Control.CallSub(GetSetting, "PROFILE", V.Global.sProfile, "TYPE", "IMPORT_OPTION", "SETTING", "CHECK_MATERIAL")
			F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
				V.Local.bCheckMaterial.Set(V.Args.Setting)
			F.Intrinsic.Control.EndIf
			
			F.Intrinsic.Control.If(V.Local.bCheckMaterial)
				F.Intrinsic.UI.Msgbox("Cannot issue more than is available in the bin.")
				F.Data.DataTable.SetValue("Part", V.Args.RowIndex, "Issue_Quantity", 0)
			F.Intrinsic.Control.EndIf
			
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.ElseIf(V.Local.fValue, <, 0)
		F.Intrinsic.UI.Msgbox("Cannot issue negative amount.")
			F.Data.DataTable.SetValue("Part", V.Args.RowIndex, "Issue_Quantity", 0)
	F.Intrinsic.Control.Else
		F.Data.DataTable.SetValue("Part", V.Args.RowIndex, "Issue", False)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.gsgcMaterial_CellValueChanged.End

Program.Sub.CheckMultipleBinIssueAmount.Start
F.Intrinsic.Control.Try

V.Local.fSum.Declare(Float)
V.Local.fTotal.Declare(Float)
V.Local.bGood.Declare(Boolean, False)

F.Data.DataView.Create("Part", "dvCheckMultipleBins", 22, "Issue = True", "")
F.Intrinsic.Control.If(V.DataView.Part!dvCheckMultipleBins.RowCount, >, 0)

	V.Local.fTotal.Set(V.Screen.FormImport!txtTotalSheets.Text.Trim)
	F.Data.DataTable.Compute("Part", "Sum(Issue_Quantity)", "Issue = True", V.Local.fSum)

	F.Intrinsic.Control.If(V.Local.fSum, !=, V.Local.fTotal)
		F.Intrinsic.Control.CallSub(SetTotalMaterial, "Amount", V.Local.fSum)
	F.Intrinsic.Control.EndIf
	V.Local.bGood.Set(True)
F.Intrinsic.Control.EndIf
F.Data.DataView.Close("Part", "dvCheckMultipleBins")

F.Intrinsic.Variable.AddRV("BINS_SELECTED", V.Local.bGood)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.CheckMultipleBinIssueAmount.End

Program.Sub.SaveItemHistory.Start
F.Intrinsic.Control.Try

F.Data.DataTable.AddColumn("450100", "POST_TIMESTAMP", "Date", V.Args.POST_TIMESTAMP)
F.Data.DataTable.AddColumn("450100", "NEST_ID", "String", V.Args.NestID.Trim)
F.Data.DataTable.AddExpressionColumn("450100", "MATERIAL", "String", "Trim(IsNull([PART], '')) + Trim(IsNull([Rev], ''))")

F.Data.DataTable.SaveToDB("450100", "Con", "GCG_4980_ITEM_HIST", "NEST_ID*!*POST_TIMESTAMP*!*WONumber*!*WOSuffix*!*WOSeq*!*MATERIAL*!*LOCATION*!*LOT*!*BIN*!*HEAT*!*SERIAL*!*QUANTITY", 128, "NEST_ID@!@NEST_ID*!*POST_TIMESTAMP@!@POST_TIMESTAMP*!*WONumber@!@JOB*!*WOSuffix@!@SUFFIX*!*WOSeq@!@MATERIAL_SEQUENCE*!*MATERIAL@!@MATERIAL*!*LOCATION@!@LOCATION*!*LOT@!@LOT*!*BIN@!@BIN*!*HEAT@!@HEAT*!*SERIAL@!@SERIAL*!*QUANTITY@!@QUANTITY")

F.Data.DataTable.RemoveColumn("450100", "POST_TIMESTAMP")
F.Data.DataTable.RemoveColumn("450100", "NEST_ID")
F.Data.DataTable.RemoveColumn("450100", "MATERIAL")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.SaveItemHistory.End

Program.Sub.MoveNestToHistory.Start
F.Intrinsic.Control.Try

V.Local.sMap.Declare(String)
V.Local.sSQL.Declare(String)

'save material table
F.Data.DataView.ToDataTable("Material", "dvMaterial", "dtSaveMaterialHistory")
F.Data.DataTable.AddColumn("dtSaveMaterialHistory", "POST_TIMESTAMP", "DATE", V.Args.Post_TimeStamp)
F.Data.DataTable.SetValue("dtSaveMaterialHistory", -1, "PROFILE", V.Args.Profile)
V.Local.sMap.Set("NESTID@!@NEST_ID*!*MATERIAL@!@MATERIAL*!*LOC@!@LOCATION*!*UM@!@UM*!*QTY@!@TOTAL_MATERIAL*!*ISSUE@!@ISSUED*!*FLEXID@!@FLEX_SCHEDULE*!*PROFILE@!@PROFILE*!*NEXT_FLEXID@!@NEXT_FLEX_SCHEDULE*!*POST_TIMESTAMP@!@POST_TIMESTAMP*!*SHEET_AREA@!@SHEET_AREA*!*SHEET_WEIGHT@!@SHEET_WEIGHT")
F.Data.DataTable.SaveToDB("dtSaveMaterialHistory", "Con", "GCG_4980_MAT_HIST", "NESTID*!*ID", 128, V.Local.sMap)
F.Data.DataTable.Close("dtSaveMaterialHistory")

'save work order table
F.Data.DataView.ToDataTable("dtWorkOrders", "dvWorkOrder", "dtSaveWorkOrderHistory")
F.Data.DataTable.AddColumn("dtSaveWorkOrderHistory", "POST_TIMESTAMP", "DATE", V.Args.Post_TimeStamp)
F.Data.DataTable.SetValue("dtSaveWorkOrderHistory", -1, "PROFILE", V.Args.Profile)
V.Local.sMap.Set("NESTID@!@NEST_ID*!*ID@!@RECORD_ID*!*EMPLOYEE@!@EMPLOYEE*!*START_TIME@!@START_TIME*!*END_TIME@!@END_TIME*!*POST_DATE@!@POST_DATE*!*POST_TIME@!@POST_TIME*!*TIME@!@TOTAL_TIME*!*ISSUE@!@TOTAL_MATERIAL*!*GOOD_PC@!@GOOD_PIECES*!*BAD_PC@!@BAD_PIECES*!*JOB@!@JOB*!*SUFFIX@!@SUFFIX*!*SEQUENCE@!@LABOR_SEQUENCE*!*WC@!@WORKCENTER*!*INDIRECT@!@INDIRECT*!*PROFILE@!@PROFILE*!*POST_TIMESTAMP@!@POST_TIMESTAMP*!*GSS_ISSUE@!@GSS_ISSUE*!*RUN_COUNT@!@RUN_COUNT*!*FILE@!@FILE*!*SCRAP_CODE@!@SCRAP_CODE*!*PART_AREA@!@PART_AREA*!*PART_WEIGHT@!@PART_WEIGHT")
F.Data.DataTable.SaveToDB("dtSaveWorkOrderHistory", "Con", "GCG_4980_WO_HIST", "NESTID*!*ID", 128, V.Local.sMap)
F.Data.DataTable.Close("dtSaveWorkOrderHistory")

'save drop table
F.Data.DataView.ToDataTable("Drops", "dvDrops", "dtSaveDropHistory")
F.Data.DataTable.AddColumn("dtSaveDropHistory", "POST_TIMESTAMP", "DATE", V.Args.Post_TimeStamp)
F.Data.DataTable.AddColumn("dtSaveDropHistory", "PROFILE", "String", V.Args.Profile)
V.Local.sMap.Set("NESTID@!@NEST_ID*!*ID@!@RECORD_ID*!*MATERIAL@!@MATERIAL*!*LOC@!@LOCATION*!*QTY@!@TOTAL_MATERIAL*!*DROP_ISSUE@!@DROP_ISSUE*!*LOT@!@LOT*!*BIN@!@BIN*!*HEAT@!@HEAT*!*SERIAL@!@SERIAL*!*SIZE@!@SIZE*!*PROFILE@!@PROFILE*!*POST_TIMESTAMP@!@POST_TIMESTAMP*!*DROP_ID@!@DROP_ID*!*DROP_AREA@!@DROP_AREA*!*DROP_WEIGHT@!@DROP_WEIGHT")
F.Data.DataTable.SaveToDB("dtSaveDropHistory", "Con", "GCG_4980_DROP_HIST", "NESTID*!*ID", 128, V.Local.sMap)
F.Data.DataTable.Close("dtSaveDropHistory")

'clear old records
F.Intrinsic.String.Build("delete from GCG_4980_MAT where NESTID = '{0}'", V.Args.NEST_ID.Trim, V.Local.sSQL)
F.ODBC.Connection!Con.Execute(V.Local.sSQL)
F.Intrinsic.String.Build("delete from GCG_4980_WO where NESTID = '{0}'", V.Args.NEST_ID.Trim, V.Local.sSQL)
F.ODBC.Connection!Con.Execute(V.Local.sSQL)
F.Intrinsic.String.Build("delete from GCG_4980_DROP where NESTID = '{0}'", V.Args.NEST_ID.Trim, V.Local.sSQL)
F.ODBC.Connection!Con.Execute(V.Local.sSQL)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.MoveNestToHistory.End

Program.Sub.cmboNest_Change.Start
F.Intrinsic.Control.Try

F.Intrinsic.Control.CallSub(cmboNest_Click)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.cmboNest_Change.End

Program.Sub.LogSQL.Start
'pass SQL

F.Intrinsic.Control.Try

V.Local.sMessage.Declare(String)

F.Intrinsic.String.Build("Executing SQL: [{0}]", V.Args.SQL, V.Local.sMessage)
F.Intrinsic.Control.CallSub(AddLog, "Project", "4980", "Task", "Nesting_Posting", "Message", V.Local.sMessage)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.LogSQL.End

Program.Sub.ddlBin_Change.Start
F.Intrinsic.Control.Try

'19.1 changed the click event so now we need this to work on both 18.1 and 19.1
F.Intrinsic.Control.If(V.Caller.GSSVersion, >=, "2019.1")
	F.Intrinsic.Control.CallSub(ddlBin_Click)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.ddlBin_Change.End

Program.Sub.ddlLot_Change.Start
F.Intrinsic.Control.Try

'19.1 changed the click event so now we need this to work on both 18.1 and 19.1
F.Intrinsic.Control.If(V.Caller.GSSVersion, >=, "2019.1")
	F.Intrinsic.Control.CallSub(ddlLot_Click)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.ddlLot_Change.End

Program.Sub.ddlHeat_Change.Start
F.Intrinsic.Control.Try

'19.1 changed the click event so now we need this to work on both 18.1 and 19.1
F.Intrinsic.Control.If(V.Caller.GSSVersion, >=, "2019.1")
	F.Intrinsic.Control.CallSub(ddlHeat_Click)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.ddlHeat_Change.End

Program.Sub.ddlSerial_Change.Start
F.Intrinsic.Control.Try

'19.1 changed the click event so now we need this to work on both 18.1 and 19.1
F.Intrinsic.Control.If(V.Caller.GSSVersion, >=, "2019.1")
	F.Intrinsic.Control.CallSub(ddlSerial_Click)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.ddlSerial_Change.End

Program.Sub.cmdMaterialBrowser_Click.Start
F.Intrinsic.Control.Try

'need to add long part

V.Local.sRet.Declare(String)
V.Local.sWidths.Declare(String, "250*!*80*!*80*!*300*!*80*!*160*!*120*!*120*!*140*!*140")
V.Local.sColumns.Declare(String, "Part*!*Loc*!*PL*!*Description*!*UM*!*Quantity*!*Length*!*Width*!*Weight*!*Thickness")
V.Local.sSQL.Declare(String, "select RTRIM(PART), RTRIM(LOCATION), RTRIM(PRODUCT_LINE), RTRIM(DESCRIPTION), RTRIM(UM_INVENTORY), QTY_ONHAND, If(LENGTH = 0, LENGTH_RAW_MATL, LENGTH) as LENGTH, IF(WIDTH = 0, WIDTH_RAW_MATL, WIDTH) as WIDTH, LBS as WEIGHT, THICKNESS from V_INVENTORY_ALL order by PART, LOCATION")

F.Intrinsic.String.Split(V.Local.sWidths, "*!*", V.Local.sWidths)
F.Intrinsic.String.Split(V.Local.sColumns, "*!*", V.Local.sColumns)
F.Intrinsic.UI.Browser("Material", "Con", V.Local.sSQL, V.Local.sColumns, V.Local.sWidths, V.Local.sRet)
V.Local.sWidths.Redim(0, 0)
V.Local.sColumns.Redim(0, 0)

F.Intrinsic.Control.If(V.Local.sRet.IsNotCancel)
	F.Intrinsic.Control.CallSub(ChangeMaterial, "Data", V.Local.sRet)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.cmdMaterialBrowser_Click.End

Program.Sub.ChangeMaterial.Start
F.Intrinsic.Control.Try

V.Local.bRecalculate.Declare(Boolean, False)
V.Local.sMessage.Declare(String)
V.Local.iRet.Declare(Long)
V.Local.sOriginalUM.Declare(String)
V.Local.sNewUM.Declare(String)
V.Local.bInches.Declare(Boolean)
V.Local.sOriginalInfo.Declare(String, "")
V.Local.fNewArea.Declare(Float)
V.Local.fTotal.Declare(Float)
V.Local.bExit.Declare(Boolean, False)
V.Local.bFail.Declare(Boolean, False)
V.Local.fRatio.Declare(Float)
V.Local.sRet.Declare(String)
V.Local.sSQL.Declare(String)

F.Intrinsic.String.Split(V.Args.Data, "*!*", V.Local.sRet)

'grab original material additional info
F.Global.General.ReadOption(400369, 0, False, V.Local.bInches)
F.Intrinsic.Control.If(V.Local.bInches)
	F.Intrinsic.String.Build("select If(LENGTH = 0, LENGTH_RAW_MATL, LENGTH) as FINAL_LENGTH, IF(WIDTH = 0, WIDTH_RAW_MATL, WIDTH) as FINAL_WIDTH, 0 AREA, LBS as WEIGHT from V_INVENTORY_ALL where PART = '{0}' and LOCATION = '{1}'", V.Global.sMaterial, V.Global.sLocation, V.Local.sSQL)
F.Intrinsic.Control.Else
	F.Intrinsic.String.Build("select If(LENGTH = 0, LENGTH_RAW_MATL, LENGTH) * 12 as FINAL_LENGTH, IF(WIDTH = 0, WIDTH_RAW_MATL, WIDTH) * 12 as FINAL_WIDTH, 0 AREA, LBS as WEIGHT from V_INVENTORY_ALL where PART = '{0}' and LOCATION = '{1}'", V.Global.sMaterial, V.Global.sLocation, V.Local.sSQL)
F.Intrinsic.Control.EndIf
F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sOriginalInfo)
F.Intrinsic.String.Split(V.Local.sOriginalInfo, "*!*", V.Local.sOriginalInfo)

'calculate area of original material
F.Intrinsic.Math.Mult(V.Local.sOriginalInfo(0).Float, V.Local.sOriginalInfo(1).Float, V.Local.sOriginalInfo(2))

'calculate area of new material
F.Intrinsic.Math.Mult(V.Local.sRet(6).Float, V.Local.sRet(7).Float, V.Local.fNewArea)

'supported UMs: SI/SQ - Square Inches, SF - Square Feet, SM - Square Meters, EA/SH - Each/Sheet, LB - Pounds, SC - Square Centimeters, SN - Square Millimeters
'get rid of our identical UMs
F.Intrinsic.String.Replace(V.Local.sRet(4).Trim, "EA", "SH", V.Local.sNewUM)
F.Intrinsic.String.Replace(V.Screen.FormImport!txtUM.Text.Trim, "EA", "SH", V.Local.sOriginalUM)
F.Intrinsic.String.Replace(V.Local.sNewUM, "SQ", "SI", V.Local.sNewUM)
F.Intrinsic.String.Replace(V.Local.sOriginalUM, "SQ", "SI", V.Local.sOriginalUM)

'here check if UM is the same
F.Intrinsic.Control.If(V.Local.sOriginalUM, !=, V.Local.sNewUM)
	'need to recalculate
	V.Local.bRecalculate.Set(True)
F.Intrinsic.Control.Else
	'if UM is the same, only need to recalculate if UM is EA/SH and size is different, or if it is LB and the weigh
	F.Intrinsic.Control.If(V.Local.sNewUM, =, "SH", "OR", V.Local.sOriginalUM, =, "SH")
		'check if size is different
		F.Intrinsic.Control.If(V.Local.fNewArea, !=, V.Local.sOriginalInfo(2).Float)
			V.Local.bRecalculate.Set(True)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Local.bRecalculate)
	V.Local.fTotal.Set(V.Screen.FormImport!txtTotalSheets.Text.Trim)
	
	'prompt
	F.Intrinsic.UI.Msgbox("The UM or Size of the new material does not match the old one. Recalculate issue amounts?", "Recalculate", 3, V.Local.iRet)
	F.Intrinsic.Control.SelectCase(V.Local.iRet)
		F.Intrinsic.Control.Case(V.Ambient.MsgBoxYes)
			'first convert everything to SI
			F.Intrinsic.Control.SelectCase(V.Local.sOriginalUM)
				'F.Intrinsic.Control.Case("SI")
					'do nothing
					
				F.Intrinsic.Control.Case("SF")
					F.Intrinsic.Math.Mult(V.Local.fTotal, 144, V.Local.fTotal)
					
				F.Intrinsic.Control.Case("SM")
					F.Intrinsic.Math.Mult(V.Local.fTotal, 1550.0031000062, V.Local.fTotal)
					
				F.Intrinsic.Control.Case("SC")
					F.Intrinsic.Math.Mult(V.Local.fTotal, 0.15500031000062, V.Local.fTotal)
				
				F.Intrinsic.Control.Case("SN")
					F.Intrinsic.Math.Mult(V.Local.fTotal, 0.0015500031000062, V.Local.fTotal)
				
				F.Intrinsic.Control.Case("SH")
					'check if area is set
					F.Intrinsic.Control.If(V.Local.sOriginalInfo(2).Float, >, 0)
						F.Intrinsic.Math.Mult(V.Local.fTotal, V.Local.sOriginalInfo(2).Float, V.Local.fTotal)
					F.Intrinsic.Control.Else
						F.Intrinsic.String.Build("To convert from [{0}] to [{1}], a valid length and width must be entered for part [{2}] in Inventory > File > Inventory Parts > Open > Options. Continue without recalculating?", V.Screen.FormImport!txtUM.Text.Trim, V.Local.sRet(4).Trim, V.Screen.FormImport!txtMaterial.Text.Trim, V.Local.sMessage)
						F.Intrinsic.UI.Msgbox(V.Local.sMessage, "Warning", 4, V.Local.iRet)
						F.Intrinsic.Control.If(V.Local.iRet, =, V.Ambient.MsgBoxNo)
							F.Intrinsic.Control.ExitSub
						F.Intrinsic.Control.Else
							V.Local.bExit.Set(True)
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.EndIf
				
				F.Intrinsic.Control.Case("LB")
					'check if weight is set
					V.Local.bFail.Set(False)
					F.Intrinsic.Control.If(V.Local.sOriginalInfo(3).Float, >, 0)
						F.Intrinsic.Control.If(V.Local.sOriginalInfo(2).Float, >, 0)
							'convert from LB to SI
							'if X pounds is Y inches, then 1 pound is Y/X inches
							F.Intrinsic.Math.Div(V.Local.sOriginalInfo(2).Float, V.Local.sOriginalInfo(3).Float, V.Local.fRatio)
							F.Intrinsic.Math.Mult(V.Local.fTotal, V.Local.fRatio, V.Local.fTotal)
						F.Intrinsic.Control.Else
							V.Local.bFail.Set(True)
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.Else
						V.Local.bFail.Set(True)
					F.Intrinsic.Control.EndIf
					
					F.Intrinsic.Control.If(V.Local.bFail)
						F.Intrinsic.String.Build("To convert from [{0}] to [{1}], a valid length, width, and weight must be entered for part [{2}] in Inventory > File > Inventory Parts > Open > Options. Continue without recalculating?", V.Screen.FormImport!txtUM.Text.Trim, V.Local.sRet(4).Trim, V.Screen.FormImport!txtMaterial.Text.Trim, V.Local.sMessage)
						F.Intrinsic.UI.Msgbox(V.Local.sMessage, "Warning", 4, V.Local.iRet)
						F.Intrinsic.Control.If(V.Local.iRet, =, V.Ambient.MsgBoxNo)
							F.Intrinsic.Control.ExitSub
						F.Intrinsic.Control.Else
							V.Local.bExit.Set(True)
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.EndIf
				
			F.Intrinsic.Control.EndSelect
			
			'then convert from SI to target
			F.Intrinsic.Control.If(V.Local.bExit.Not)
				F.Intrinsic.Control.SelectCase(V.Local.sNewUM)
					'F.Intrinsic.Control.Case("SI")
						'do nothing
						
					F.Intrinsic.Control.Case("SF")
						F.Intrinsic.Math.Mult(V.Local.fTotal, 0.0069444444444444, V.Local.fTotal)
						
					F.Intrinsic.Control.Case("SM")
						F.Intrinsic.Math.Mult(V.Local.fTotal, 0.00064516, V.Local.fTotal)
						
					F.Intrinsic.Control.Case("SC")
						F.Intrinsic.Math.Mult(V.Local.fTotal, 6.4516000000000001, V.Local.fTotal)
					
					F.Intrinsic.Control.Case("SN")
						F.Intrinsic.Math.Mult(V.Local.fTotal, 645.1600000000000052, V.Local.fTotal)
					
					F.Intrinsic.Control.Case("SH")
						'check if area is set
						F.Intrinsic.Control.If(V.Local.fNewArea, >, 0)
							F.Intrinsic.Math.Div(V.Local.fTotal, V.Local.fNewArea, V.Local.fTotal)
						F.Intrinsic.Control.Else
							F.Intrinsic.String.Build("To convert from [{0}] to [{1}], a valid length and width must be entered for part [{2}] in Inventory > File > Inventory Parts > Open > Options. Continue without recalculating?", V.Screen.FormImport!txtUM.Text.Trim, V.Local.sRet(4).Trim, V.Local.sRet(0).Trim, V.Local.sMessage)
							F.Intrinsic.UI.Msgbox(V.Local.sMessage, "Warning", 4, V.Local.iRet)
							F.Intrinsic.Control.If(V.Local.iRet, =, V.Ambient.MsgBoxNo)
								F.Intrinsic.Control.ExitSub
							F.Intrinsic.Control.Else
								V.Local.bExit.Set(True)
							F.Intrinsic.Control.EndIf
						F.Intrinsic.Control.EndIf
					
					F.Intrinsic.Control.Case("LB")
						'check if weight is set
						V.Local.bFail.Set(False)
						F.Intrinsic.Control.If(V.Local.sRet(0).Float, >, 0)
							F.Intrinsic.Control.If(V.Local.fNewArea, >, 0)
								'convert from SI to LB
								'if X pounds is Y inches, then 1 pound is Y/X inches
								F.Intrinsic.Math.Div(V.Local.fNewArea, V.Local.sRet(0), V.Local.fRatio)
								F.Intrinsic.Math.Div(V.Local.fTotal, V.Local.fRatio, V.Local.fTotal)
							F.Intrinsic.Control.Else
								V.Local.bFail.Set(True)
							F.Intrinsic.Control.EndIf
						F.Intrinsic.Control.Else
							V.Local.bFail.Set(True)
						F.Intrinsic.Control.EndIf
						
						F.Intrinsic.Control.If(V.Local.bFail)
							F.Intrinsic.String.Build("To convert from [{0}] to [{1}], a valid length, width, and weight must be entered for part [{2}] in Inventory > File > Inventory Parts > Open > Options. Continue without recalculating?", V.Screen.FormImport!txtUM.Text.Trim, V.Local.sRet(4).Trim, V.Local.sRet(0).Trim, V.Local.sMessage)
							F.Intrinsic.UI.Msgbox(V.Local.sMessage, "Warning", 4, V.Local.iRet)
							F.Intrinsic.Control.If(V.Local.iRet, =, V.Ambient.MsgBoxNo)
								F.Intrinsic.Control.ExitSub
							F.Intrinsic.Control.Else
								V.Local.bExit.Set(True)
							F.Intrinsic.Control.EndIf
						F.Intrinsic.Control.EndIf
					
				F.Intrinsic.Control.EndSelect
			F.Intrinsic.Control.EndIf
			
			'now set total amount and recalculate individual job issues
			F.Intrinsic.Control.CallSub(SetTotalMaterial, "Amount", V.Local.fTotal)
			
		F.Intrinsic.Control.Case(V.Ambient.MsgBoxCancel)
			F.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.EndSelect
F.Intrinsic.Control.EndIf
V.Local.sOriginalInfo.Redim(0, 0)

F.Intrinsic.Control.CallSub(SetOriginalMaterial)

'now set material
GUI.FormImport.txtMaterial.Text(V.Local.sRet(0).Trim)
GUI.FormImport.txtLocation.Text(V.Local.sRet(1).Trim)
GUI.FormImport.txtUM.Text(V.Local.sRet(4).Trim)

'should I set area?
F.Data.DataView.SetValue("Material", "dvMaterial", -1, "MATERIAL", V.Local.sRet(0).Trim, "LOC", V.Local.sRet(1).Trim, "UM", V.Local.sRet(4).Trim, "ISSUE", V.Local.fTotal)
F.Data.DataView.SetValue("dtWorkOrders", "dvWorkOrder", -1, "MATERIAL", V.Local.sRet(0).Trim, "LOC", V.Local.sRet(1).Trim)
V.Local.sRet.Redim(0, 0)

'reload
F.Intrinsic.Control.CallSub(cmboNest_Click)

'should we save this to the database, or just keep it in memory?

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.ChangeMaterial.End

Program.Sub.BackUpFileString.Start
'pass TYPE
'pass PROJECT
'pass Name
'pass Contents

F.Intrinsic.Control.Try

V.Local.sPath.Declare(String)

F.Intrinsic.String.Build("{0}\Custom\{1}\{2}\File Backups\{3}", V.Caller.GlobalDir, V.Args.Project, V.Caller.CompanyCode, V.Args.Type, V.Local.sPath)
F.Intrinsic.Control.CallSub(CheckDirectories, "Directories", V.Local.sPath)
F.Intrinsic.Control.CallSub(AppendFileName, "File", V.Args.Name, "Append", V.Ambient.Now.FormatYYYY-MM-DD-HH-NN-SS)
F.Intrinsic.String.Build("{0}\{1}", V.Local.sPath, V.Args.New_Name, V.Local.sPath)
F.Intrinsic.File.String2File(V.Local.sPath, V.Args.Contents)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.BackUpFileString.End

Program.Sub.txtMaterial_LostFocus.Start
F.Intrinsic.Control.Try

'this is good for now
'but need a better way to handle checking part and location or one or the other
F.Intrinsic.Control.If(V.Screen.FormImport!txtLocation.Enabled.Not)
	F.Intrinsic.Control.CallSub(txtLocation_LostFocus)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.txtMaterial_LostFocus.End

Program.Sub.txtLocation_LostFocus.Start
F.Intrinsic.Control.Try

V.Local.sSQL.Declare(String)
V.Local.sRet.Declare(String)

F.Intrinsic.Control.If(V.Screen.FormImport!txtMaterial.Text.Trim, !=, V.Global.sMaterial, "OR", V.Screen.FormImport!txtLocation.Text.Trim, !=, V.Global.sLocation)
	F.Intrinsic.String.Build("select RTRIM(PART), RTRIM(LOCATION), RTRIM(PRODUCT_LINE), RTRIM(DESCRIPTION), RTRIM(UM_INVENTORY), QTY_ONHAND, If(LENGTH = 0, LENGTH_RAW_MATL, LENGTH) as LENGTH, IF(WIDTH = 0, WIDTH_RAW_MATL, WIDTH) as WIDTH, LBS as WEIGHT, THICKNESS from V_INVENTORY_ALL where PART = '{0}' and LOCATION = '{1}'", V.Screen.FormImport!txtMaterial.Text.Trim, V.Screen.FormImport!txtLocation.Text.Trim, V.Local.sSQL)
	F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
	
	F.Intrinsic.Control.If(V.Ambient.ExecuteAndReturnEOF)
		'reset
		F.Intrinsic.UI.Msgbox("Invalid material entered.")
		GUI.FormImport.txtMaterial.Text(V.Global.sMaterial)
		GUI.FormImport.txtLocation.Text(V.Global.sLocation)
	F.Intrinsic.Control.Else
		F.Intrinsic.Control.CallSub(ChangeMaterial, "Data", V.Local.sRet)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.txtLocation_LostFocus.End

Program.Sub.CheckLocationTextBox.Start
F.Intrinsic.Control.Try

V.Local.bLocations.Declare(Boolean, False)

F.Global.General.ReadOption(400363, 0, False, V.Local.bLocations)
GUI.FormImport.txtLocation.Enabled(V.Local.bLocations)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.CheckLocationTextBox.End

Program.Sub.SetOriginalMaterial.Start
F.Intrinsic.Control.Try

V.Global.sMaterial.Set(V.Screen.FormImport!txtMaterial.Text.Trim)
V.Global.sMaterial.Set(V.Global.sMaterial.UCase)
V.Global.sLocation.Set(V.Screen.FormImport!txtLocation.Text.Trim)
V.Global.sLocation.Set(V.Global.sLocation.UCase)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.SetOriginalMaterial.End

Program.Sub.lblNestList_Click.Start
F.Intrinsic.Control.Try

'for debugging
F.Intrinsic.Control.If(V.Args.Button.UCase, =, "RIGHT")
	Function.Intrinsic.Debug.InvokeDebugger
	Function.Intrinsic.Debug.Stop
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.lblNestList_Click.End

Program.Sub.SetMaterialAmount.Start
F.Intrinsic.Control.Try

V.Local.iThreshold.Declare(Long, 0)
V.Local.fPercentage.Declare(Float, 0)
V.Local.sFilter.Declare(String)
V.Local.fIssue.Declare(Float)
V.Local.fDrop.Declare(Float)
V.Local.bAllowZeroMaterial.Declare(Boolean, False)
V.Local.bUseThreshold.Declare(Boolean, True)

F.Intrinsic.Control.If(V.DataView.Material!dvMaterial.RowCount, >, 0)
	'grab the threshold from options
	F.Intrinsic.Control.CallSub(GetSetting, "PROFILE", V.Global.sProfile, "TYPE", "IMPORT_OPTION", "SETTING", "THRESHOLD")
	F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
		V.Local.iThreshold.Set(V.Args.Setting.Long)
	F.Intrinsic.Control.EndIf
	
	'grab the amount of material to issue
	F.Intrinsic.String.Build("NestId = '{0}'", V.Screen.FormImport!cmboNest.Text, V.Local.sFilter)
	F.Data.DataTable.Compute("dtWorkOrders","Sum(ISSUE)", V.Local.sFilter, V.Local.fIssue)
	F.Data.DataTable.Compute("Drops","Sum(QTY)", V.Local.sFilter, V.Local.fDrop)
	F.Intrinsic.Math.Add(V.Local.fDrop, V.Local.fIssue, V.Local.fIssue)
	
	'convert fIssue to square inches (or pounds)
	F.Intrinsic.Math.Mult(V.Local.fIssue, V.DataView.Material!dvMaterial(0).FACTOR!FieldValFloat, V.Local.fIssue)
	
	F.Intrinsic.Control.If(V.Local.fIssue, =, 0)
		F.Intrinsic.Control.CallSub(GetSetting, "PROFILE", V.Global.sProfile, "TYPE", "IMPORT_OPTION", "SETTING", "ALLOW_ZERO_MATERIAL")
		F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
			V.Local.bAllowZeroMaterial.Set(V.Args.Setting.Trim)
		F.Intrinsic.Control.EndIf
	
		F.Intrinsic.Control.If(V.Local.bAllowZeroMaterial)
			V.Local.bUseThreshold.Set(False)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
	
	'now get the percentage of the sheet used
	F.Intrinsic.Control.If(V.Local.bUseThreshold)
		F.Intrinsic.Control.If(V.DataView.Material!dvMaterial(0).QTY!FieldValFloat, >, 0)
			F.Intrinsic.Math.Div(V.Local.fIssue, V.DataView.Material!dvMaterial(0).QTY!FieldValFloat, V.Local.fPercentage)
			F.Intrinsic.Math.Mult(V.Local.fPercentage, 100, V.Local.fPercentage)
		F.Intrinsic.Control.EndIf
		
		'compare this to the threshold
		F.Intrinsic.Control.If(V.Local.fPercentage, >=, V.Local.iThreshold)
			'if it is greater than or equal to it, we will issue the whole sheet
			V.Local.fIssue.Set(V.DataView.Material!dvMaterial(0).QTY!FieldValFloat)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
	
	'convert
	'fIssue is in SI or LB at this point
	F.Intrinsic.Control.SelectCase(V.DataView.Material!dvMaterial(0).UM!FieldValTrim)
		F.Intrinsic.Control.CaseAny("SI", "SQ", "LB")
			'it's already in square inches, leave it
			V.Local.fIssue.Set(V.Local.fIssue)
		F.Intrinsic.Control.Case("SF")
			F.Intrinsic.Math.Div(V.Local.fIssue, 144, V.Local.fIssue)
		F.Intrinsic.Control.Case("SM")
			F.Intrinsic.Math.Mult(V.Local.fIssue, 0.00064516, V.Local.fIssue)
		F.Intrinsic.Control.CaseAny("EA", "SH")
			F.Intrinsic.Control.If(V.DataView.Material!dvMaterial(0).AREA!FieldValFloat, >, 0)
				F.Intrinsic.Math.Div(V.Local.fIssue, V.DataView.Material!dvMaterial(0).AREA!FieldValFloat, V.Local.fIssue)
			'F.Intrinsic.Control.Else
			'not sure here, most likely fIssue is alread 0	
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.CaseElse
			V.Local.fIssue.Set(0)
	F.Intrinsic.Control.EndSelect
	
	'now set it back to the text box and dataview
	F.Intrinsic.Control.CallSub(SetTotalMaterial, "Amount", V.Local.fIssue)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.SetMaterialAmount.End

Program.Sub.SetTotalMaterial.Start
F.Intrinsic.Control.Try

V.Local.fIssue.Declare(Float)

V.Local.fIssue.Set(V.Args.Amount)

F.Intrinsic.Math.Round(V.Local.fIssue, V.Global.iDecimals, V.Local.fIssue)

F.Intrinsic.Control.BlockEvents
GUI.FormImport.txtTotalSheets.Text(V.Local.fIssue)
F.Intrinsic.Control.UnBlockEvents

'this is kind of bad, but in case there are multiple material lines
F.Data.DataView.SetValue("Material", "dvMaterial", -1, "ISSUE", 0)
F.Data.DataView.SetValue("Material", "dvMaterial", 0, "ISSUE", V.Local.fIssue)

'now recalculate wo grid issues
F.Intrinsic.Control.CallSub(RecalculateIssues)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.SetTotalMaterial.End

Program.Sub.ReleaseWorkOrder.Start
'pass JOB, SUFFIX

F.Intrinsic.Control.Try

V.Local.sSQL.Declare(String)

F.Intrinsic.String.Build("update JOB_HEADER set FLAG_WO_RELEASED = 'Y' where JOB = '{0}' and SUFFIX = '{1}'", V.Args.Job.Trim, V.Args.Suffix.Trim, V.Local.sSQL)
'F.Intrinsic.Control.CallSub(LogSQL, "SQL", V.Local.sSQL)
F.ODBC.Connection!Con.Execute(V.Local.sSQL)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.ReleaseWorkOrder.End

Program.Sub.FormImport_RefreshClick.Start
F.Intrinsic.Control.Try

F.Intrinsic.Control.CallSub(cmdGetNests_Click)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormImport_UnLoad", "Unattended", V.Global.bUnattended, "Project", "4980", "ProjectTitle", "Unattended Nesting Posting", "TASK", "Nesting_Posting")
F.Intrinsic.Control.EndTry
Program.Sub.FormImport_RefreshClick.End

Program.Sub.Comments.Start
${$5$}$2.0.0.0$}$2
${$6$}$rseddon$}$20240206144207198$}$DkKb6sybY9hE3N0enyRwKJuHSlMGTgRbkwdKLri347RZpf23QX4uU7F8SAN0eW3lIMPX2FBi194=
Program.Sub.Comments.End