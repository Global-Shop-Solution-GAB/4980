Program.Sub.ScreenSU.Start
Gui.FormExportMaintenance..Create(DashForm)
Gui.FormExportMaintenance..Size(21360,12375)
Gui.FormExportMaintenance..MinX(15000)
Gui.FormExportMaintenance..MinY(8600)
Gui.FormExportMaintenance..Position(0,0)
Gui.FormExportMaintenance..BackColor(-2147483633)
Gui.FormExportMaintenance..MousePointer(0)
Gui.FormExportMaintenance..Caption("Standard Nesting Interface Maintenance")
Gui.FormExportMaintenance..Event(UnLoad,Unload_All)
Gui.FormExportMaintenance..AlwaysOnTop(False)
Gui.FormExportMaintenance..FontName("Tahoma")
Gui.FormExportMaintenance..FontSize(8.25)
Gui.FormExportMaintenance..ControlBox(True)
Gui.FormExportMaintenance..MaxButton(True)
Gui.FormExportMaintenance..MinButton(True)
Gui.FormExportMaintenance..Moveable(True)
Gui.FormExportMaintenance..Sizeable(True)
Gui.FormExportMaintenance..ShowInTaskBar(True)
Gui.FormExportMaintenance..TitleBar(True)
Gui.FormExportMaintenance..BarSaveButton(True,False)
Gui.FormExportMaintenance..Event(SaveButtonClick,FormExportMaintenance_SaveButtonClick)
Gui.FormExportMaintenance..Event(UserButtonClicked,FormExportMaintenance_UserButtonClicked)
Gui.FormExportMaintenance.lbl1.Create(Label,"Export Path",True,930,210,0,150,705,True,0,"Arial",8,-2147483633,0,0)
Gui.FormExportMaintenance.lbl1.FontStyle(True,False,False,False,False)
Gui.FormExportMaintenance.lbl1.BorderStyle(0)
Gui.FormExportMaintenance.txtXPPath.Create(TextBox,"",True,6210,300,0,150,930,True,0,"Arial",8,-2147483643,1)
Gui.FormExportMaintenance.txtXPPath.TabStop(True)
Gui.FormExportMaintenance.txtXPPath.TabIndex(4)
Gui.FormExportMaintenance.txtXPPath.Event(LostFocus,txtXPPath_LostFocus)
Gui.FormExportMaintenance.cmdXPPath.Create(Button)
Gui.FormExportMaintenance.cmdXPPath.Size(375,375)
Gui.FormExportMaintenance.cmdXPPath.Position(6390,900)
Gui.FormExportMaintenance.cmdXPPath.Caption("^")
Gui.FormExportMaintenance.cmdXPPath.Event(Click,cmdXPPath_Click)
Gui.FormExportMaintenance.cmdXPPath.TabStop(True)
Gui.FormExportMaintenance.cmdXPPath.TabIndex(5)
Gui.FormExportMaintenance.cmdXPPath.Enabled(True)
Gui.FormExportMaintenance.cmdXPPath.Visible(True)
Gui.FormExportMaintenance.cmdXPPath.Zorder(0)
Gui.FormExportMaintenance.cmdXPPath.FontName("Tahoma")
Gui.FormExportMaintenance.cmdXPPath.FontSize(8.25)
Gui.FormExportMaintenance.chkUnattendedExport.Create(CheckBox)
Gui.FormExportMaintenance.chkUnattendedExport.Size(1860,300)
Gui.FormExportMaintenance.chkUnattendedExport.Position(150,2625)
Gui.FormExportMaintenance.chkUnattendedExport.Caption("Unattended Export")
Gui.FormExportMaintenance.chkUnattendedExport.TabStop(True)
Gui.FormExportMaintenance.chkUnattendedExport.TabIndex(17)
Gui.FormExportMaintenance.chkUnattendedExport.Event(Click,chkUnattendedExport_Click)
Gui.FormExportMaintenance.chkUnattendedExport.Enabled(True)
Gui.FormExportMaintenance.chkUnattendedExport.Visible(True)
Gui.FormExportMaintenance.chkUnattendedExport.Zorder(0)
Gui.FormExportMaintenance.chkUnattendedExport.FontName("Tahoma")
Gui.FormExportMaintenance.chkUnattendedExport.FontSize(8.25)
Gui.FormExportMaintenance.lbl3.Create(Label,"Profile",True,1935,255,0,150,120,True,0,"Arial",8,-2147483633,0,0)
Gui.FormExportMaintenance.lbl3.FontStyle(True,False,False,False,False)
Gui.FormExportMaintenance.lbl3.BorderStyle(0)
Gui.FormExportMaintenance.ddlProfile.Create(DropDownList)
Gui.FormExportMaintenance.ddlProfile.Size(6600,330)
Gui.FormExportMaintenance.ddlProfile.Position(150,330)
Gui.FormExportMaintenance.ddlProfile.Event(Click,ddlProfile_Click)
Gui.FormExportMaintenance.ddlProfile.TabStop(True)
Gui.FormExportMaintenance.ddlProfile.TabIndex(1)
Gui.FormExportMaintenance.ddlProfile.Event(Change,ddlProfile_Change)
Gui.FormExportMaintenance.ddlProfile.Enabled(True)
Gui.FormExportMaintenance.ddlProfile.Visible(True)
Gui.FormExportMaintenance.ddlProfile.Zorder(0)
Gui.FormExportMaintenance.ddlProfile.FontName("Tahoma")
Gui.FormExportMaintenance.ddlProfile.FontSize(8.25)
Gui.FormExportMaintenance.ddlXPType.Create(DropDownList)
Gui.FormExportMaintenance.ddlXPType.Size(2505,300)
Gui.FormExportMaintenance.ddlXPType.Position(150,2145)
Gui.FormExportMaintenance.ddlXPType.Event(Click,ddlXPType_Click)
Gui.FormExportMaintenance.ddlXPType.Event(Change,ddlXPType_Change)
Gui.FormExportMaintenance.ddlXPType.Enabled(True)
Gui.FormExportMaintenance.ddlXPType.Visible(True)
Gui.FormExportMaintenance.ddlXPType.Zorder(0)
Gui.FormExportMaintenance.ddlXPType.FontName("Tahoma")
Gui.FormExportMaintenance.ddlXPType.FontSize(8.25)
Gui.FormExportMaintenance.lbl4.Create(Label,"Nesting Software",True,1275,210,0,150,1890,True,0,"Arial",8,-2147483633,0,0)
Gui.FormExportMaintenance.lbl4.BorderStyle(0)
Gui.FormExportMaintenance.chkFullPartPath.Create(CheckBox)
Gui.FormExportMaintenance.chkFullPartPath.Size(3600,300)
Gui.FormExportMaintenance.chkFullPartPath.Position(2850,1770)
Gui.FormExportMaintenance.chkFullPartPath.Caption("Send full .dxf file name instead of part")
Gui.FormExportMaintenance.chkFullPartPath.Event(Click,chkFullPartPath_Click)
Gui.FormExportMaintenance.chkFullPartPath.Enabled(True)
Gui.FormExportMaintenance.chkFullPartPath.Visible(True)
Gui.FormExportMaintenance.chkFullPartPath.Zorder(0)
Gui.FormExportMaintenance.chkFullPartPath.FontName("Tahoma")
Gui.FormExportMaintenance.chkFullPartPath.FontSize(8.25)
Gui.FormExportMaintenance.txtFullPartPath.Create(TextBox,"",True,3870,300,0,2865,2160,True,0,"Arial",8,-2147483643,1)
Gui.FormExportMaintenance.txtFullPartPath.TabStop(True)
Gui.FormExportMaintenance.txtFullPartPath.TabIndex(4)
Gui.FormExportMaintenance.chkUnattendedExported.Create(CheckBox)
Gui.FormExportMaintenance.chkUnattendedExported.Enabled(False)
Gui.FormExportMaintenance.chkUnattendedExported.Size(2025,300)
Gui.FormExportMaintenance.chkUnattendedExported.Position(150,2925)
Gui.FormExportMaintenance.chkUnattendedExported.TabStop(True)
Gui.FormExportMaintenance.chkUnattendedExported.TabIndex(17)
Gui.FormExportMaintenance.chkUnattendedExported.Caption("Include Exported Jobs")
Gui.FormExportMaintenance.chkUnattendedExported.Event(Click,chkUnattendedExported_Click)
Gui.FormExportMaintenance.chkUnattendedExported.Visible(True)
Gui.FormExportMaintenance.chkUnattendedExported.Zorder(0)
Gui.FormExportMaintenance.chkUnattendedExported.FontName("Tahoma")
Gui.FormExportMaintenance.chkUnattendedExported.FontSize(8.25)
Gui.FormExportMaintenance.chkStaticFile.Create(CheckBox)
Gui.FormExportMaintenance.chkStaticFile.Size(1620,300)
Gui.FormExportMaintenance.chkStaticFile.Position(150,1365)
Gui.FormExportMaintenance.chkStaticFile.Caption("Static File Name")
Gui.FormExportMaintenance.chkStaticFile.Event(Click,chkStaticFile_Click)
Gui.FormExportMaintenance.chkStaticFile.Enabled(True)
Gui.FormExportMaintenance.chkStaticFile.Visible(True)
Gui.FormExportMaintenance.chkStaticFile.Zorder(0)
Gui.FormExportMaintenance.chkStaticFile.FontName("Tahoma")
Gui.FormExportMaintenance.chkStaticFile.FontSize(8.25)
Gui.FormExportMaintenance.txtStaticFile.Create(TextBox,"",True,4605,300,0,1755,1395,False,0,"Arial",8,-2147483643,1)
Gui.FormExportMaintenance.lblFieldList.Create(Label,"Field List :",True,720,210,0,150,5730,True,0,"Arial",8,-2147483633,0,0)
Gui.FormExportMaintenance.lblFieldList.BorderStyle(0)
Gui.FormExportMaintenance.txtImportFields.Create(TextboxM)
Gui.FormExportMaintenance.txtImportFields.Size(6645,1485)
Gui.FormExportMaintenance.txtImportFields.Position(150,5940)
Gui.FormExportMaintenance.txtImportFields.ToolTip("Field list should be comma separated values. Clicking Load will load the fields into the Assigned Fields grid.")
Gui.FormExportMaintenance.txtImportFields.Enabled(True)
Gui.FormExportMaintenance.txtImportFields.Visible(True)
Gui.FormExportMaintenance.txtImportFields.Zorder(0)
Gui.FormExportMaintenance.txtImportFields.FontName("Tahoma")
Gui.FormExportMaintenance.txtImportFields.FontSize(8.25)
Gui.FormExportMaintenance.cmdLoadFieldList.Create(Button)
Gui.FormExportMaintenance.cmdLoadFieldList.Size(855,375)
Gui.FormExportMaintenance.cmdLoadFieldList.Position(5940,7455)
Gui.FormExportMaintenance.cmdLoadFieldList.Caption("Load")
Gui.FormExportMaintenance.cmdLoadFieldList.DefaultValue("")
Gui.FormExportMaintenance.cmdLoadFieldList.Event(Click,cmdLoadFieldList_Click)
Gui.FormExportMaintenance.cmdLoadFieldList.Enabled(True)
Gui.FormExportMaintenance.cmdLoadFieldList.Visible(True)
Gui.FormExportMaintenance.cmdLoadFieldList.Zorder(0)
Gui.FormExportMaintenance.cmdLoadFieldList.FontName("Tahoma")
Gui.FormExportMaintenance.cmdLoadFieldList.FontSize(8.25)
Gui.FormExportMaintenance.chkHeaders.Create(CheckBox)
Gui.FormExportMaintenance.chkHeaders.Size(1950,300)
Gui.FormExportMaintenance.chkHeaders.Position(150,4080)
Gui.FormExportMaintenance.chkHeaders.Caption("Include Header Row")
Gui.FormExportMaintenance.chkHeaders.Enabled(True)
Gui.FormExportMaintenance.chkHeaders.Visible(True)
Gui.FormExportMaintenance.chkHeaders.Zorder(0)
Gui.FormExportMaintenance.chkHeaders.FontName("Tahoma")
Gui.FormExportMaintenance.chkHeaders.FontSize(8.25)
Gui.FormExportMaintenance.cmdExportExpressionColumns.Create(Button)
Gui.FormExportMaintenance.cmdExportExpressionColumns.Size(1770,375)
Gui.FormExportMaintenance.cmdExportExpressionColumns.Position(150,7455)
Gui.FormExportMaintenance.cmdExportExpressionColumns.Caption("Expression Columns")
Gui.FormExportMaintenance.cmdExportExpressionColumns.Event(Click,cmdExportExpressionColumns_Click)
Gui.FormExportMaintenance.cmdExportExpressionColumns.Enabled(True)
Gui.FormExportMaintenance.cmdExportExpressionColumns.Visible(True)
Gui.FormExportMaintenance.cmdExportExpressionColumns.Zorder(0)
Gui.FormExportMaintenance.cmdExportExpressionColumns.FontName("Tahoma")
Gui.FormExportMaintenance.cmdExportExpressionColumns.FontSize(8.25)
Gui.FormExportMaintenance.lblDateFormat.Create(Label,"Date Format :",True,960,210,0,150,4515,True,0,"Arial",8,-2147483633,0,0)
Gui.FormExportMaintenance.lblDateFormat.BorderStyle(0)
Gui.FormExportMaintenance.txtDateFormat.Create(TextBox,"mm/dd/yy",True,2070,300,0,1230,4425,True,0,"Arial",8,-2147483643,1)
Gui.FormExportMaintenance.txtDateFormat.MaxLength(20)
Gui.FormExportMaintenance.txtDateFormat.ToolTip("The format for dates in the export file. Valid parameters are m, d, y, -, and /.")
Gui.FormExportMaintenance.txtDateFormat.Event(LostFocus,txtDateFormat_LostFocus)
Gui.FormExportMaintenance.cmdLoadDefaultFieldList.Create(Button)
Gui.FormExportMaintenance.cmdLoadDefaultFieldList.Enabled(False)
Gui.FormExportMaintenance.cmdLoadDefaultFieldList.Size(1245,375)
Gui.FormExportMaintenance.cmdLoadDefaultFieldList.Position(4665,7455)
Gui.FormExportMaintenance.cmdLoadDefaultFieldList.Caption("Load Default")
Gui.FormExportMaintenance.cmdLoadDefaultFieldList.DefaultValue("")
Gui.FormExportMaintenance.cmdLoadDefaultFieldList.Event(Click,cmdLoadDefaultFieldList_Click)
Gui.FormExportMaintenance.cmdLoadDefaultFieldList.Visible(True)
Gui.FormExportMaintenance.cmdLoadDefaultFieldList.Zorder(0)
Gui.FormExportMaintenance.cmdLoadDefaultFieldList.FontName("Tahoma")
Gui.FormExportMaintenance.cmdLoadDefaultFieldList.FontSize(8.25)
Gui.FormExportMaintenance.chkBendingStep.Create(CheckBox)
Gui.FormExportMaintenance.chkBendingStep.Enabled(False)
Gui.FormExportMaintenance.chkBendingStep.Size(2745,300)
Gui.FormExportMaintenance.chkBendingStep.Position(150,4755)
Gui.FormExportMaintenance.chkBendingStep.Caption("Add Bending Step if next WC is: ")
Gui.FormExportMaintenance.chkBendingStep.Event(Click,chkBendingStep_Click)
Gui.FormExportMaintenance.chkBendingStep.Visible(True)
Gui.FormExportMaintenance.chkBendingStep.Zorder(0)
Gui.FormExportMaintenance.chkBendingStep.FontName("Tahoma")
Gui.FormExportMaintenance.chkBendingStep.FontSize(8.25)
Gui.FormExportMaintenance.txtBendingWorkcenters.Create(TextBox,"",True,3555,300,0,2805,4770,False,0,"Arial",8,-2147483643,1)
Gui.FormExportMaintenance.txtBendingWorkcenters.ToolTip("Comma Delimited")
Gui.FormExportMaintenance.cmdBendingWCBrowser.Create(Button)
Gui.FormExportMaintenance.cmdBendingWCBrowser.Enabled(False)
Gui.FormExportMaintenance.cmdBendingWCBrowser.Size(375,375)
Gui.FormExportMaintenance.cmdBendingWCBrowser.Position(6390,4740)
Gui.FormExportMaintenance.cmdBendingWCBrowser.TabStop(True)
Gui.FormExportMaintenance.cmdBendingWCBrowser.TabIndex(5)
Gui.FormExportMaintenance.cmdBendingWCBrowser.Caption("^")
Gui.FormExportMaintenance.cmdBendingWCBrowser.Event(Click,cmdBendingWCBrowser_Click)
Gui.FormExportMaintenance.cmdBendingWCBrowser.Visible(True)
Gui.FormExportMaintenance.cmdBendingWCBrowser.Zorder(0)
Gui.FormExportMaintenance.cmdBendingWCBrowser.FontName("Tahoma")
Gui.FormExportMaintenance.cmdBendingWCBrowser.FontSize(8.25)
Gui.FormExportMaintenance.chkOnlyIncludeRescheduled.Create(CheckBox)
Gui.FormExportMaintenance.chkOnlyIncludeRescheduled.Enabled(False)
Gui.FormExportMaintenance.chkOnlyIncludeRescheduled.Size(5220,300)
Gui.FormExportMaintenance.chkOnlyIncludeRescheduled.Position(150,3225)
Gui.FormExportMaintenance.chkOnlyIncludeRescheduled.TabStop(True)
Gui.FormExportMaintenance.chkOnlyIncludeRescheduled.TabIndex(17)
Gui.FormExportMaintenance.chkOnlyIncludeRescheduled.Caption("Only Include Exported Jobs Rescheduled Since Last Export")
Gui.FormExportMaintenance.chkOnlyIncludeRescheduled.Visible(True)
Gui.FormExportMaintenance.chkOnlyIncludeRescheduled.Zorder(0)
Gui.FormExportMaintenance.chkOnlyIncludeRescheduled.FontName("Tahoma")
Gui.FormExportMaintenance.chkOnlyIncludeRescheduled.FontSize(8.25)
Gui.FormExportMaintenance.chkBackupExport.Create(CheckBox)
Gui.FormExportMaintenance.chkBackupExport.Size(1860,300)
Gui.FormExportMaintenance.chkBackupExport.Position(150,5130)
Gui.FormExportMaintenance.chkBackupExport.TabStop(True)
Gui.FormExportMaintenance.chkBackupExport.TabIndex(17)
Gui.FormExportMaintenance.chkBackupExport.Caption("Backup Export File")
Gui.FormExportMaintenance.chkBackupExport.Enabled(True)
Gui.FormExportMaintenance.chkBackupExport.Visible(True)
Gui.FormExportMaintenance.chkBackupExport.Zorder(0)
Gui.FormExportMaintenance.chkBackupExport.FontName("Tahoma")
Gui.FormExportMaintenance.chkBackupExport.FontSize(8.25)
Gui.FormExportMaintenance.lblUnattendedFilter.Create(Label,"Unattended Export Filter:",True,1770,210,0,150,3555,True,0,"Arial",8,-2147483633,0,0)
Gui.FormExportMaintenance.lblUnattendedFilter.BorderStyle(0)
Gui.FormExportMaintenance.txtUnattendedFilter.Create(TextBox,"",True,6600,300,0,150,3765,False,0,"Arial",8,-2147483643,1)
Gui.FormExportMaintenance.txtUnattendedFilter.ToolTip("Comma Delimited")
Gui.FormExportMaintenance.chkOseonWorkplan.Create(CheckBox)
Gui.FormExportMaintenance.chkOseonWorkplan.Size(2370,300)
Gui.FormExportMaintenance.chkOseonWorkplan.Position(150,5400)
Gui.FormExportMaintenance.chkOseonWorkplan.TabStop(True)
Gui.FormExportMaintenance.chkOseonWorkplan.TabIndex(17)
Gui.FormExportMaintenance.chkOseonWorkplan.Caption("Include Oseon Workplan")
Gui.FormExportMaintenance.chkOseonWorkplan.Enabled(True)
Gui.FormExportMaintenance.chkOseonWorkplan.Visible(True)
Gui.FormExportMaintenance.chkOseonWorkplan.Zorder(0)
Gui.FormExportMaintenance.chkOseonWorkplan.FontName("Tahoma")
Gui.FormExportMaintenance.chkOseonWorkplan.FontSize(8.25)
Gui.FormExportMaintenance.frameExportGrids.Create(Frame)
Gui.FormExportMaintenance.frameExportGrids.Enabled(True)
Gui.FormExportMaintenance.frameExportGrids.Visible(True)
Gui.FormExportMaintenance.frameExportGrids.Zorder(0)
Gui.FormExportMaintenance.frameExportGrids.Size(14415,11385)
Gui.FormExportMaintenance.frameExportGrids.Position(6945,0)
Gui.FormExportMaintenance.frameExportGrids.Caption("")
Gui.FormExportMaintenance.frameExportGrids.FontName("Tahoma")
Gui.FormExportMaintenance.frameExportGrids.FontSize(8.25)
Gui.FormExportMaintenance.frameExportGrids.Dock(4)
Gui.FormExportMaintenance.frameExportGrids.Anchor(15)
Gui.FormExportMaintenance.SplitContainer_Grids.Create(SplitContainer)
Gui.FormExportMaintenance.SplitContainer_Grids.Enabled(True)
Gui.FormExportMaintenance.SplitContainer_Grids.Visible(True)
Gui.FormExportMaintenance.SplitContainer_Grids.Zorder(0)
Gui.FormExportMaintenance.SplitContainer_Grids.Size(14415,11385)
Gui.FormExportMaintenance.SplitContainer_Grids.Position(0,0)
Gui.FormExportMaintenance.SplitContainer_Grids.Orientation(0)
Gui.FormExportMaintenance.SplitContainer_Grids.SplitterPosition(7095)
Gui.FormExportMaintenance.SplitContainer_Grids.Collapsed(False)
Gui.FormExportMaintenance.SplitContainer_Grids.Parent("frameExportGrids")
Gui.FormExportMaintenance.SplitContainer_Grids.Dock(5)
Gui.FormExportMaintenance.frameLegend.Create(Frame)
Gui.FormExportMaintenance.frameLegend.Size(7140,11385)
Gui.FormExportMaintenance.frameLegend.Position(0,0)
Gui.FormExportMaintenance.frameLegend.Caption("")
Gui.FormExportMaintenance.frameLegend.FontStyle(True,False,False,False,False)
Gui.FormExportMaintenance.frameLegend.Anchor(15)
Gui.FormExportMaintenance.frameLegend.Enabled(True)
Gui.FormExportMaintenance.frameLegend.Visible(True)
Gui.FormExportMaintenance.frameLegend.Zorder(0)
Gui.FormExportMaintenance.frameLegend.FontName("Tahoma")
Gui.FormExportMaintenance.frameLegend.FontSize(8.25)
Gui.FormExportMaintenance.frameLegend.Dock(5)
Gui.FormExportMaintenance.frameLegend.Parent("SplitContainer_Grids",1)
Gui.FormExportMaintenance.lbl15.Create(Label,"01 - Labor Sequence",True,1530,210,0,90,120,True,0,"Arial",8,-2147483633,0,0)
Gui.FormExportMaintenance.lbl15.Parent("frameLegend")
Gui.FormExportMaintenance.lbl15.BorderStyle(0)
Gui.FormExportMaintenance.cmdWOBrw.Create(Button)
Gui.FormExportMaintenance.cmdWOBrw.Size(375,375)
Gui.FormExportMaintenance.cmdWOBrw.Position(4635,15)
Gui.FormExportMaintenance.cmdWOBrw.Parent("frameLegend")
Gui.FormExportMaintenance.cmdWOBrw.Caption("^")
Gui.FormExportMaintenance.cmdWOBrw.Event(Click,cmdWOBrw_Click)
Gui.FormExportMaintenance.cmdWOBrw.TabStop(True)
Gui.FormExportMaintenance.cmdWOBrw.TabIndex(24)
Gui.FormExportMaintenance.cmdWOBrw.Enabled(True)
Gui.FormExportMaintenance.cmdWOBrw.Visible(True)
Gui.FormExportMaintenance.cmdWOBrw.Zorder(0)
Gui.FormExportMaintenance.cmdWOBrw.FontName("Tahoma")
Gui.FormExportMaintenance.cmdWOBrw.FontSize(8.25)
Gui.FormExportMaintenance.txtWorkOrder.Create(TextBox,"",True,2145,300,0,2460,60,True,0,"Arial",8,-2147483643,1)
Gui.FormExportMaintenance.txtWorkOrder.Parent("frameLegend")
Gui.FormExportMaintenance.txtWorkOrder.Locked(True)
Gui.FormExportMaintenance.txtWorkOrder.Event(Change,txtWorkOrder_Change)
Gui.FormExportMaintenance.txtWorkOrder.TabStop(True)
Gui.FormExportMaintenance.txtWorkOrder.TabIndex(23)
Gui.FormExportMaintenance.gsgcLegend.Create(GsGridControl)
Gui.FormExportMaintenance.gsgcLegend.Size(7110,10995)
Gui.FormExportMaintenance.gsgcLegend.Position(15,420)
Gui.FormExportMaintenance.gsgcLegend.Parent("frameLegend")
Gui.FormExportMaintenance.gsgcLegend.Anchor(15)
Gui.FormExportMaintenance.gsgcLegend.Enabled(True)
Gui.FormExportMaintenance.gsgcLegend.Visible(True)
Gui.FormExportMaintenance.gsgcLegend.Zorder(0)
Gui.FormExportMaintenance.frameMapping.Create(Frame)
Gui.FormExportMaintenance.frameMapping.Size(7095,11385)
Gui.FormExportMaintenance.frameMapping.Position(0,0)
Gui.FormExportMaintenance.frameMapping.Caption("")
Gui.FormExportMaintenance.frameMapping.FontStyle(True,False,False,False,False)
Gui.FormExportMaintenance.frameMapping.Anchor(7)
Gui.FormExportMaintenance.frameMapping.Enabled(True)
Gui.FormExportMaintenance.frameMapping.Visible(True)
Gui.FormExportMaintenance.frameMapping.Zorder(0)
Gui.FormExportMaintenance.frameMapping.FontName("Tahoma")
Gui.FormExportMaintenance.frameMapping.FontSize(8.25)
Gui.FormExportMaintenance.frameMapping.Dock(5)
Gui.FormExportMaintenance.frameMapping.Parent("SplitContainer_Grids",0)
Gui.FormExportMaintenance.GsGCFieldMap.Create(GsGridControl)
Gui.FormExportMaintenance.GsGCFieldMap.Size(7095,11385)
Gui.FormExportMaintenance.GsGCFieldMap.Position(0,0)
Gui.FormExportMaintenance.GsGCFieldMap.Event(CellValueChanged,GsGCFieldMap_CellValueChanged)
Gui.FormExportMaintenance.GsGCFieldMap.Anchor(15)
Gui.FormExportMaintenance.GsGCFieldMap.Parent("frameMapping")
Gui.FormExportMaintenance.GsGCFieldMap.Enabled(True)
Gui.FormExportMaintenance.GsGCFieldMap.Visible(True)
Gui.FormExportMaintenance.GsGCFieldMap.Zorder(0)
Gui.FormExportMaintenance.GsGCFieldMap.Dock(5)
Gui.FormImportMaintenance..Create(DashForm)
Gui.FormImportMaintenance..Size(17280,12210)
Gui.FormImportMaintenance..MinX(0)
Gui.FormImportMaintenance..MinY(0)
Gui.FormImportMaintenance..Position(0,0)
Gui.FormImportMaintenance..BackColor(-2147483633)
Gui.FormImportMaintenance..MousePointer(0)
Gui.FormImportMaintenance..Caption("Import Maintenance")
Gui.FormImportMaintenance..Event(UnLoad,FormImportMaintenance_UnLoad)
Gui.FormImportMaintenance..MaxButton(False)
Gui.FormImportMaintenance..Sizeable(False)
Gui.FormImportMaintenance..AlwaysOnTop(False)
Gui.FormImportMaintenance..FontName("Tahoma")
Gui.FormImportMaintenance..FontSize(8.25)
Gui.FormImportMaintenance..ControlBox(True)
Gui.FormImportMaintenance..MinButton(True)
Gui.FormImportMaintenance..Moveable(True)
Gui.FormImportMaintenance..ShowInTaskBar(True)
Gui.FormImportMaintenance..TitleBar(True)
Gui.FormImportMaintenance..BarSaveButton(True,False)
Gui.FormImportMaintenance..Event(SaveButtonClick,FormImportMaintenance_SaveButtonClick)
Gui.FormImportMaintenance.tabImportSettings.Create(Tab)
Gui.FormImportMaintenance.tabImportSettings.Size(17130,11310)
Gui.FormImportMaintenance.tabImportSettings.Position(0,0)
Gui.FormImportMaintenance.tabImportSettings.Enabled(True)
Gui.FormImportMaintenance.tabImportSettings.Visible(True)
Gui.FormImportMaintenance.tabImportSettings.Zorder(0)
Gui.FormImportMaintenance.tabImportSettings.FontName("Tahoma")
Gui.FormImportMaintenance.tabImportSettings.FontSize(8.25)
Gui.FormImportMaintenance.tabImportSettings.Tabs(3)
Gui.FormImportMaintenance.tabImportSettings.SetTab(0)
Gui.FormImportMaintenance.tabImportSettings.Caption("Import")
Gui.FormImportMaintenance.tabImportSettings.SetTab(1)
Gui.FormImportMaintenance.tabImportSettings.Caption("Remnants")
Gui.FormImportMaintenance.tabImportSettings.SetTab(2)
Gui.FormImportMaintenance.tabImportSettings.Caption("Part Separation")
Gui.FormImportMaintenance.chkPartSeparation.Create(CheckBox)
Gui.FormImportMaintenance.chkPartSeparation.Size(2595,300)
Gui.FormImportMaintenance.chkPartSeparation.Position(75,60)
Gui.FormImportMaintenance.chkPartSeparation.Parent("tabImportSettings",2)
Gui.FormImportMaintenance.chkPartSeparation.Caption("Enable Part Separation Import")
Gui.FormImportMaintenance.chkPartSeparation.Event(Click,chkPartSeparation_Click)
Gui.FormImportMaintenance.chkPartSeparation.Enabled(True)
Gui.FormImportMaintenance.chkPartSeparation.Visible(True)
Gui.FormImportMaintenance.chkPartSeparation.Zorder(0)
Gui.FormImportMaintenance.chkPartSeparation.FontName("Tahoma")
Gui.FormImportMaintenance.chkPartSeparation.FontSize(8.25)
Gui.FormImportMaintenance.lblPartSeparationPath.Create(Label,"Part Separation File Import Path: ",True,2520,255,0,75,540,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImportMaintenance.lblPartSeparationPath.Parent("tabImportSettings",2)
Gui.FormImportMaintenance.lblPartSeparationPath.BorderStyle(0)
Gui.FormImportMaintenance.frameImpStd.Create(Frame)
Gui.FormImportMaintenance.frameImpStd.Size(10110,10440)
Gui.FormImportMaintenance.frameImpStd.Position(6855,405)
Gui.FormImportMaintenance.frameImpStd.Caption("Standard Map Options")
Gui.FormImportMaintenance.frameImpStd.Parent("tabImportSettings",0)
Gui.FormImportMaintenance.frameImpStd.Enabled(True)
Gui.FormImportMaintenance.frameImpStd.Visible(True)
Gui.FormImportMaintenance.frameImpStd.Zorder(0)
Gui.FormImportMaintenance.frameImpStd.FontName("Tahoma")
Gui.FormImportMaintenance.frameImpStd.FontSize(8.25)
Gui.FormImportMaintenance.frameLaborOptions.Create(Frame)
Gui.FormImportMaintenance.frameLaborOptions.Size(6075,2805)
Gui.FormImportMaintenance.frameLaborOptions.Position(3975,5325)
Gui.FormImportMaintenance.frameLaborOptions.Parent("frameImpStd")
Gui.FormImportMaintenance.frameLaborOptions.Caption("Labor Options")
Gui.FormImportMaintenance.frameLaborOptions.Enabled(True)
Gui.FormImportMaintenance.frameLaborOptions.Visible(True)
Gui.FormImportMaintenance.frameLaborOptions.Zorder(0)
Gui.FormImportMaintenance.frameLaborOptions.FontName("Tahoma")
Gui.FormImportMaintenance.frameLaborOptions.FontSize(8.25)
Gui.FormImportMaintenance.chkMoveTicketATG.Create(CheckBox)
Gui.FormImportMaintenance.chkMoveTicketATG.Enabled(False)
Gui.FormImportMaintenance.chkMoveTicketATG.Size(2070,300)
Gui.FormImportMaintenance.chkMoveTicketATG.Position(90,795)
Gui.FormImportMaintenance.chkMoveTicketATG.Parent("frameLaborOptions")
Gui.FormImportMaintenance.chkMoveTicketATG.TabStop(True)
Gui.FormImportMaintenance.chkMoveTicketATG.TabIndex(17)
Gui.FormImportMaintenance.chkMoveTicketATG.Caption("ATG Move Ticket")
Gui.FormImportMaintenance.chkMoveTicketATG.ToolTip("If the 3144 or 5455 Move Ticket arc projects are installed, you will be able to select from them here.")
Gui.FormImportMaintenance.chkMoveTicketATG.Event(Click,CheckMoveTicketButtons)
Gui.FormImportMaintenance.chkMoveTicketATG.Visible(True)
Gui.FormImportMaintenance.chkMoveTicketATG.Zorder(0)
Gui.FormImportMaintenance.chkMoveTicketATG.FontName("Tahoma")
Gui.FormImportMaintenance.chkMoveTicketATG.FontSize(8.25)
Gui.FormImportMaintenance.chkOverwriteOpCode.Create(CheckBox)
Gui.FormImportMaintenance.chkOverwriteOpCode.Size(3345,300)
Gui.FormImportMaintenance.chkOverwriteOpCode.Position(105,1410)
Gui.FormImportMaintenance.chkOverwriteOpCode.Parent("frameLaborOptions")
Gui.FormImportMaintenance.chkOverwriteOpCode.Caption("Overwrite OP Code on Labor Sequence")
Gui.FormImportMaintenance.chkOverwriteOpCode.Enabled(True)
Gui.FormImportMaintenance.chkOverwriteOpCode.Visible(True)
Gui.FormImportMaintenance.chkOverwriteOpCode.Zorder(0)
Gui.FormImportMaintenance.chkOverwriteOpCode.FontName("Tahoma")
Gui.FormImportMaintenance.chkOverwriteOpCode.FontSize(8.25)
Gui.FormImportMaintenance.txtCustomLabel.Create(TextBox,"",True,3015,300,0,1545,1080,False,0,"Arial",8,-2147483643,1)
Gui.FormImportMaintenance.txtCustomLabel.Parent("frameLaborOptions")
Gui.FormImportMaintenance.txtCustomLabel.Locked(True)
Gui.FormImportMaintenance.chkCustomLabel.Create(CheckBox)
Gui.FormImportMaintenance.chkCustomLabel.Enabled(False)
Gui.FormImportMaintenance.chkCustomLabel.Size(1395,300)
Gui.FormImportMaintenance.chkCustomLabel.Position(90,1065)
Gui.FormImportMaintenance.chkCustomLabel.Parent("frameLaborOptions")
Gui.FormImportMaintenance.chkCustomLabel.TabStop(True)
Gui.FormImportMaintenance.chkCustomLabel.TabIndex(24)
Gui.FormImportMaintenance.chkCustomLabel.Caption("Custom Label")
Gui.FormImportMaintenance.chkCustomLabel.Event(Click,chkCustomLabel_Click)
Gui.FormImportMaintenance.chkCustomLabel.Visible(True)
Gui.FormImportMaintenance.chkCustomLabel.Zorder(0)
Gui.FormImportMaintenance.chkCustomLabel.FontName("Tahoma")
Gui.FormImportMaintenance.chkCustomLabel.FontSize(8.25)
Gui.FormImportMaintenance.chkMoveTicketNone.Create(CheckBox)
Gui.FormImportMaintenance.chkMoveTicketNone.Size(825,300)
Gui.FormImportMaintenance.chkMoveTicketNone.Position(5100,525)
Gui.FormImportMaintenance.chkMoveTicketNone.Parent("frameLaborOptions")
Gui.FormImportMaintenance.chkMoveTicketNone.TabStop(True)
Gui.FormImportMaintenance.chkMoveTicketNone.TabIndex(17)
Gui.FormImportMaintenance.chkMoveTicketNone.Caption("None")
Gui.FormImportMaintenance.chkMoveTicketNone.ToolTip("If the 3144 or 5455 Move Ticket arc projects are installed, you will be able to select from them here.")
Gui.FormImportMaintenance.chkMoveTicketNone.Event(Click,CheckMoveTicketButtons)
Gui.FormImportMaintenance.chkMoveTicketNone.Enabled(True)
Gui.FormImportMaintenance.chkMoveTicketNone.Visible(True)
Gui.FormImportMaintenance.chkMoveTicketNone.Zorder(0)
Gui.FormImportMaintenance.chkMoveTicketNone.FontName("Tahoma")
Gui.FormImportMaintenance.chkMoveTicketNone.FontSize(8.25)
Gui.FormImportMaintenance.chkMoveTicketCodesoft.Create(CheckBox)
Gui.FormImportMaintenance.chkMoveTicketCodesoft.Size(2535,300)
Gui.FormImportMaintenance.chkMoveTicketCodesoft.Position(2445,525)
Gui.FormImportMaintenance.chkMoveTicketCodesoft.Parent("frameLaborOptions")
Gui.FormImportMaintenance.chkMoveTicketCodesoft.TabStop(True)
Gui.FormImportMaintenance.chkMoveTicketCodesoft.TabIndex(17)
Gui.FormImportMaintenance.chkMoveTicketCodesoft.Caption("Codesoft Move Ticket [5455]")
Gui.FormImportMaintenance.chkMoveTicketCodesoft.ToolTip("If the 3144 or 5455 Move Ticket arc projects are installed, you will be able to select from them here.")
Gui.FormImportMaintenance.chkMoveTicketCodesoft.Event(Click,CheckMoveTicketButtons)
Gui.FormImportMaintenance.chkMoveTicketCodesoft.Enabled(False)
Gui.FormImportMaintenance.chkMoveTicketCodesoft.Visible(True)
Gui.FormImportMaintenance.chkMoveTicketCodesoft.Zorder(0)
Gui.FormImportMaintenance.chkMoveTicketCodesoft.FontName("Tahoma")
Gui.FormImportMaintenance.chkMoveTicketCodesoft.FontSize(8.25)
Gui.FormImportMaintenance.chkMoveTicketCrystal.Create(CheckBox)
Gui.FormImportMaintenance.chkMoveTicketCrystal.Size(2355,300)
Gui.FormImportMaintenance.chkMoveTicketCrystal.Position(90,525)
Gui.FormImportMaintenance.chkMoveTicketCrystal.Parent("frameLaborOptions")
Gui.FormImportMaintenance.chkMoveTicketCrystal.TabStop(True)
Gui.FormImportMaintenance.chkMoveTicketCrystal.TabIndex(17)
Gui.FormImportMaintenance.chkMoveTicketCrystal.Caption("Crystal Move Ticket [3144]")
Gui.FormImportMaintenance.chkMoveTicketCrystal.ToolTip("If the 3144 or 5455 Move Ticket arc projects are installed, you will be able to select from them here.")
Gui.FormImportMaintenance.chkMoveTicketCrystal.Event(Click,CheckMoveTicketButtons)
Gui.FormImportMaintenance.chkMoveTicketCrystal.Enabled(False)
Gui.FormImportMaintenance.chkMoveTicketCrystal.Visible(True)
Gui.FormImportMaintenance.chkMoveTicketCrystal.Zorder(0)
Gui.FormImportMaintenance.chkMoveTicketCrystal.FontName("Tahoma")
Gui.FormImportMaintenance.chkMoveTicketCrystal.FontSize(8.25)
Gui.FormImportMaintenance.cmdBrwEmp.Create(Button)
Gui.FormImportMaintenance.cmdBrwEmp.Size(390,375)
Gui.FormImportMaintenance.cmdBrwEmp.Position(2700,135)
Gui.FormImportMaintenance.cmdBrwEmp.Parent("frameLaborOptions")
Gui.FormImportMaintenance.cmdBrwEmp.Caption("^")
Gui.FormImportMaintenance.cmdBrwEmp.Event(Click,cmdBrwEmp_Click)
Gui.FormImportMaintenance.cmdBrwEmp.TabStop(True)
Gui.FormImportMaintenance.cmdBrwEmp.TabIndex(26)
Gui.FormImportMaintenance.cmdBrwEmp.Enabled(True)
Gui.FormImportMaintenance.cmdBrwEmp.Visible(True)
Gui.FormImportMaintenance.cmdBrwEmp.Zorder(0)
Gui.FormImportMaintenance.cmdBrwEmp.FontName("Tahoma")
Gui.FormImportMaintenance.cmdBrwEmp.FontSize(8.25)
Gui.FormImportMaintenance.lbl11.Create(Label,"Default Employee ID",True,1530,255,0,90,255,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImportMaintenance.lbl11.Parent("frameLaborOptions")
Gui.FormImportMaintenance.lbl11.BorderStyle(0)
Gui.FormImportMaintenance.cmdCustomLabelBrowser.Create(Button)
Gui.FormImportMaintenance.cmdCustomLabelBrowser.Enabled(False)
Gui.FormImportMaintenance.cmdCustomLabelBrowser.Size(405,405)
Gui.FormImportMaintenance.cmdCustomLabelBrowser.Position(4620,1020)
Gui.FormImportMaintenance.cmdCustomLabelBrowser.Parent("frameLaborOptions")
Gui.FormImportMaintenance.cmdCustomLabelBrowser.Caption("^")
Gui.FormImportMaintenance.cmdCustomLabelBrowser.Event(Click,cmdCustomLabelBrowser_Click)
Gui.FormImportMaintenance.cmdCustomLabelBrowser.Visible(True)
Gui.FormImportMaintenance.cmdCustomLabelBrowser.Zorder(0)
Gui.FormImportMaintenance.cmdCustomLabelBrowser.FontName("Tahoma")
Gui.FormImportMaintenance.cmdCustomLabelBrowser.FontSize(8.25)
Gui.FormImportMaintenance.txtDefEmp.Create(TextBox,"",True,960,300,0,1710,165,True,0,"Arial",8,-2147483643,1)
Gui.FormImportMaintenance.txtDefEmp.Parent("frameLaborOptions")
Gui.FormImportMaintenance.txtDefEmp.Locked(True)
Gui.FormImportMaintenance.txtDefEmp.TabStop(True)
Gui.FormImportMaintenance.txtDefEmp.TabIndex(25)
Gui.FormImportMaintenance.txtDefEmp.MaxLength(15)
Gui.FormImportMaintenance.chkWCCrossRef.Create(CheckBox)
Gui.FormImportMaintenance.chkWCCrossRef.Size(3015,300)
Gui.FormImportMaintenance.chkWCCrossRef.Position(105,1740)
Gui.FormImportMaintenance.chkWCCrossRef.Parent("frameLaborOptions")
Gui.FormImportMaintenance.chkWCCrossRef.TabStop(True)
Gui.FormImportMaintenance.chkWCCrossRef.TabIndex(16)
Gui.FormImportMaintenance.chkWCCrossRef.Caption("Use Work Center Cross Reference")
Gui.FormImportMaintenance.chkWCCrossRef.Event(Click,chkWCCrossRef_Click)
Gui.FormImportMaintenance.chkWCCrossRef.Enabled(True)
Gui.FormImportMaintenance.chkWCCrossRef.Visible(True)
Gui.FormImportMaintenance.chkWCCrossRef.Zorder(0)
Gui.FormImportMaintenance.chkWCCrossRef.FontName("Tahoma")
Gui.FormImportMaintenance.chkWCCrossRef.FontSize(8.25)
Gui.FormImportMaintenance.cmdMaintWCXRef.Create(Button)
Gui.FormImportMaintenance.cmdMaintWCXRef.Enabled(False)
Gui.FormImportMaintenance.cmdMaintWCXRef.Size(2475,375)
Gui.FormImportMaintenance.cmdMaintWCXRef.Position(3150,1740)
Gui.FormImportMaintenance.cmdMaintWCXRef.Parent("frameLaborOptions")
Gui.FormImportMaintenance.cmdMaintWCXRef.TabStop(True)
Gui.FormImportMaintenance.cmdMaintWCXRef.TabIndex(31)
Gui.FormImportMaintenance.cmdMaintWCXRef.Caption("Maintain Cross References")
Gui.FormImportMaintenance.cmdMaintWCXRef.Event(Click,cmdMaintWCXRef_Click)
Gui.FormImportMaintenance.cmdMaintWCXRef.Visible(True)
Gui.FormImportMaintenance.cmdMaintWCXRef.Zorder(0)
Gui.FormImportMaintenance.cmdMaintWCXRef.FontName("Tahoma")
Gui.FormImportMaintenance.cmdMaintWCXRef.FontSize(8.25)
Gui.FormImportMaintenance.lblLaborSequenceClose.Create(Label,"Close Labor Sequence",True,1935,255,0,120,2160,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImportMaintenance.lblLaborSequenceClose.Parent("frameLaborOptions")
Gui.FormImportMaintenance.lblLaborSequenceClose.BorderStyle(0)
Gui.FormImportMaintenance.ddlCloseLaborSequence.Create(DropDownList)
Gui.FormImportMaintenance.ddlCloseLaborSequence.Size(5865,330)
Gui.FormImportMaintenance.ddlCloseLaborSequence.Position(120,2370)
Gui.FormImportMaintenance.ddlCloseLaborSequence.Parent("frameLaborOptions")
Gui.FormImportMaintenance.ddlCloseLaborSequence.Enabled(True)
Gui.FormImportMaintenance.ddlCloseLaborSequence.Visible(True)
Gui.FormImportMaintenance.ddlCloseLaborSequence.Zorder(0)
Gui.FormImportMaintenance.ddlCloseLaborSequence.FontName("Tahoma")
Gui.FormImportMaintenance.ddlCloseLaborSequence.FontSize(8.25)
Gui.FormImportMaintenance.frameProfileIndependentOptions.Create(Frame)
Gui.FormImportMaintenance.frameProfileIndependentOptions.Size(6075,630)
Gui.FormImportMaintenance.frameProfileIndependentOptions.Position(3975,9750)
Gui.FormImportMaintenance.frameProfileIndependentOptions.Parent("frameImpStd")
Gui.FormImportMaintenance.frameProfileIndependentOptions.Caption("Profile Independent Options")
Gui.FormImportMaintenance.frameProfileIndependentOptions.Enabled(True)
Gui.FormImportMaintenance.frameProfileIndependentOptions.Visible(True)
Gui.FormImportMaintenance.frameProfileIndependentOptions.Zorder(0)
Gui.FormImportMaintenance.frameProfileIndependentOptions.FontName("Tahoma")
Gui.FormImportMaintenance.frameProfileIndependentOptions.FontSize(8.25)
Gui.FormImportMaintenance.lblScriptButton.Create(Label,"Launch from GUI Script Button",True,2310,255,0,15,330,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImportMaintenance.lblScriptButton.Parent("frameProfileIndependentOptions")
Gui.FormImportMaintenance.lblScriptButton.BorderStyle(0)
Gui.FormImportMaintenance.ddlScriptButton.Create(DropDownList)
Gui.FormImportMaintenance.ddlScriptButton.Size(3135,330)
Gui.FormImportMaintenance.ddlScriptButton.Position(2370,225)
Gui.FormImportMaintenance.ddlScriptButton.Parent("frameProfileIndependentOptions")
Gui.FormImportMaintenance.ddlScriptButton.TabStop(True)
Gui.FormImportMaintenance.ddlScriptButton.TabIndex(15)
Gui.FormImportMaintenance.ddlScriptButton.Enabled(True)
Gui.FormImportMaintenance.ddlScriptButton.Visible(True)
Gui.FormImportMaintenance.ddlScriptButton.Zorder(0)
Gui.FormImportMaintenance.ddlScriptButton.FontName("Tahoma")
Gui.FormImportMaintenance.ddlScriptButton.FontSize(8.25)
Gui.FormImportMaintenance.ddlAreaPerPart.Create(DropDownList)
Gui.FormImportMaintenance.ddlAreaPerPart.Size(1875,330)
Gui.FormImportMaintenance.ddlAreaPerPart.Position(1695,2355)
Gui.FormImportMaintenance.ddlAreaPerPart.Parent("frameImpStd")
Gui.FormImportMaintenance.ddlAreaPerPart.TabStop(True)
Gui.FormImportMaintenance.ddlAreaPerPart.TabIndex(11)
Gui.FormImportMaintenance.ddlAreaPerPart.Enabled(True)
Gui.FormImportMaintenance.ddlAreaPerPart.Visible(True)
Gui.FormImportMaintenance.ddlAreaPerPart.Zorder(0)
Gui.FormImportMaintenance.ddlAreaPerPart.FontName("Tahoma")
Gui.FormImportMaintenance.ddlAreaPerPart.FontSize(8.25)
Gui.FormImportMaintenance.chkWCWG.Create(CheckBox)
Gui.FormImportMaintenance.chkWCWG.Size(6075,300)
Gui.FormImportMaintenance.chkWCWG.Position(3975,8160)
Gui.FormImportMaintenance.chkWCWG.Parent("frameImpStd")
Gui.FormImportMaintenance.chkWCWG.Caption("Create Flex Schedule for Subsequent Sequence by Work Center/Work Group")
Gui.FormImportMaintenance.chkWCWG.Event(Click,chkWCWG_Click)
Gui.FormImportMaintenance.chkWCWG.TabStop(True)
Gui.FormImportMaintenance.chkWCWG.TabIndex(27)
Gui.FormImportMaintenance.chkWCWG.Enabled(True)
Gui.FormImportMaintenance.chkWCWG.Visible(True)
Gui.FormImportMaintenance.chkWCWG.Zorder(0)
Gui.FormImportMaintenance.chkWCWG.FontName("Tahoma")
Gui.FormImportMaintenance.chkWCWG.FontSize(8.25)
Gui.FormImportMaintenance.ddlNestID.Create(DropDownList)
Gui.FormImportMaintenance.ddlNestID.Size(1875,330)
Gui.FormImportMaintenance.ddlNestID.Position(1710,225)
Gui.FormImportMaintenance.ddlNestID.Parent("frameImpStd")
Gui.FormImportMaintenance.ddlNestID.TabStop(True)
Gui.FormImportMaintenance.ddlNestID.TabIndex(5)
Gui.FormImportMaintenance.ddlNestID.Enabled(True)
Gui.FormImportMaintenance.ddlNestID.Visible(True)
Gui.FormImportMaintenance.ddlNestID.Zorder(0)
Gui.FormImportMaintenance.ddlNestID.FontName("Tahoma")
Gui.FormImportMaintenance.ddlNestID.FontSize(8.25)
Gui.FormImportMaintenance.ddlWeight.Create(DropDownList)
Gui.FormImportMaintenance.ddlWeight.Size(1875,330)
Gui.FormImportMaintenance.ddlWeight.Position(1710,2790)
Gui.FormImportMaintenance.ddlWeight.Parent("frameImpStd")
Gui.FormImportMaintenance.ddlWeight.TabStop(True)
Gui.FormImportMaintenance.ddlWeight.TabIndex(12)
Gui.FormImportMaintenance.ddlWeight.Enabled(True)
Gui.FormImportMaintenance.ddlWeight.Visible(True)
Gui.FormImportMaintenance.ddlWeight.Zorder(0)
Gui.FormImportMaintenance.ddlWeight.FontName("Tahoma")
Gui.FormImportMaintenance.ddlWeight.FontSize(8.25)
Gui.FormImportMaintenance.ddlJobArea.Create(DropDownList)
Gui.FormImportMaintenance.ddlJobArea.Size(1875,330)
Gui.FormImportMaintenance.ddlJobArea.Position(1710,5580)
Gui.FormImportMaintenance.ddlJobArea.Parent("frameImpStd")
Gui.FormImportMaintenance.ddlJobArea.TabStop(True)
Gui.FormImportMaintenance.ddlJobArea.TabIndex(15)
Gui.FormImportMaintenance.ddlJobArea.Enabled(True)
Gui.FormImportMaintenance.ddlJobArea.Visible(True)
Gui.FormImportMaintenance.ddlJobArea.Zorder(0)
Gui.FormImportMaintenance.ddlJobArea.FontName("Tahoma")
Gui.FormImportMaintenance.ddlJobArea.FontSize(8.25)
Gui.FormImportMaintenance.cmdExpression.Create(Button)
Gui.FormImportMaintenance.cmdExpression.Size(1815,375)
Gui.FormImportMaintenance.cmdExpression.Position(1740,6870)
Gui.FormImportMaintenance.cmdExpression.Parent("frameImpStd")
Gui.FormImportMaintenance.cmdExpression.Caption("Expression Columns")
Gui.FormImportMaintenance.cmdExpression.Event(Click,cmdExpression_Click)
Gui.FormImportMaintenance.cmdExpression.Enabled(True)
Gui.FormImportMaintenance.cmdExpression.Visible(True)
Gui.FormImportMaintenance.cmdExpression.Zorder(0)
Gui.FormImportMaintenance.cmdExpression.FontName("Tahoma")
Gui.FormImportMaintenance.cmdExpression.FontSize(8.25)
Gui.FormImportMaintenance.chkUnattendedImport.Create(CheckBox)
Gui.FormImportMaintenance.chkUnattendedImport.Size(1845,300)
Gui.FormImportMaintenance.chkUnattendedImport.Position(3975,9360)
Gui.FormImportMaintenance.chkUnattendedImport.Parent("frameImpStd")
Gui.FormImportMaintenance.chkUnattendedImport.TabStop(True)
Gui.FormImportMaintenance.chkUnattendedImport.TabIndex(16)
Gui.FormImportMaintenance.chkUnattendedImport.Caption("Unattended Import")
Gui.FormImportMaintenance.chkUnattendedImport.Event(Click,chkUnattendedImport_Click)
Gui.FormImportMaintenance.chkUnattendedImport.Enabled(True)
Gui.FormImportMaintenance.chkUnattendedImport.Visible(True)
Gui.FormImportMaintenance.chkUnattendedImport.Zorder(0)
Gui.FormImportMaintenance.chkUnattendedImport.FontName("Tahoma")
Gui.FormImportMaintenance.chkUnattendedImport.FontSize(8.25)
Gui.FormImportMaintenance.chkNCellStationFiles.Create(CheckBox)
Gui.FormImportMaintenance.chkNCellStationFiles.Enabled(True)
Gui.FormImportMaintenance.chkNCellStationFiles.Visible(True)
Gui.FormImportMaintenance.chkNCellStationFiles.Zorder(0)
Gui.FormImportMaintenance.chkNCellStationFiles.Size(3045,300)
Gui.FormImportMaintenance.chkNCellStationFiles.Position(135,8475)
Gui.FormImportMaintenance.chkNCellStationFiles.TabStop(True)
Gui.FormImportMaintenance.chkNCellStationFiles.TabIndex(27)
Gui.FormImportMaintenance.chkNCellStationFiles.Caption("Import NCell Station Files")
Gui.FormImportMaintenance.chkNCellStationFiles.FontName("Tahoma")
Gui.FormImportMaintenance.chkNCellStationFiles.FontSize(8.25)
Gui.FormImportMaintenance.chkNCellStationFiles.Parent("frameImpStd")
Gui.FormImportMaintenance.lbl10.Create(Label,"Labor WC",True,1185,255,0,135,2010,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImportMaintenance.lbl10.Parent("frameImpStd")
Gui.FormImportMaintenance.lbl10.BorderStyle(0)
Gui.FormImportMaintenance.ddlTimePerPart.Create(DropDownList)
Gui.FormImportMaintenance.ddlTimePerPart.Size(1875,330)
Gui.FormImportMaintenance.ddlTimePerPart.Position(1710,4410)
Gui.FormImportMaintenance.ddlTimePerPart.Parent("frameImpStd")
Gui.FormImportMaintenance.ddlTimePerPart.TabStop(True)
Gui.FormImportMaintenance.ddlTimePerPart.TabIndex(15)
Gui.FormImportMaintenance.ddlTimePerPart.Enabled(True)
Gui.FormImportMaintenance.ddlTimePerPart.Visible(True)
Gui.FormImportMaintenance.ddlTimePerPart.Zorder(0)
Gui.FormImportMaintenance.ddlTimePerPart.FontName("Tahoma")
Gui.FormImportMaintenance.ddlTimePerPart.FontSize(8.25)
Gui.FormImportMaintenance.ddlLaborWc.Create(DropDownList)
Gui.FormImportMaintenance.ddlLaborWc.Size(1875,330)
Gui.FormImportMaintenance.ddlLaborWc.Position(1710,1920)
Gui.FormImportMaintenance.ddlLaborWc.Parent("frameImpStd")
Gui.FormImportMaintenance.ddlLaborWc.TabStop(True)
Gui.FormImportMaintenance.ddlLaborWc.TabIndex(9)
Gui.FormImportMaintenance.ddlLaborWc.Enabled(True)
Gui.FormImportMaintenance.ddlLaborWc.Visible(True)
Gui.FormImportMaintenance.ddlLaborWc.Zorder(0)
Gui.FormImportMaintenance.ddlLaborWc.FontName("Tahoma")
Gui.FormImportMaintenance.ddlLaborWc.FontSize(8.25)
Gui.FormImportMaintenance.lbl12.Create(Label,"Bad Piece",True,1320,255,0,135,4080,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImportMaintenance.lbl12.Parent("frameImpStd")
Gui.FormImportMaintenance.lbl12.BorderStyle(0)
Gui.FormImportMaintenance.lblSheetArea.Create(Label,"Sheet Area",True,1350,255,0,135,4980,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImportMaintenance.lblSheetArea.Parent("frameImpStd")
Gui.FormImportMaintenance.lblSheetArea.BorderStyle(0)
Gui.FormImportMaintenance.ddlImportFrequency.Create(DropDownList)
Gui.FormImportMaintenance.ddlImportFrequency.Size(3135,300)
Gui.FormImportMaintenance.ddlImportFrequency.Position(6330,9375)
Gui.FormImportMaintenance.ddlImportFrequency.Parent("frameImpStd")
Gui.FormImportMaintenance.ddlImportFrequency.TabStop(True)
Gui.FormImportMaintenance.ddlImportFrequency.TabIndex(15)
Gui.FormImportMaintenance.ddlImportFrequency.Enabled(True)
Gui.FormImportMaintenance.ddlImportFrequency.Visible(True)
Gui.FormImportMaintenance.ddlImportFrequency.Zorder(0)
Gui.FormImportMaintenance.ddlImportFrequency.FontName("Tahoma")
Gui.FormImportMaintenance.ddlImportFrequency.FontSize(8.25)
Gui.FormImportMaintenance.chkBackFlushMat.Create(CheckBox)
Gui.FormImportMaintenance.chkBackFlushMat.Size(1800,300)
Gui.FormImportMaintenance.chkBackFlushMat.Position(3975,120)
Gui.FormImportMaintenance.chkBackFlushMat.Parent("frameImpStd")
Gui.FormImportMaintenance.chkBackFlushMat.Caption("Back Flush Material")
Gui.FormImportMaintenance.chkBackFlushMat.Event(Click,chkBackFlushMat_Click)
Gui.FormImportMaintenance.chkBackFlushMat.TabStop(True)
Gui.FormImportMaintenance.chkBackFlushMat.TabIndex(16)
Gui.FormImportMaintenance.chkBackFlushMat.Enabled(True)
Gui.FormImportMaintenance.chkBackFlushMat.Visible(True)
Gui.FormImportMaintenance.chkBackFlushMat.Zorder(0)
Gui.FormImportMaintenance.chkBackFlushMat.FontName("Tahoma")
Gui.FormImportMaintenance.chkBackFlushMat.FontSize(8.25)
Gui.FormImportMaintenance.lbl9.Create(Label,"Time Per Part",True,1185,255,0,135,4500,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImportMaintenance.lbl9.Parent("frameImpStd")
Gui.FormImportMaintenance.lbl9.BorderStyle(0)
Gui.FormImportMaintenance.ddlRawMat.Create(DropDownList)
Gui.FormImportMaintenance.ddlRawMat.Size(1875,330)
Gui.FormImportMaintenance.ddlRawMat.Position(1710,1080)
Gui.FormImportMaintenance.ddlRawMat.Parent("frameImpStd")
Gui.FormImportMaintenance.ddlRawMat.TabStop(True)
Gui.FormImportMaintenance.ddlRawMat.TabIndex(7)
Gui.FormImportMaintenance.ddlRawMat.Enabled(True)
Gui.FormImportMaintenance.ddlRawMat.Visible(True)
Gui.FormImportMaintenance.ddlRawMat.Zorder(0)
Gui.FormImportMaintenance.ddlRawMat.FontName("Tahoma")
Gui.FormImportMaintenance.ddlRawMat.FontSize(8.25)
Gui.FormImportMaintenance.ddlGoodPc.Create(DropDownList)
Gui.FormImportMaintenance.ddlGoodPc.Size(1875,330)
Gui.FormImportMaintenance.ddlGoodPc.Position(1710,3540)
Gui.FormImportMaintenance.ddlGoodPc.Parent("frameImpStd")
Gui.FormImportMaintenance.ddlGoodPc.TabStop(True)
Gui.FormImportMaintenance.ddlGoodPc.TabIndex(13)
Gui.FormImportMaintenance.ddlGoodPc.Enabled(True)
Gui.FormImportMaintenance.ddlGoodPc.Visible(True)
Gui.FormImportMaintenance.ddlGoodPc.Zorder(0)
Gui.FormImportMaintenance.ddlGoodPc.FontName("Tahoma")
Gui.FormImportMaintenance.ddlGoodPc.FontSize(8.25)
Gui.FormImportMaintenance.frameMatOptions.Create(Frame)
Gui.FormImportMaintenance.frameMatOptions.Size(6075,4590)
Gui.FormImportMaintenance.frameMatOptions.Position(3975,390)
Gui.FormImportMaintenance.frameMatOptions.Parent("frameImpStd")
Gui.FormImportMaintenance.frameMatOptions.Caption("Material Options")
Gui.FormImportMaintenance.frameMatOptions.Enabled(False)
Gui.FormImportMaintenance.frameMatOptions.Visible(True)
Gui.FormImportMaintenance.frameMatOptions.Zorder(0)
Gui.FormImportMaintenance.frameMatOptions.FontName("Tahoma")
Gui.FormImportMaintenance.frameMatOptions.FontSize(8.25)
Gui.FormImportMaintenance.ddlCloseMaterialSequence.Create(DropDownList)
Gui.FormImportMaintenance.ddlCloseMaterialSequence.Size(5910,330)
Gui.FormImportMaintenance.ddlCloseMaterialSequence.Position(75,3600)
Gui.FormImportMaintenance.ddlCloseMaterialSequence.Parent("frameMatOptions")
Gui.FormImportMaintenance.ddlCloseMaterialSequence.Enabled(True)
Gui.FormImportMaintenance.ddlCloseMaterialSequence.Visible(True)
Gui.FormImportMaintenance.ddlCloseMaterialSequence.Zorder(0)
Gui.FormImportMaintenance.ddlCloseMaterialSequence.FontName("Tahoma")
Gui.FormImportMaintenance.ddlCloseMaterialSequence.FontSize(8.25)
Gui.FormImportMaintenance.lblMaterialSequenceClose.Create(Label,"Close Material Sequence",True,1935,255,0,75,3390,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImportMaintenance.lblMaterialSequenceClose.Parent("frameMatOptions")
Gui.FormImportMaintenance.lblMaterialSequenceClose.BorderStyle(0)
Gui.FormImportMaintenance.txtDelimiter.Create(TextBox,"-",True,645,300,0,4530,2070,False,2,"Arial",8,-2147483643,1)
Gui.FormImportMaintenance.txtDelimiter.Parent("frameMatOptions")
Gui.FormImportMaintenance.txtDelimiter.MaxLength(3)
Gui.FormImportMaintenance.txtDelimiter.Event(LostFocus,txtDelimiter_LostFocus)
Gui.FormImportMaintenance.lbl23.Create(Label,"Delimiter ",True,810,255,0,3645,2160,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImportMaintenance.lbl23.Parent("frameMatOptions")
Gui.FormImportMaintenance.lbl23.BorderStyle(0)
Gui.FormImportMaintenance.chkSplitMaterial.Create(CheckBox)
Gui.FormImportMaintenance.chkSplitMaterial.Size(2250,300)
Gui.FormImportMaintenance.chkSplitMaterial.Position(3405,1725)
Gui.FormImportMaintenance.chkSplitMaterial.Parent("frameMatOptions")
Gui.FormImportMaintenance.chkSplitMaterial.Caption("Split Material On Delimiter")
Gui.FormImportMaintenance.chkSplitMaterial.Event(Click,chkSplitMaterial_Click)
Gui.FormImportMaintenance.chkSplitMaterial.Enabled(True)
Gui.FormImportMaintenance.chkSplitMaterial.Visible(True)
Gui.FormImportMaintenance.chkSplitMaterial.Zorder(0)
Gui.FormImportMaintenance.chkSplitMaterial.FontName("Tahoma")
Gui.FormImportMaintenance.chkSplitMaterial.FontSize(8.25)
Gui.FormImportMaintenance.chkCheckMaterial.Create(CheckBox)
Gui.FormImportMaintenance.chkCheckMaterial.Size(2745,300)
Gui.FormImportMaintenance.chkCheckMaterial.Position(75,2370)
Gui.FormImportMaintenance.chkCheckMaterial.Parent("frameMatOptions")
Gui.FormImportMaintenance.chkCheckMaterial.Caption("Check Material Before Posting")
Gui.FormImportMaintenance.chkCheckMaterial.Enabled(True)
Gui.FormImportMaintenance.chkCheckMaterial.Visible(True)
Gui.FormImportMaintenance.chkCheckMaterial.Zorder(0)
Gui.FormImportMaintenance.chkCheckMaterial.FontName("Tahoma")
Gui.FormImportMaintenance.chkCheckMaterial.FontSize(8.25)
Gui.FormImportMaintenance.lblThreshold.Create(Label,"Issue Full Sheet If Usage Exceeds",True,2580,255,0,75,2760,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImportMaintenance.lblThreshold.Parent("frameMatOptions")
Gui.FormImportMaintenance.lblThreshold.BorderStyle(0)
Gui.FormImportMaintenance.txtThreshold.Create(TextBox,"0",True,510,300,0,2670,2670,True,1,"Arial",8,-2147483643,1)
Gui.FormImportMaintenance.txtThreshold.Parent("frameMatOptions")
Gui.FormImportMaintenance.txtThreshold.NumericOnly(2)
Gui.FormImportMaintenance.txtThreshold.Event(LostFocus,txtThreshold_LostFocus)
Gui.FormImportMaintenance.lblThresholdPercent.Create(Label,"%",True,315,255,0,3210,2760,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImportMaintenance.lblThresholdPercent.Parent("frameMatOptions")
Gui.FormImportMaintenance.lblThresholdPercent.BorderStyle(0)
Gui.FormImportMaintenance.chkUse99Sequence.Create(CheckBox)
Gui.FormImportMaintenance.chkUse99Sequence.Enabled(True)
Gui.FormImportMaintenance.chkUse99Sequence.Visible(True)
Gui.FormImportMaintenance.chkUse99Sequence.Zorder(0)
Gui.FormImportMaintenance.chkUse99Sequence.Size(4320,300)
Gui.FormImportMaintenance.chkUse99Sequence.Position(75,4260)
Gui.FormImportMaintenance.chkUse99Sequence.Caption("Use 990000 Sequence if no material sequence found")
Gui.FormImportMaintenance.chkUse99Sequence.FontName("Tahoma")
Gui.FormImportMaintenance.chkUse99Sequence.FontSize(8.25)
Gui.FormImportMaintenance.chkUse99Sequence.Parent("frameMatOptions")
Gui.FormImportMaintenance.txtLotBin.Create(TextBox,"",True,2820,300,0,2745,540,False,0,"Arial",8,-2147483643,1)
Gui.FormImportMaintenance.txtLotBin.Parent("frameMatOptions")
Gui.FormImportMaintenance.txtLotBin.Locked(True)
Gui.FormImportMaintenance.txtLotBin.TabStop(True)
Gui.FormImportMaintenance.txtLotBin.TabIndex(20)
Gui.FormImportMaintenance.chkIndirectIssue.Create(CheckBox)
Gui.FormImportMaintenance.chkIndirectIssue.Size(2460,300)
Gui.FormImportMaintenance.chkIndirectIssue.Position(75,1305)
Gui.FormImportMaintenance.chkIndirectIssue.Parent("frameMatOptions")
Gui.FormImportMaintenance.chkIndirectIssue.Caption("Issue Waste to Indirect WO")
Gui.FormImportMaintenance.chkIndirectIssue.Event(Click,chkIndirectIssue_Click)
Gui.FormImportMaintenance.chkIndirectIssue.Enabled(True)
Gui.FormImportMaintenance.chkIndirectIssue.Visible(True)
Gui.FormImportMaintenance.chkIndirectIssue.Zorder(0)
Gui.FormImportMaintenance.chkIndirectIssue.FontName("Tahoma")
Gui.FormImportMaintenance.chkIndirectIssue.FontSize(8.25)
Gui.FormImportMaintenance.chkMatMisc.Create(CheckBox)
Gui.FormImportMaintenance.chkMatMisc.Size(3510,300)
Gui.FormImportMaintenance.chkMatMisc.Position(75,900)
Gui.FormImportMaintenance.chkMatMisc.Parent("frameMatOptions")
Gui.FormImportMaintenance.chkMatMisc.Caption("Back flush to Misc. Material Sequence")
Gui.FormImportMaintenance.chkMatMisc.TabStop(True)
Gui.FormImportMaintenance.chkMatMisc.TabIndex(23)
Gui.FormImportMaintenance.chkMatMisc.Enabled(True)
Gui.FormImportMaintenance.chkMatMisc.Visible(True)
Gui.FormImportMaintenance.chkMatMisc.Zorder(0)
Gui.FormImportMaintenance.chkMatMisc.FontName("Tahoma")
Gui.FormImportMaintenance.chkMatMisc.FontSize(8.25)
Gui.FormImportMaintenance.cmdBrwLotBin.Create(Button)
Gui.FormImportMaintenance.cmdBrwLotBin.Size(390,375)
Gui.FormImportMaintenance.cmdBrwLotBin.Position(5625,510)
Gui.FormImportMaintenance.cmdBrwLotBin.Parent("frameMatOptions")
Gui.FormImportMaintenance.cmdBrwLotBin.Caption("^")
Gui.FormImportMaintenance.cmdBrwLotBin.Event(Click,cmdBrwLotBin_Click)
Gui.FormImportMaintenance.cmdBrwLotBin.Enabled(False)
Gui.FormImportMaintenance.cmdBrwLotBin.TabStop(True)
Gui.FormImportMaintenance.cmdBrwLotBin.TabIndex(21)
Gui.FormImportMaintenance.cmdBrwLotBin.Visible(True)
Gui.FormImportMaintenance.cmdBrwLotBin.Zorder(0)
Gui.FormImportMaintenance.cmdBrwLotBin.FontName("Tahoma")
Gui.FormImportMaintenance.cmdBrwLotBin.FontSize(8.25)
Gui.FormImportMaintenance.optManualBin.Create(Option)
Gui.FormImportMaintenance.optManualBin.Size(2595,255)
Gui.FormImportMaintenance.optManualBin.Position(75,570)
Gui.FormImportMaintenance.optManualBin.Parent("frameMatOptions")
Gui.FormImportMaintenance.optManualBin.Caption("Specify Bin to Issue Mat from")
Gui.FormImportMaintenance.optManualBin.Event(Click,optManualBin_Click)
Gui.FormImportMaintenance.optManualBin.TabStop(True)
Gui.FormImportMaintenance.optManualBin.TabIndex(19)
Gui.FormImportMaintenance.optManualBin.Enabled(True)
Gui.FormImportMaintenance.optManualBin.Visible(True)
Gui.FormImportMaintenance.optManualBin.Zorder(0)
Gui.FormImportMaintenance.optManualBin.FontName("Tahoma")
Gui.FormImportMaintenance.optManualBin.FontSize(8.25)
Gui.FormImportMaintenance.optIssuDefBin.Create(Option)
Gui.FormImportMaintenance.optIssuDefBin.Size(3270,255)
Gui.FormImportMaintenance.optIssuDefBin.Position(2745,240)
Gui.FormImportMaintenance.optIssuDefBin.Parent("frameMatOptions")
Gui.FormImportMaintenance.optIssuDefBin.Caption("Issue from Default Bin in Inventory")
Gui.FormImportMaintenance.optIssuDefBin.Event(Click,optIssuDefBin_Click)
Gui.FormImportMaintenance.optIssuDefBin.TabStop(True)
Gui.FormImportMaintenance.optIssuDefBin.TabIndex(18)
Gui.FormImportMaintenance.optIssuDefBin.Enabled(True)
Gui.FormImportMaintenance.optIssuDefBin.Visible(True)
Gui.FormImportMaintenance.optIssuDefBin.Zorder(0)
Gui.FormImportMaintenance.optIssuDefBin.FontName("Tahoma")
Gui.FormImportMaintenance.optIssuDefBin.FontSize(8.25)
Gui.FormImportMaintenance.txtIndirectIssue.Create(TextBox,"",True,3000,300,0,2565,1335,False,0,"Arial",8,-2147483643,1)
Gui.FormImportMaintenance.txtIndirectIssue.Parent("frameMatOptions")
Gui.FormImportMaintenance.txtIndirectIssue.MaxLength(17)
Gui.FormImportMaintenance.txtIndirectIssue.ToolTip("JOB-SUFFIX-SEQUENCE")
Gui.FormImportMaintenance.lblDecimals.Create(Label,"Issue Amount Decimals",True,1800,255,0,75,3105,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImportMaintenance.lblDecimals.Parent("frameMatOptions")
Gui.FormImportMaintenance.lblDecimals.BorderStyle(0)
Gui.FormImportMaintenance.optIssuInV.Create(Option)
Gui.FormImportMaintenance.optIssuInV.Size(2085,255)
Gui.FormImportMaintenance.optIssuInV.Position(75,240)
Gui.FormImportMaintenance.optIssuInV.Parent("frameMatOptions")
Gui.FormImportMaintenance.optIssuInV.Caption("Issue from Inventory")
Gui.FormImportMaintenance.optIssuInV.Event(Click,optIssuInv_Click)
Gui.FormImportMaintenance.optIssuInV.TabStop(True)
Gui.FormImportMaintenance.optIssuInV.TabIndex(17)
Gui.FormImportMaintenance.optIssuInV.Enabled(True)
Gui.FormImportMaintenance.optIssuInV.Visible(True)
Gui.FormImportMaintenance.optIssuInV.Zorder(0)
Gui.FormImportMaintenance.optIssuInV.FontName("Tahoma")
Gui.FormImportMaintenance.optIssuInV.FontSize(8.25)
Gui.FormImportMaintenance.cmdIndirectWOBrowser.Create(Button)
Gui.FormImportMaintenance.cmdIndirectWOBrowser.Size(405,405)
Gui.FormImportMaintenance.cmdIndirectWOBrowser.Position(5610,1275)
Gui.FormImportMaintenance.cmdIndirectWOBrowser.Parent("frameMatOptions")
Gui.FormImportMaintenance.cmdIndirectWOBrowser.Caption("^")
Gui.FormImportMaintenance.cmdIndirectWOBrowser.Event(Click,cmdIndirectWOBrowser_Click)
Gui.FormImportMaintenance.cmdIndirectWOBrowser.Enabled(False)
Gui.FormImportMaintenance.cmdIndirectWOBrowser.Visible(True)
Gui.FormImportMaintenance.cmdIndirectWOBrowser.Zorder(0)
Gui.FormImportMaintenance.cmdIndirectWOBrowser.FontName("Tahoma")
Gui.FormImportMaintenance.cmdIndirectWOBrowser.FontSize(8.25)
Gui.FormImportMaintenance.chkMetric.Create(CheckBox)
Gui.FormImportMaintenance.chkMetric.Size(2685,300)
Gui.FormImportMaintenance.chkMetric.Position(75,1710)
Gui.FormImportMaintenance.chkMetric.Parent("frameMatOptions")
Gui.FormImportMaintenance.chkMetric.Caption("Use Metric Measurements")
Gui.FormImportMaintenance.chkMetric.Enabled(False)
Gui.FormImportMaintenance.chkMetric.Visible(True)
Gui.FormImportMaintenance.chkMetric.Zorder(0)
Gui.FormImportMaintenance.chkMetric.FontName("Tahoma")
Gui.FormImportMaintenance.chkMetric.FontSize(8.25)
Gui.FormImportMaintenance.chkMultipleBinIssue.Create(CheckBox)
Gui.FormImportMaintenance.chkMultipleBinIssue.Size(2745,300)
Gui.FormImportMaintenance.chkMultipleBinIssue.Position(75,2040)
Gui.FormImportMaintenance.chkMultipleBinIssue.Parent("frameMatOptions")
Gui.FormImportMaintenance.chkMultipleBinIssue.Caption("Allow Issuing from Multiple Bins")
Gui.FormImportMaintenance.chkMultipleBinIssue.Enabled(True)
Gui.FormImportMaintenance.chkMultipleBinIssue.Visible(True)
Gui.FormImportMaintenance.chkMultipleBinIssue.Zorder(0)
Gui.FormImportMaintenance.chkMultipleBinIssue.FontName("Tahoma")
Gui.FormImportMaintenance.chkMultipleBinIssue.FontSize(8.25)
Gui.FormImportMaintenance.chkAllowZeroMaterial.Create(CheckBox)
Gui.FormImportMaintenance.chkAllowZeroMaterial.Size(2940,300)
Gui.FormImportMaintenance.chkAllowZeroMaterial.Position(75,3945)
Gui.FormImportMaintenance.chkAllowZeroMaterial.Parent("frameMatOptions")
Gui.FormImportMaintenance.chkAllowZeroMaterial.Caption("Allow Zero Material Usage Parts")
Gui.FormImportMaintenance.chkAllowZeroMaterial.Enabled(True)
Gui.FormImportMaintenance.chkAllowZeroMaterial.Visible(True)
Gui.FormImportMaintenance.chkAllowZeroMaterial.Zorder(0)
Gui.FormImportMaintenance.chkAllowZeroMaterial.FontName("Tahoma")
Gui.FormImportMaintenance.chkAllowZeroMaterial.FontSize(8.25)
Gui.FormImportMaintenance.ddlIssueDecimals.Create(DropDownList)
Gui.FormImportMaintenance.ddlIssueDecimals.Size(870,330)
Gui.FormImportMaintenance.ddlIssueDecimals.Position(1980,3000)
Gui.FormImportMaintenance.ddlIssueDecimals.Parent("frameMatOptions")
Gui.FormImportMaintenance.ddlIssueDecimals.Enabled(True)
Gui.FormImportMaintenance.ddlIssueDecimals.Visible(True)
Gui.FormImportMaintenance.ddlIssueDecimals.Zorder(0)
Gui.FormImportMaintenance.ddlIssueDecimals.FontName("Tahoma")
Gui.FormImportMaintenance.ddlIssueDecimals.FontSize(8.25)
Gui.FormImportMaintenance.ddlWO.Create(DropDownList)
Gui.FormImportMaintenance.ddlWO.Size(1875,330)
Gui.FormImportMaintenance.ddlWO.Position(1710,645)
Gui.FormImportMaintenance.ddlWO.Parent("frameImpStd")
Gui.FormImportMaintenance.ddlWO.TabStop(True)
Gui.FormImportMaintenance.ddlWO.TabIndex(6)
Gui.FormImportMaintenance.ddlWO.Enabled(True)
Gui.FormImportMaintenance.ddlWO.Visible(True)
Gui.FormImportMaintenance.ddlWO.Zorder(0)
Gui.FormImportMaintenance.ddlWO.FontName("Tahoma")
Gui.FormImportMaintenance.ddlWO.FontSize(8.25)
Gui.FormImportMaintenance.lbl4.Create(Label,"Work Order",True,1050,255,0,135,750,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImportMaintenance.lbl4.Parent("frameImpStd")
Gui.FormImportMaintenance.lbl4.BorderStyle(0)
Gui.FormImportMaintenance.lbl5.Create(Label,"Good Piece ",True,1320,255,0,135,3645,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImportMaintenance.lbl5.Parent("frameImpStd")
Gui.FormImportMaintenance.lbl5.BorderStyle(0)
Gui.FormImportMaintenance.lbl6.Create(Label,"Area per Part",True,1185,255,0,135,2445,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImportMaintenance.lbl6.Parent("frameImpStd")
Gui.FormImportMaintenance.lbl6.BorderStyle(0)
Gui.FormImportMaintenance.ddlBadPc.Create(DropDownList)
Gui.FormImportMaintenance.ddlBadPc.Size(1875,330)
Gui.FormImportMaintenance.ddlBadPc.Position(1710,3975)
Gui.FormImportMaintenance.ddlBadPc.Parent("frameImpStd")
Gui.FormImportMaintenance.ddlBadPc.TabStop(True)
Gui.FormImportMaintenance.ddlBadPc.TabIndex(14)
Gui.FormImportMaintenance.ddlBadPc.Enabled(True)
Gui.FormImportMaintenance.ddlBadPc.Visible(True)
Gui.FormImportMaintenance.ddlBadPc.Zorder(0)
Gui.FormImportMaintenance.ddlBadPc.FontName("Tahoma")
Gui.FormImportMaintenance.ddlBadPc.FontSize(8.25)
Gui.FormImportMaintenance.ddlEmployee.Create(DropDownList)
Gui.FormImportMaintenance.ddlEmployee.Size(1875,330)
Gui.FormImportMaintenance.ddlEmployee.Position(1710,6450)
Gui.FormImportMaintenance.ddlEmployee.Parent("frameImpStd")
Gui.FormImportMaintenance.ddlEmployee.TabStop(True)
Gui.FormImportMaintenance.ddlEmployee.TabIndex(15)
Gui.FormImportMaintenance.ddlEmployee.Enabled(True)
Gui.FormImportMaintenance.ddlEmployee.Visible(True)
Gui.FormImportMaintenance.ddlEmployee.Zorder(0)
Gui.FormImportMaintenance.ddlEmployee.FontName("Tahoma")
Gui.FormImportMaintenance.ddlEmployee.FontSize(8.25)
Gui.FormImportMaintenance.chkBackFlushLab.Create(CheckBox)
Gui.FormImportMaintenance.chkBackFlushLab.Size(1695,300)
Gui.FormImportMaintenance.chkBackFlushLab.Position(3990,4980)
Gui.FormImportMaintenance.chkBackFlushLab.Parent("frameImpStd")
Gui.FormImportMaintenance.chkBackFlushLab.Caption("Back Flush Labor")
Gui.FormImportMaintenance.chkBackFlushLab.Event(Click,chkBackFlushLab_Click)
Gui.FormImportMaintenance.chkBackFlushLab.TabStop(True)
Gui.FormImportMaintenance.chkBackFlushLab.TabIndex(24)
Gui.FormImportMaintenance.chkBackFlushLab.Enabled(True)
Gui.FormImportMaintenance.chkBackFlushLab.Visible(True)
Gui.FormImportMaintenance.chkBackFlushLab.Zorder(0)
Gui.FormImportMaintenance.chkBackFlushLab.FontName("Tahoma")
Gui.FormImportMaintenance.chkBackFlushLab.FontSize(8.25)
Gui.FormImportMaintenance.chkFlexSchedule.Create(CheckBox)
Gui.FormImportMaintenance.chkFlexSchedule.Size(3600,300)
Gui.FormImportMaintenance.chkFlexSchedule.Position(6450,5010)
Gui.FormImportMaintenance.chkFlexSchedule.Parent("frameImpStd")
Gui.FormImportMaintenance.chkFlexSchedule.Caption("Create Flex Schedule for Labor Sequences")
Gui.FormImportMaintenance.chkFlexSchedule.Event(Click,chkFlexSchedule_Click)
Gui.FormImportMaintenance.chkFlexSchedule.Enabled(True)
Gui.FormImportMaintenance.chkFlexSchedule.Visible(True)
Gui.FormImportMaintenance.chkFlexSchedule.Zorder(0)
Gui.FormImportMaintenance.chkFlexSchedule.FontName("Tahoma")
Gui.FormImportMaintenance.chkFlexSchedule.FontSize(8.25)
Gui.FormImportMaintenance.chkReleaseWOs.Create(CheckBox)
Gui.FormImportMaintenance.chkReleaseWOs.Size(3045,300)
Gui.FormImportMaintenance.chkReleaseWOs.Position(135,8160)
Gui.FormImportMaintenance.chkReleaseWOs.Parent("frameImpStd")
Gui.FormImportMaintenance.chkReleaseWOs.TabStop(True)
Gui.FormImportMaintenance.chkReleaseWOs.TabIndex(27)
Gui.FormImportMaintenance.chkReleaseWOs.Caption("Release WOs on Flex Schedules")
Gui.FormImportMaintenance.chkReleaseWOs.Enabled(True)
Gui.FormImportMaintenance.chkReleaseWOs.Visible(True)
Gui.FormImportMaintenance.chkReleaseWOs.Zorder(0)
Gui.FormImportMaintenance.chkReleaseWOs.FontName("Tahoma")
Gui.FormImportMaintenance.chkReleaseWOs.FontSize(8.25)
Gui.FormImportMaintenance.lbl3.Create(Label,"Nest ID",True,1245,255,0,135,330,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImportMaintenance.lbl3.Parent("frameImpStd")
Gui.FormImportMaintenance.lbl3.BorderStyle(0)
Gui.FormImportMaintenance.ddlSheetArea.Create(DropDownList)
Gui.FormImportMaintenance.ddlSheetArea.Size(1875,330)
Gui.FormImportMaintenance.ddlSheetArea.Position(1710,4845)
Gui.FormImportMaintenance.ddlSheetArea.Parent("frameImpStd")
Gui.FormImportMaintenance.ddlSheetArea.TabStop(True)
Gui.FormImportMaintenance.ddlSheetArea.TabIndex(15)
Gui.FormImportMaintenance.ddlSheetArea.Enabled(True)
Gui.FormImportMaintenance.ddlSheetArea.Visible(True)
Gui.FormImportMaintenance.ddlSheetArea.Zorder(0)
Gui.FormImportMaintenance.ddlSheetArea.FontName("Tahoma")
Gui.FormImportMaintenance.ddlSheetArea.FontSize(8.25)
Gui.FormImportMaintenance.chkGroupNestsByFile.Create(CheckBox)
Gui.FormImportMaintenance.chkGroupNestsByFile.Size(3045,300)
Gui.FormImportMaintenance.chkGroupNestsByFile.Position(135,7860)
Gui.FormImportMaintenance.chkGroupNestsByFile.Parent("frameImpStd")
Gui.FormImportMaintenance.chkGroupNestsByFile.TabStop(True)
Gui.FormImportMaintenance.chkGroupNestsByFile.TabIndex(27)
Gui.FormImportMaintenance.chkGroupNestsByFile.Caption("Group Nests By File if Possible")
Gui.FormImportMaintenance.chkGroupNestsByFile.Enabled(True)
Gui.FormImportMaintenance.chkGroupNestsByFile.Visible(True)
Gui.FormImportMaintenance.chkGroupNestsByFile.Zorder(0)
Gui.FormImportMaintenance.chkGroupNestsByFile.FontName("Tahoma")
Gui.FormImportMaintenance.chkGroupNestsByFile.FontSize(8.25)
Gui.FormImportMaintenance.frameBoostOpt.Create(Frame)
Gui.FormImportMaintenance.frameBoostOpt.Visible(False)
Gui.FormImportMaintenance.frameBoostOpt.Size(2370,510)
Gui.FormImportMaintenance.frameBoostOpt.Position(150,8790)
Gui.FormImportMaintenance.frameBoostOpt.Parent("frameImpStd")
Gui.FormImportMaintenance.frameBoostOpt.Caption("Boost Options")
Gui.FormImportMaintenance.frameBoostOpt.Enabled(True)
Gui.FormImportMaintenance.frameBoostOpt.Zorder(0)
Gui.FormImportMaintenance.frameBoostOpt.FontName("Tahoma")
Gui.FormImportMaintenance.frameBoostOpt.FontSize(8.25)
Gui.FormImportMaintenance.optBOnline.Create(Option)
Gui.FormImportMaintenance.optBOnline.Size(1050,255)
Gui.FormImportMaintenance.optBOnline.Position(120,195)
Gui.FormImportMaintenance.optBOnline.Parent("frameBoostOpt")
Gui.FormImportMaintenance.optBOnline.TabStop(True)
Gui.FormImportMaintenance.optBOnline.TabIndex(17)
Gui.FormImportMaintenance.optBOnline.Caption("Online ")
Gui.FormImportMaintenance.optBOnline.Event(Click,optBOnline_Click)
Gui.FormImportMaintenance.optBOnline.Enabled(True)
Gui.FormImportMaintenance.optBOnline.Visible(True)
Gui.FormImportMaintenance.optBOnline.Zorder(0)
Gui.FormImportMaintenance.optBOnline.FontName("Tahoma")
Gui.FormImportMaintenance.optBOnline.FontSize(8.25)
Gui.FormImportMaintenance.optBOffline.Create(Option)
Gui.FormImportMaintenance.optBOffline.Size(1050,255)
Gui.FormImportMaintenance.optBOffline.Position(1215,195)
Gui.FormImportMaintenance.optBOffline.Parent("frameBoostOpt")
Gui.FormImportMaintenance.optBOffline.TabStop(True)
Gui.FormImportMaintenance.optBOffline.TabIndex(17)
Gui.FormImportMaintenance.optBOffline.Caption("Offline")
Gui.FormImportMaintenance.optBOffline.Event(Click,optBOffline_Click)
Gui.FormImportMaintenance.optBOffline.Enabled(True)
Gui.FormImportMaintenance.optBOffline.Visible(True)
Gui.FormImportMaintenance.optBOffline.Zorder(0)
Gui.FormImportMaintenance.optBOffline.FontName("Tahoma")
Gui.FormImportMaintenance.optBOffline.FontSize(8.25)
Gui.FormImportMaintenance.ddlLocation.Create(DropDownList)
Gui.FormImportMaintenance.ddlLocation.Size(1875,330)
Gui.FormImportMaintenance.ddlLocation.Position(1710,1500)
Gui.FormImportMaintenance.ddlLocation.Parent("frameImpStd")
Gui.FormImportMaintenance.ddlLocation.TabStop(True)
Gui.FormImportMaintenance.ddlLocation.TabIndex(8)
Gui.FormImportMaintenance.ddlLocation.Enabled(True)
Gui.FormImportMaintenance.ddlLocation.Visible(True)
Gui.FormImportMaintenance.ddlLocation.Zorder(0)
Gui.FormImportMaintenance.ddlLocation.FontName("Tahoma")
Gui.FormImportMaintenance.ddlLocation.FontSize(8.25)
Gui.FormImportMaintenance.lblJobArea.Create(Label,"Total Job Area",True,1350,255,0,135,5715,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImportMaintenance.lblJobArea.Parent("frameImpStd")
Gui.FormImportMaintenance.lblJobArea.BorderStyle(0)
Gui.FormImportMaintenance.lbl21.Create(Label,"Location",True,1050,255,0,135,1590,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImportMaintenance.lbl21.Parent("frameImpStd")
Gui.FormImportMaintenance.lbl21.BorderStyle(0)
Gui.FormImportMaintenance.lbl15.Create(Label,"Sheet Weight",True,1185,255,0,135,2895,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImportMaintenance.lbl15.Parent("frameImpStd")
Gui.FormImportMaintenance.lbl15.BorderStyle(0)
Gui.FormImportMaintenance.lblEmployee.Create(Label,"Employee",True,1350,255,0,135,6540,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImportMaintenance.lblEmployee.Parent("frameImpStd")
Gui.FormImportMaintenance.lblEmployee.BorderStyle(0)
Gui.FormImportMaintenance.frameWCWG.Create(Frame)
Gui.FormImportMaintenance.frameWCWG.Size(3330,885)
Gui.FormImportMaintenance.frameWCWG.Position(3975,8460)
Gui.FormImportMaintenance.frameWCWG.Parent("frameImpStd")
Gui.FormImportMaintenance.frameWCWG.Caption("WC/WG")
Gui.FormImportMaintenance.frameWCWG.Enabled(False)
Gui.FormImportMaintenance.frameWCWG.Visible(True)
Gui.FormImportMaintenance.frameWCWG.Zorder(0)
Gui.FormImportMaintenance.frameWCWG.FontName("Tahoma")
Gui.FormImportMaintenance.frameWCWG.FontSize(8.25)
Gui.FormImportMaintenance.txtWCWG.Create(TextBox,"",True,2655,300,0,135,480,False,0,"Arial",8,-2147483643,1)
Gui.FormImportMaintenance.txtWCWG.Parent("frameWCWG")
Gui.FormImportMaintenance.txtWCWG.Locked(True)
Gui.FormImportMaintenance.txtWCWG.TabStop(True)
Gui.FormImportMaintenance.txtWCWG.TabIndex(30)
Gui.FormImportMaintenance.optWG.Create(Option)
Gui.FormImportMaintenance.optWG.Size(1620,255)
Gui.FormImportMaintenance.optWG.Position(1485,180)
Gui.FormImportMaintenance.optWG.Parent("frameWCWG")
Gui.FormImportMaintenance.optWG.Caption("By WG")
Gui.FormImportMaintenance.optWG.Event(Click,optWG_Click)
Gui.FormImportMaintenance.optWG.TabStop(True)
Gui.FormImportMaintenance.optWG.TabIndex(29)
Gui.FormImportMaintenance.optWG.Enabled(True)
Gui.FormImportMaintenance.optWG.Visible(True)
Gui.FormImportMaintenance.optWG.Zorder(0)
Gui.FormImportMaintenance.optWG.FontName("Tahoma")
Gui.FormImportMaintenance.optWG.FontSize(8.25)
Gui.FormImportMaintenance.optWC.Create(Option)
Gui.FormImportMaintenance.optWC.Size(1125,255)
Gui.FormImportMaintenance.optWC.Position(135,180)
Gui.FormImportMaintenance.optWC.Parent("frameWCWG")
Gui.FormImportMaintenance.optWC.Caption("By WC")
Gui.FormImportMaintenance.optWC.Event(Click,optWC_Click)
Gui.FormImportMaintenance.optWC.TabStop(True)
Gui.FormImportMaintenance.optWC.TabIndex(28)
Gui.FormImportMaintenance.optWC.Enabled(True)
Gui.FormImportMaintenance.optWC.Visible(True)
Gui.FormImportMaintenance.optWC.Zorder(0)
Gui.FormImportMaintenance.optWC.FontName("Tahoma")
Gui.FormImportMaintenance.optWC.FontSize(8.25)
Gui.FormImportMaintenance.cmdBrwWCWG.Create(Button)
Gui.FormImportMaintenance.cmdBrwWCWG.Size(390,375)
Gui.FormImportMaintenance.cmdBrwWCWG.Position(2850,450)
Gui.FormImportMaintenance.cmdBrwWCWG.Parent("frameWCWG")
Gui.FormImportMaintenance.cmdBrwWCWG.Caption("^")
Gui.FormImportMaintenance.cmdBrwWCWG.Event(Click,cmdBrwWCWG_Click)
Gui.FormImportMaintenance.cmdBrwWCWG.Enabled(False)
Gui.FormImportMaintenance.cmdBrwWCWG.TabStop(True)
Gui.FormImportMaintenance.cmdBrwWCWG.TabIndex(31)
Gui.FormImportMaintenance.cmdBrwWCWG.Visible(True)
Gui.FormImportMaintenance.cmdBrwWCWG.Zorder(0)
Gui.FormImportMaintenance.cmdBrwWCWG.FontName("Tahoma")
Gui.FormImportMaintenance.cmdBrwWCWG.FontSize(8.25)
Gui.FormImportMaintenance.ddlPartWeight.Create(DropDownList)
Gui.FormImportMaintenance.ddlPartWeight.Size(1875,330)
Gui.FormImportMaintenance.ddlPartWeight.Position(1710,6015)
Gui.FormImportMaintenance.ddlPartWeight.Parent("frameImpStd")
Gui.FormImportMaintenance.ddlPartWeight.TabStop(True)
Gui.FormImportMaintenance.ddlPartWeight.TabIndex(15)
Gui.FormImportMaintenance.ddlPartWeight.Enabled(True)
Gui.FormImportMaintenance.ddlPartWeight.Visible(True)
Gui.FormImportMaintenance.ddlPartWeight.Zorder(0)
Gui.FormImportMaintenance.ddlPartWeight.FontName("Tahoma")
Gui.FormImportMaintenance.ddlPartWeight.FontSize(8.25)
Gui.FormImportMaintenance.lbl8.Create(Label,"Raw Material",True,1050,255,0,135,1170,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImportMaintenance.lbl8.Parent("frameImpStd")
Gui.FormImportMaintenance.lbl8.BorderStyle(0)
Gui.FormImportMaintenance.chkSheetWeightNestSummary.Create(CheckBox)
Gui.FormImportMaintenance.chkSheetWeightNestSummary.Size(2190,300)
Gui.FormImportMaintenance.chkSheetWeightNestSummary.Position(1710,3135)
Gui.FormImportMaintenance.chkSheetWeightNestSummary.Parent("frameImpStd")
Gui.FormImportMaintenance.chkSheetWeightNestSummary.TabStop(True)
Gui.FormImportMaintenance.chkSheetWeightNestSummary.TabIndex(24)
Gui.FormImportMaintenance.chkSheetWeightNestSummary.Caption("Use Sum of Part Weight")
Gui.FormImportMaintenance.chkSheetWeightNestSummary.Event(Click,chkSheetWeightNestSummary_Click)
Gui.FormImportMaintenance.chkSheetWeightNestSummary.Enabled(True)
Gui.FormImportMaintenance.chkSheetWeightNestSummary.Visible(True)
Gui.FormImportMaintenance.chkSheetWeightNestSummary.Zorder(0)
Gui.FormImportMaintenance.chkSheetWeightNestSummary.FontName("Tahoma")
Gui.FormImportMaintenance.chkSheetWeightNestSummary.FontSize(8.25)
Gui.FormImportMaintenance.chkSheetAreaNestSummary.Create(CheckBox)
Gui.FormImportMaintenance.chkSheetAreaNestSummary.Size(2040,300)
Gui.FormImportMaintenance.chkSheetAreaNestSummary.Position(1710,5175)
Gui.FormImportMaintenance.chkSheetAreaNestSummary.Parent("frameImpStd")
Gui.FormImportMaintenance.chkSheetAreaNestSummary.TabStop(True)
Gui.FormImportMaintenance.chkSheetAreaNestSummary.TabIndex(24)
Gui.FormImportMaintenance.chkSheetAreaNestSummary.Caption("Use Sum of Part Area")
Gui.FormImportMaintenance.chkSheetAreaNestSummary.Event(Click,chkSheetAreaNestSummary_Click)
Gui.FormImportMaintenance.chkSheetAreaNestSummary.Enabled(True)
Gui.FormImportMaintenance.chkSheetAreaNestSummary.Visible(True)
Gui.FormImportMaintenance.chkSheetAreaNestSummary.Zorder(0)
Gui.FormImportMaintenance.chkSheetAreaNestSummary.FontName("Tahoma")
Gui.FormImportMaintenance.chkSheetAreaNestSummary.FontSize(8.25)
Gui.FormImportMaintenance.lblPartWeight.Create(Label,"Part Weight",True,1350,255,0,135,6150,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImportMaintenance.lblPartWeight.Parent("frameImpStd")
Gui.FormImportMaintenance.lblPartWeight.BorderStyle(0)
Gui.FormImportMaintenance.chkBysoftCumulativeImport.Create(CheckBox)
Gui.FormImportMaintenance.chkBysoftCumulativeImport.Size(3045,300)
Gui.FormImportMaintenance.chkBysoftCumulativeImport.Position(135,7560)
Gui.FormImportMaintenance.chkBysoftCumulativeImport.Parent("frameImpStd")
Gui.FormImportMaintenance.chkBysoftCumulativeImport.TabStop(True)
Gui.FormImportMaintenance.chkBysoftCumulativeImport.TabIndex(27)
Gui.FormImportMaintenance.chkBysoftCumulativeImport.Caption("Use Bysoft Cumulative Import")
Gui.FormImportMaintenance.chkBysoftCumulativeImport.Enabled(True)
Gui.FormImportMaintenance.chkBysoftCumulativeImport.Visible(True)
Gui.FormImportMaintenance.chkBysoftCumulativeImport.Zorder(0)
Gui.FormImportMaintenance.chkBysoftCumulativeImport.FontName("Tahoma")
Gui.FormImportMaintenance.chkBysoftCumulativeImport.FontSize(8.25)
Gui.FormImportMaintenance.chkAppend.Create(CheckBox)
Gui.FormImportMaintenance.chkAppend.Size(3045,300)
Gui.FormImportMaintenance.chkAppend.Position(135,7260)
Gui.FormImportMaintenance.chkAppend.Parent("frameImpStd")
Gui.FormImportMaintenance.chkAppend.TabStop(True)
Gui.FormImportMaintenance.chkAppend.TabIndex(27)
Gui.FormImportMaintenance.chkAppend.Caption("Append Nest Instead of Overwriting")
Gui.FormImportMaintenance.chkAppend.Enabled(True)
Gui.FormImportMaintenance.chkAppend.Visible(True)
Gui.FormImportMaintenance.chkAppend.Zorder(0)
Gui.FormImportMaintenance.chkAppend.FontName("Tahoma")
Gui.FormImportMaintenance.chkAppend.FontSize(8.25)
Gui.FormImportMaintenance.lblOr.Create(Label,"Or",True,195,210,0,5850,5100,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImportMaintenance.lblOr.Parent("frameImpStd")
Gui.FormImportMaintenance.lblOr.BorderStyle(0)
Gui.FormImportMaintenance.txtImpFieldList.Create(TextboxM)
Gui.FormImportMaintenance.txtImpFieldList.Size(6735,1260)
Gui.FormImportMaintenance.txtImpFieldList.Position(30,345)
Gui.FormImportMaintenance.txtImpFieldList.TabStop(True)
Gui.FormImportMaintenance.txtImpFieldList.TabIndex(1)
Gui.FormImportMaintenance.txtImpFieldList.Parent("tabImportSettings",0)
Gui.FormImportMaintenance.txtImpFieldList.Enabled(True)
Gui.FormImportMaintenance.txtImpFieldList.Visible(True)
Gui.FormImportMaintenance.txtImpFieldList.Zorder(0)
Gui.FormImportMaintenance.txtImpFieldList.FontName("Tahoma")
Gui.FormImportMaintenance.txtImpFieldList.FontSize(8.25)
Gui.FormImportMaintenance.lbl1.Create(Label,"Import File Header List",True,2130,255,0,30,135,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImportMaintenance.lbl1.FontStyle(True,False,False,False,False)
Gui.FormImportMaintenance.lbl1.Parent("tabImportSettings",0)
Gui.FormImportMaintenance.lbl1.BorderStyle(0)
Gui.FormImportMaintenance.cmdImpFieldList.Create(Button)
Gui.FormImportMaintenance.cmdImpFieldList.Size(6735,375)
Gui.FormImportMaintenance.cmdImpFieldList.Position(30,1650)
Gui.FormImportMaintenance.cmdImpFieldList.Caption("Import Field Header List")
Gui.FormImportMaintenance.cmdImpFieldList.Event(Click,cmdImpFieldList_Click)
Gui.FormImportMaintenance.cmdImpFieldList.TabStop(True)
Gui.FormImportMaintenance.cmdImpFieldList.TabIndex(2)
Gui.FormImportMaintenance.cmdImpFieldList.Parent("tabImportSettings",0)
Gui.FormImportMaintenance.cmdImpFieldList.Enabled(True)
Gui.FormImportMaintenance.cmdImpFieldList.Visible(True)
Gui.FormImportMaintenance.cmdImpFieldList.Zorder(0)
Gui.FormImportMaintenance.cmdImpFieldList.FontName("Tahoma")
Gui.FormImportMaintenance.cmdImpFieldList.FontSize(8.25)
Gui.FormImportMaintenance.txtImpPath.Create(TextBox,"",True,8700,300,0,7890,45,True,0,"Arial",8,-2147483643,1)
Gui.FormImportMaintenance.txtImpPath.TabStop(True)
Gui.FormImportMaintenance.txtImpPath.TabIndex(3)
Gui.FormImportMaintenance.txtImpPath.Parent("tabImportSettings",0)
Gui.FormImportMaintenance.txtImpPath.Event(LostFocus,txtImpPath_LostFocus)
Gui.FormImportMaintenance.lbl2.Create(Label,"Import Path",True,1020,255,0,6855,135,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImportMaintenance.lbl2.Parent("tabImportSettings",0)
Gui.FormImportMaintenance.lbl2.BorderStyle(0)
Gui.FormImportMaintenance.cmdImpBrw.Create(Button)
Gui.FormImportMaintenance.cmdImpBrw.Size(375,375)
Gui.FormImportMaintenance.cmdImpBrw.Position(16605,15)
Gui.FormImportMaintenance.cmdImpBrw.Caption("^")
Gui.FormImportMaintenance.cmdImpBrw.Event(Click,cmdImpBrw_Click)
Gui.FormImportMaintenance.cmdImpBrw.TabStop(True)
Gui.FormImportMaintenance.cmdImpBrw.TabIndex(4)
Gui.FormImportMaintenance.cmdImpBrw.Parent("tabImportSettings",0)
Gui.FormImportMaintenance.cmdImpBrw.Enabled(True)
Gui.FormImportMaintenance.cmdImpBrw.Visible(True)
Gui.FormImportMaintenance.cmdImpBrw.Zorder(0)
Gui.FormImportMaintenance.cmdImpBrw.FontName("Tahoma")
Gui.FormImportMaintenance.cmdImpBrw.FontSize(8.25)
Gui.FormImportMaintenance.GsGCImpFieldList.Create(GsGridControl)
Gui.FormImportMaintenance.GsGCImpFieldList.Size(6735,8760)
Gui.FormImportMaintenance.GsGCImpFieldList.Position(30,2070)
Gui.FormImportMaintenance.GsGCImpFieldList.Parent("tabImportSettings",0)
Gui.FormImportMaintenance.GsGCImpFieldList.Enabled(True)
Gui.FormImportMaintenance.GsGCImpFieldList.Visible(True)
Gui.FormImportMaintenance.GsGCImpFieldList.Zorder(0)
Gui.FormImportMaintenance.lblPartSeparationDefaultEmployee.Create(Label,"Default Employee:",True,1470,255,0,75,2475,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImportMaintenance.lblPartSeparationDefaultEmployee.Parent("tabImportSettings",2)
Gui.FormImportMaintenance.lblPartSeparationDefaultEmployee.BorderStyle(0)
Gui.FormImportMaintenance.lblPartSeparationCloseType.Create(Label,"Close Separation Sequence:",True,2610,255,0,75,1815,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImportMaintenance.lblPartSeparationCloseType.Parent("tabImportSettings",2)
Gui.FormImportMaintenance.lblPartSeparationCloseType.BorderStyle(0)
Gui.FormImportMaintenance.txtPartSeparationPath.Create(TextBox,"",True,8070,300,0,75,750,False,0,"Arial",8,-2147483643,1)
Gui.FormImportMaintenance.txtPartSeparationPath.Parent("tabImportSettings",2)
Gui.FormImportMaintenance.txtPartSeparationPath.Event(LostFocus,txtPartSeparationPath_LostFocus)
Gui.FormImportMaintenance.cmdPartSeparationPathBrowser.Create(Button)
Gui.FormImportMaintenance.cmdPartSeparationPathBrowser.Size(375,375)
Gui.FormImportMaintenance.cmdPartSeparationPathBrowser.Position(8175,705)
Gui.FormImportMaintenance.cmdPartSeparationPathBrowser.Parent("tabImportSettings",2)
Gui.FormImportMaintenance.cmdPartSeparationPathBrowser.Caption("^")
Gui.FormImportMaintenance.cmdPartSeparationPathBrowser.Event(Click,cmdPartSeparationPathBrowser_Click)
Gui.FormImportMaintenance.cmdPartSeparationPathBrowser.Enabled(False)
Gui.FormImportMaintenance.cmdPartSeparationPathBrowser.Visible(True)
Gui.FormImportMaintenance.cmdPartSeparationPathBrowser.Zorder(0)
Gui.FormImportMaintenance.cmdPartSeparationPathBrowser.FontName("Tahoma")
Gui.FormImportMaintenance.cmdPartSeparationPathBrowser.FontSize(8.25)
Gui.FormImportMaintenance.lblPartSeparationWorkcenters.Create(Label,"Part Separation Workcenters: ",True,2610,255,0,75,1170,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImportMaintenance.lblPartSeparationWorkcenters.Parent("tabImportSettings",2)
Gui.FormImportMaintenance.lblPartSeparationWorkcenters.BorderStyle(0)
Gui.FormImportMaintenance.txtPartSeparationWorkcenters.Create(TextBox,"",True,8070,300,0,75,1380,False,0,"Arial",8,-2147483643,1)
Gui.FormImportMaintenance.txtPartSeparationWorkcenters.Parent("tabImportSettings",2)
Gui.FormImportMaintenance.ddlPartSeparationCloseType.Create(DropDownList)
Gui.FormImportMaintenance.ddlPartSeparationCloseType.Enabled(False)
Gui.FormImportMaintenance.ddlPartSeparationCloseType.Size(5910,330)
Gui.FormImportMaintenance.ddlPartSeparationCloseType.Position(75,2025)
Gui.FormImportMaintenance.ddlPartSeparationCloseType.Parent("tabImportSettings",2)
Gui.FormImportMaintenance.ddlPartSeparationCloseType.Visible(True)
Gui.FormImportMaintenance.ddlPartSeparationCloseType.Zorder(0)
Gui.FormImportMaintenance.ddlPartSeparationCloseType.FontName("Tahoma")
Gui.FormImportMaintenance.ddlPartSeparationCloseType.FontSize(8.25)
Gui.FormImportMaintenance.txtPartSeparationDefaultEmployee.Create(TextBox,"",True,2130,300,0,75,2715,False,0,"Arial",8,-2147483643,1)
Gui.FormImportMaintenance.txtPartSeparationDefaultEmployee.Parent("tabImportSettings",2)
Gui.FormImportMaintenance.txtPartSeparationDefaultEmployee.MaxLength(15)
Gui.FormImportMaintenance.txtPartSeparationDefaultEmployee.Event(LostFocus,txtPartSeparationDefaultEmployee_LostFocus)
Gui.FormImportMaintenance.txtPartSeparationDefaultEmployeeName.Create(TextBox,"",True,5895,300,0,2250,2715,False,0,"Arial",8,-2147483643,1)
Gui.FormImportMaintenance.txtPartSeparationDefaultEmployeeName.Parent("tabImportSettings",2)
Gui.FormImportMaintenance.cmdPartSeparationEmployeeBrowser.Create(Button)
Gui.FormImportMaintenance.cmdPartSeparationEmployeeBrowser.Enabled(False)
Gui.FormImportMaintenance.cmdPartSeparationEmployeeBrowser.Size(375,375)
Gui.FormImportMaintenance.cmdPartSeparationEmployeeBrowser.Position(8175,2670)
Gui.FormImportMaintenance.cmdPartSeparationEmployeeBrowser.Parent("tabImportSettings",2)
Gui.FormImportMaintenance.cmdPartSeparationEmployeeBrowser.Caption("^")
Gui.FormImportMaintenance.cmdPartSeparationEmployeeBrowser.Event(Click,cmdPartSeparationEmployeeBrowser_Click)
Gui.FormImportMaintenance.cmdPartSeparationEmployeeBrowser.Visible(True)
Gui.FormImportMaintenance.cmdPartSeparationEmployeeBrowser.Zorder(0)
Gui.FormImportMaintenance.cmdPartSeparationEmployeeBrowser.FontName("Tahoma")
Gui.FormImportMaintenance.cmdPartSeparationEmployeeBrowser.FontSize(8.25)
Gui.FormImportMaintenance.chkUseProdOperationExp.Create(CheckBox)
Gui.FormImportMaintenance.chkUseProdOperationExp.Size(2385,300)
Gui.FormImportMaintenance.chkUseProdOperationExp.Position(75,3105)
Gui.FormImportMaintenance.chkUseProdOperationExp.Parent("tabImportSettings",2)
Gui.FormImportMaintenance.chkUseProdOperationExp.Caption("Use ProdOperationExp File")
Gui.FormImportMaintenance.chkUseProdOperationExp.Event(Click,chkUseProdOperationExp_Click)
Gui.FormImportMaintenance.chkUseProdOperationExp.Enabled(True)
Gui.FormImportMaintenance.chkUseProdOperationExp.Visible(True)
Gui.FormImportMaintenance.chkUseProdOperationExp.Zorder(0)
Gui.FormImportMaintenance.chkUseProdOperationExp.FontName("Tahoma")
Gui.FormImportMaintenance.chkUseProdOperationExp.FontSize(8.25)
Gui.FormImportMaintenance.cmdPartSeparationWCBrowser.Create(Button)
Gui.FormImportMaintenance.cmdPartSeparationWCBrowser.Enabled(False)
Gui.FormImportMaintenance.cmdPartSeparationWCBrowser.Size(375,375)
Gui.FormImportMaintenance.cmdPartSeparationWCBrowser.Position(8175,1365)
Gui.FormImportMaintenance.cmdPartSeparationWCBrowser.Parent("tabImportSettings",2)
Gui.FormImportMaintenance.cmdPartSeparationWCBrowser.Caption("^")
Gui.FormImportMaintenance.cmdPartSeparationWCBrowser.Event(Click,cmdPartSeparationWCBrowser_Click)
Gui.FormImportMaintenance.cmdPartSeparationWCBrowser.Visible(True)
Gui.FormImportMaintenance.cmdPartSeparationWCBrowser.Zorder(0)
Gui.FormImportMaintenance.cmdPartSeparationWCBrowser.FontName("Tahoma")
Gui.FormImportMaintenance.cmdPartSeparationWCBrowser.FontSize(8.25)
Gui.FormImportMaintenance.chkUsePdaExp.Create(CheckBox)
Gui.FormImportMaintenance.chkUsePdaExp.Size(1590,300)
Gui.FormImportMaintenance.chkUsePdaExp.Position(2850,3105)
Gui.FormImportMaintenance.chkUsePdaExp.Parent("tabImportSettings",2)
Gui.FormImportMaintenance.chkUsePdaExp.Caption("Use PdaExp File")
Gui.FormImportMaintenance.chkUsePdaExp.Event(Click,chkUsePdaExp_Click)
Gui.FormImportMaintenance.chkUsePdaExp.Enabled(True)
Gui.FormImportMaintenance.chkUsePdaExp.Visible(True)
Gui.FormImportMaintenance.chkUsePdaExp.Zorder(0)
Gui.FormImportMaintenance.chkUsePdaExp.FontName("Tahoma")
Gui.FormImportMaintenance.chkUsePdaExp.FontSize(8.25)
Gui.FormImportMaintenance.frameRemnant.Create(Frame)
Gui.FormImportMaintenance.frameRemnant.Size(10140,10260)
Gui.FormImportMaintenance.frameRemnant.Position(6795,375)
Gui.FormImportMaintenance.frameRemnant.Caption("Remnant Map Options")
Gui.FormImportMaintenance.frameRemnant.Parent("tabImportSettings",1)
Gui.FormImportMaintenance.frameRemnant.Enabled(True)
Gui.FormImportMaintenance.frameRemnant.Visible(True)
Gui.FormImportMaintenance.frameRemnant.Zorder(0)
Gui.FormImportMaintenance.frameRemnant.FontName("Tahoma")
Gui.FormImportMaintenance.frameRemnant.FontSize(8.25)
Gui.FormImportMaintenance.lbl17.Create(Label,"Raw Material",False,1185,255,0,135,9285,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImportMaintenance.lbl17.Parent("frameRemnant")
Gui.FormImportMaintenance.lbl17.BorderStyle(0)
Gui.FormImportMaintenance.ddlRemRawMat.Create(DropDownList)
Gui.FormImportMaintenance.ddlRemRawMat.Size(1875,330)
Gui.FormImportMaintenance.ddlRemRawMat.Position(1590,9180)
Gui.FormImportMaintenance.ddlRemRawMat.Parent("frameRemnant")
Gui.FormImportMaintenance.ddlRemRawMat.TabStop(True)
Gui.FormImportMaintenance.ddlRemRawMat.TabIndex(40)
Gui.FormImportMaintenance.ddlRemRawMat.Visible(False)
Gui.FormImportMaintenance.ddlRemRawMat.Enabled(True)
Gui.FormImportMaintenance.ddlRemRawMat.Zorder(0)
Gui.FormImportMaintenance.ddlRemRawMat.FontName("Tahoma")
Gui.FormImportMaintenance.ddlRemRawMat.FontSize(8.25)
Gui.FormImportMaintenance.lbl16.Create(Label,"Nest ID",True,1185,255,0,135,780,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImportMaintenance.lbl16.Parent("frameRemnant")
Gui.FormImportMaintenance.lbl16.BorderStyle(0)
Gui.FormImportMaintenance.ddlRemNestID.Create(DropDownList)
Gui.FormImportMaintenance.ddlRemNestID.Size(1875,330)
Gui.FormImportMaintenance.ddlRemNestID.Position(1125,675)
Gui.FormImportMaintenance.ddlRemNestID.Parent("frameRemnant")
Gui.FormImportMaintenance.ddlRemNestID.TabStop(True)
Gui.FormImportMaintenance.ddlRemNestID.TabIndex(37)
Gui.FormImportMaintenance.ddlRemNestID.Enabled(True)
Gui.FormImportMaintenance.ddlRemNestID.Visible(True)
Gui.FormImportMaintenance.ddlRemNestID.Zorder(0)
Gui.FormImportMaintenance.ddlRemNestID.FontName("Tahoma")
Gui.FormImportMaintenance.ddlRemNestID.FontSize(8.25)
Gui.FormImportMaintenance.lbl13.Create(Label,"Remnant Bin",True,1080,255,0,3600,780,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImportMaintenance.lbl13.Parent("frameRemnant")
Gui.FormImportMaintenance.lbl13.BorderStyle(0)
Gui.FormImportMaintenance.ddlDropID.Create(DropDownList)
Gui.FormImportMaintenance.ddlDropID.Size(1875,330)
Gui.FormImportMaintenance.ddlDropID.Position(1125,2370)
Gui.FormImportMaintenance.ddlDropID.Parent("frameRemnant")
Gui.FormImportMaintenance.ddlDropID.TabStop(True)
Gui.FormImportMaintenance.ddlDropID.TabIndex(43)
Gui.FormImportMaintenance.ddlDropID.Enabled(True)
Gui.FormImportMaintenance.ddlDropID.Visible(True)
Gui.FormImportMaintenance.ddlDropID.Zorder(0)
Gui.FormImportMaintenance.ddlDropID.FontName("Tahoma")
Gui.FormImportMaintenance.ddlDropID.FontSize(8.25)
Gui.FormImportMaintenance.chkUseSerialInsteadOfDropSize.Create(CheckBox)
Gui.FormImportMaintenance.chkUseSerialInsteadOfDropSize.Size(4515,300)
Gui.FormImportMaintenance.chkUseSerialInsteadOfDropSize.Position(135,2730)
Gui.FormImportMaintenance.chkUseSerialInsteadOfDropSize.Parent("frameRemnant")
Gui.FormImportMaintenance.chkUseSerialInsteadOfDropSize.Caption("Store Drop Size in Serial Field Instead of Drop Size Field")
Gui.FormImportMaintenance.chkUseSerialInsteadOfDropSize.Enabled(True)
Gui.FormImportMaintenance.chkUseSerialInsteadOfDropSize.Visible(True)
Gui.FormImportMaintenance.chkUseSerialInsteadOfDropSize.Zorder(0)
Gui.FormImportMaintenance.chkUseSerialInsteadOfDropSize.FontName("Tahoma")
Gui.FormImportMaintenance.chkUseSerialInsteadOfDropSize.FontSize(8.25)
Gui.FormImportMaintenance.lbl24.Create(Label,"Drop Suffix",True,1185,255,0,135,3180,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImportMaintenance.lbl24.Parent("frameRemnant")
Gui.FormImportMaintenance.lbl24.BorderStyle(0)
Gui.FormImportMaintenance.txtDropSuffix.Create(TextBox,"",True,480,300,0,1125,3090,True,0,"Arial",8,-2147483643,1)
Gui.FormImportMaintenance.txtDropSuffix.Parent("frameRemnant")
Gui.FormImportMaintenance.txtDropSuffix.TabStop(True)
Gui.FormImportMaintenance.txtDropSuffix.TabIndex(38)
Gui.FormImportMaintenance.txtDropSuffix.MaxLength(1)
Gui.FormImportMaintenance.txtRemPath.Create(TextBox,"",True,8550,300,0,1125,270,True,0,"Arial",8,-2147483643,1)
Gui.FormImportMaintenance.txtRemPath.Parent("frameRemnant")
Gui.FormImportMaintenance.txtRemPath.TabStop(True)
Gui.FormImportMaintenance.txtRemPath.TabIndex(35)
Gui.FormImportMaintenance.txtRemPath.Event(LostFocus,txtRemPath_LostFocus)
Gui.FormImportMaintenance.lbl20.Create(Label,"Weight",True,1185,255,0,135,2040,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImportMaintenance.lbl20.Parent("frameRemnant")
Gui.FormImportMaintenance.lbl20.BorderStyle(0)
Gui.FormImportMaintenance.cmdBrwRemLotBin.Create(Button)
Gui.FormImportMaintenance.cmdBrwRemLotBin.Size(390,375)
Gui.FormImportMaintenance.cmdBrwRemLotBin.Position(9705,660)
Gui.FormImportMaintenance.cmdBrwRemLotBin.Parent("frameRemnant")
Gui.FormImportMaintenance.cmdBrwRemLotBin.Caption("^")
Gui.FormImportMaintenance.cmdBrwRemLotBin.Event(Click,cmdBrwRemLotBin_Click)
Gui.FormImportMaintenance.cmdBrwRemLotBin.TabStop(True)
Gui.FormImportMaintenance.cmdBrwRemLotBin.TabIndex(39)
Gui.FormImportMaintenance.cmdBrwRemLotBin.Enabled(True)
Gui.FormImportMaintenance.cmdBrwRemLotBin.Visible(True)
Gui.FormImportMaintenance.cmdBrwRemLotBin.Zorder(0)
Gui.FormImportMaintenance.cmdBrwRemLotBin.FontName("Tahoma")
Gui.FormImportMaintenance.cmdBrwRemLotBin.FontSize(8.25)
Gui.FormImportMaintenance.txtRemLotBin.Create(TextBox,"",True,4950,300,0,4725,690,True,0,"Arial",8,-2147483643,1)
Gui.FormImportMaintenance.txtRemLotBin.Parent("frameRemnant")
Gui.FormImportMaintenance.txtRemLotBin.Locked(True)
Gui.FormImportMaintenance.txtRemLotBin.TabStop(True)
Gui.FormImportMaintenance.txtRemLotBin.TabIndex(38)
Gui.FormImportMaintenance.lbl22.Create(Label,"Imp Path",True,1185,255,0,135,360,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImportMaintenance.lbl22.Parent("frameRemnant")
Gui.FormImportMaintenance.lbl22.BorderStyle(0)
Gui.FormImportMaintenance.lblDropID.Create(Label,"Drop ID",True,1185,255,0,135,2460,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImportMaintenance.lblDropID.Parent("frameRemnant")
Gui.FormImportMaintenance.lblDropID.BorderStyle(0)
Gui.FormImportMaintenance.ddlRemLength.Create(DropDownList)
Gui.FormImportMaintenance.ddlRemLength.Size(1875,330)
Gui.FormImportMaintenance.ddlRemLength.Position(1125,1095)
Gui.FormImportMaintenance.ddlRemLength.Parent("frameRemnant")
Gui.FormImportMaintenance.ddlRemLength.TabStop(True)
Gui.FormImportMaintenance.ddlRemLength.TabIndex(41)
Gui.FormImportMaintenance.ddlRemLength.Enabled(True)
Gui.FormImportMaintenance.ddlRemLength.Visible(True)
Gui.FormImportMaintenance.ddlRemLength.Zorder(0)
Gui.FormImportMaintenance.ddlRemLength.FontName("Tahoma")
Gui.FormImportMaintenance.ddlRemLength.FontSize(8.25)
Gui.FormImportMaintenance.lbl18.Create(Label,"Length",True,1185,255,0,135,1200,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImportMaintenance.lbl18.Parent("frameRemnant")
Gui.FormImportMaintenance.lbl18.BorderStyle(0)
Gui.FormImportMaintenance.ddlRemBreadth.Create(DropDownList)
Gui.FormImportMaintenance.ddlRemBreadth.Size(1875,330)
Gui.FormImportMaintenance.ddlRemBreadth.Position(1125,1515)
Gui.FormImportMaintenance.ddlRemBreadth.Parent("frameRemnant")
Gui.FormImportMaintenance.ddlRemBreadth.TabStop(True)
Gui.FormImportMaintenance.ddlRemBreadth.TabIndex(42)
Gui.FormImportMaintenance.ddlRemBreadth.Enabled(True)
Gui.FormImportMaintenance.ddlRemBreadth.Visible(True)
Gui.FormImportMaintenance.ddlRemBreadth.Zorder(0)
Gui.FormImportMaintenance.ddlRemBreadth.FontName("Tahoma")
Gui.FormImportMaintenance.ddlRemBreadth.FontSize(8.25)
Gui.FormImportMaintenance.lbl19.Create(Label,"Breadth",True,1185,255,0,135,1605,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImportMaintenance.lbl19.Parent("frameRemnant")
Gui.FormImportMaintenance.lbl19.BorderStyle(0)
Gui.FormImportMaintenance.ddlRemWeight.Create(DropDownList)
Gui.FormImportMaintenance.ddlRemWeight.Size(1875,330)
Gui.FormImportMaintenance.ddlRemWeight.Position(1125,1935)
Gui.FormImportMaintenance.ddlRemWeight.Parent("frameRemnant")
Gui.FormImportMaintenance.ddlRemWeight.TabStop(True)
Gui.FormImportMaintenance.ddlRemWeight.TabIndex(43)
Gui.FormImportMaintenance.ddlRemWeight.Enabled(True)
Gui.FormImportMaintenance.ddlRemWeight.Visible(True)
Gui.FormImportMaintenance.ddlRemWeight.Zorder(0)
Gui.FormImportMaintenance.ddlRemWeight.FontName("Tahoma")
Gui.FormImportMaintenance.ddlRemWeight.FontSize(8.25)
Gui.FormImportMaintenance.cmdRemBrw.Create(Button)
Gui.FormImportMaintenance.cmdRemBrw.Size(375,375)
Gui.FormImportMaintenance.cmdRemBrw.Position(9705,240)
Gui.FormImportMaintenance.cmdRemBrw.Parent("frameRemnant")
Gui.FormImportMaintenance.cmdRemBrw.Caption("^")
Gui.FormImportMaintenance.cmdRemBrw.Event(Click,cmdRemBrw_Click)
Gui.FormImportMaintenance.cmdRemBrw.TabStop(True)
Gui.FormImportMaintenance.cmdRemBrw.TabIndex(36)
Gui.FormImportMaintenance.cmdRemBrw.Enabled(True)
Gui.FormImportMaintenance.cmdRemBrw.Visible(True)
Gui.FormImportMaintenance.cmdRemBrw.Zorder(0)
Gui.FormImportMaintenance.cmdRemBrw.FontName("Tahoma")
Gui.FormImportMaintenance.cmdRemBrw.FontSize(8.25)
Gui.FormImportMaintenance.txtImpRemList.Create(TextboxM)
Gui.FormImportMaintenance.txtImpRemList.Size(6735,1260)
Gui.FormImportMaintenance.txtImpRemList.Position(0,465)
Gui.FormImportMaintenance.txtImpRemList.TabStop(True)
Gui.FormImportMaintenance.txtImpRemList.TabIndex(33)
Gui.FormImportMaintenance.txtImpRemList.Parent("tabImportSettings",1)
Gui.FormImportMaintenance.txtImpRemList.Event(Change,txtImpRemList_Change)
Gui.FormImportMaintenance.txtImpRemList.Enabled(True)
Gui.FormImportMaintenance.txtImpRemList.Visible(True)
Gui.FormImportMaintenance.txtImpRemList.Zorder(0)
Gui.FormImportMaintenance.txtImpRemList.FontName("Tahoma")
Gui.FormImportMaintenance.txtImpRemList.FontSize(8.25)
Gui.FormImportMaintenance.GsGCImpRemList.Create(GsGridControl)
Gui.FormImportMaintenance.GsGCImpRemList.Size(6735,8445)
Gui.FormImportMaintenance.GsGCImpRemList.Position(0,2175)
Gui.FormImportMaintenance.GsGCImpRemList.Parent("tabImportSettings",1)
Gui.FormImportMaintenance.GsGCImpRemList.Enabled(True)
Gui.FormImportMaintenance.GsGCImpRemList.Visible(True)
Gui.FormImportMaintenance.GsGCImpRemList.Zorder(0)
Gui.FormImportMaintenance.cmdImpRemList.Create(Button)
Gui.FormImportMaintenance.cmdImpRemList.Size(6735,375)
Gui.FormImportMaintenance.cmdImpRemList.Position(0,1740)
Gui.FormImportMaintenance.cmdImpRemList.Caption("Import Remnant Header List")
Gui.FormImportMaintenance.cmdImpRemList.Event(Click,cmdImpRemList_Click)
Gui.FormImportMaintenance.cmdImpRemList.TabStop(True)
Gui.FormImportMaintenance.cmdImpRemList.TabIndex(34)
Gui.FormImportMaintenance.cmdImpRemList.Parent("tabImportSettings",1)
Gui.FormImportMaintenance.cmdImpRemList.Enabled(True)
Gui.FormImportMaintenance.cmdImpRemList.Visible(True)
Gui.FormImportMaintenance.cmdImpRemList.Zorder(0)
Gui.FormImportMaintenance.cmdImpRemList.FontName("Tahoma")
Gui.FormImportMaintenance.cmdImpRemList.FontSize(8.25)
Gui.FormImportMaintenance.lbl14.Create(Label,"Import Remnant Header List",True,4020,255,0,0,135,True,0,"Arial",8,-2147483633,0,0)
Gui.FormImportMaintenance.lbl14.FontStyle(True,False,False,False,False)
Gui.FormImportMaintenance.lbl14.Parent("tabImportSettings",1)
Gui.FormImportMaintenance.lbl14.BorderStyle(0)
Gui.FormImportMaintenance.chkRemnant.Create(CheckBox)
Gui.FormImportMaintenance.chkRemnant.Size(2085,300)
Gui.FormImportMaintenance.chkRemnant.Position(6795,15)
Gui.FormImportMaintenance.chkRemnant.Caption("Import Remnants")
Gui.FormImportMaintenance.chkRemnant.Event(Click,chkRemnant_Click)
Gui.FormImportMaintenance.chkRemnant.TabStop(True)
Gui.FormImportMaintenance.chkRemnant.TabIndex(32)
Gui.FormImportMaintenance.chkRemnant.Parent("tabImportSettings",1)
Gui.FormImportMaintenance.chkRemnant.Enabled(True)
Gui.FormImportMaintenance.chkRemnant.Visible(True)
Gui.FormImportMaintenance.chkRemnant.Zorder(0)
Gui.FormImportMaintenance.chkRemnant.FontName("Tahoma")
Gui.FormImportMaintenance.chkRemnant.FontSize(8.25)
Gui.FormProfiles..Create(BaseForm)
Gui.FormProfiles..Caption("Profile Maintenance")
Gui.FormProfiles..Size(5775,4575)
Gui.FormProfiles..MinX(5775)
Gui.FormProfiles..MinY(4575)
Gui.FormProfiles..Position(0,0)
Gui.FormProfiles..BackColor(-2147483633)
Gui.FormProfiles..MousePointer(0)
Gui.FormProfiles..Event(UnLoad,FormProfiles_UnLoad)
Gui.FormProfiles..AlwaysOnTop(False)
Gui.FormProfiles..FontName("Tahoma")
Gui.FormProfiles..FontSize(8.25)
Gui.FormProfiles..ControlBox(True)
Gui.FormProfiles..MaxButton(True)
Gui.FormProfiles..MinButton(True)
Gui.FormProfiles..Moveable(True)
Gui.FormProfiles..Sizeable(True)
Gui.FormProfiles..ShowInTaskBar(True)
Gui.FormProfiles..TitleBar(True)
Gui.FormProfiles.GsGCProfile.Create(GsGridControl)
Gui.FormProfiles.GsGCProfile.Size(5670,3645)
Gui.FormProfiles.GsGCProfile.Position(0,675)
Gui.FormProfiles.GsGCProfile.Event(RowCellClick,GsGCProfile_RowCellClick)
Gui.FormProfiles.GsGCProfile.Anchor(15)
Gui.FormProfiles.GsGCProfile.Enabled(True)
Gui.FormProfiles.GsGCProfile.Visible(True)
Gui.FormProfiles.GsGCProfile.Zorder(0)
Gui.FormProfiles.txtProfile.Create(TextBox,"",True,2265,300,0,1530,240,True,0,"Arial",8,-2147483643,1)
Gui.FormProfiles.txtProfile.MaxLength(10)
Gui.FormProfiles.txtProfile.Mask(">")
Gui.FormProfiles.txtProfile.Anchor(13)
Gui.FormProfiles.lbl1.Create(Label,"Profile Name",True,1410,255,0,90,315,True,0,"Arial",8,-2147483633,0,0)
Gui.FormProfiles.lbl1.BorderStyle(0)
Gui.FormProfiles.cmdSaveProfile.Create(Button)
Gui.FormProfiles.cmdSaveProfile.Size(1665,375)
Gui.FormProfiles.cmdSaveProfile.Position(3900,210)
Gui.FormProfiles.cmdSaveProfile.Caption("Save Profile")
Gui.FormProfiles.cmdSaveProfile.Event(Click,cmdSaveProfile_Click)
Gui.FormProfiles.cmdSaveProfile.Enabled(True)
Gui.FormProfiles.cmdSaveProfile.Visible(True)
Gui.FormProfiles.cmdSaveProfile.Zorder(0)
Gui.FormProfiles.cmdSaveProfile.FontName("Tahoma")
Gui.FormProfiles.cmdSaveProfile.FontSize(8.25)
Gui.FormProfiles.cmdSaveProfile.Anchor(9)
Gui.FormWCXref..Create(BaseForm)
Gui.FormWCXref..Caption("Work Center XREF")
Gui.FormWCXref..Size(5445,4860)
Gui.FormWCXref..MinX(5445)
Gui.FormWCXref..MinY(2000)
Gui.FormWCXref..Position(0,0)
Gui.FormWCXref..BackColor(-2147483633)
Gui.FormWCXref..MousePointer(0)
Gui.FormWCXref..Event(UnLoad,FormWCXref_UnLoad)
Gui.FormWCXref..AlwaysOnTop(False)
Gui.FormWCXref..FontName("Tahoma")
Gui.FormWCXref..FontSize(8.25)
Gui.FormWCXref..ControlBox(True)
Gui.FormWCXref..MaxButton(True)
Gui.FormWCXref..MinButton(True)
Gui.FormWCXref..Moveable(True)
Gui.FormWCXref..Sizeable(True)
Gui.FormWCXref..ShowInTaskBar(True)
Gui.FormWCXref..TitleBar(True)
Gui.FormWCXref.gsgcWCXref.Create(GsGridControl)
Gui.FormWCXref.gsgcWCXref.Size(5385,4005)
Gui.FormWCXref.gsgcWCXref.Position(0,615)
Gui.FormWCXref.gsgcWCXref.Event(CellValueChanged,gsgcWCXref_CellValueChanged)
Gui.FormWCXref.gsgcWCXref.Anchor(15)
Gui.FormWCXref.gsgcWCXref.Event(RowCellClick,gsgcWCXref_RowCellClick)
Gui.FormWCXref.gsgcWCXref.Enabled(True)
Gui.FormWCXref.gsgcWCXref.Visible(True)
Gui.FormWCXref.gsgcWCXref.Zorder(0)
Gui.FormWCXref.lblGsWorkcenter.Create(Label,"GS Workcenter :",True,1350,255,0,60,45,True,0,"Arial",8,-2147483633,0,0)
Gui.FormWCXref.lblGsWorkcenter.BorderStyle(0)
Gui.FormWCXref.txtGSWorkCenter.Create(TextBox,"",True,1215,300,0,90,255,True,0,"Arial",8,-2147483643,1)
Gui.FormWCXref.txtGSWorkCenter.MaxLength(4)
Gui.FormWCXref.lblXREF.Create(Label,"XREF :",True,675,255,0,1770,45,True,0,"Arial",8,-2147483633,0,0)
Gui.FormWCXref.lblXREF.BorderStyle(0)
Gui.FormWCXref.txtXREF.Create(TextBox,"",True,2400,300,0,1770,255,True,0,"Arial",8,-2147483643,1)
Gui.FormWCXref.cmdAdd.Create(Button)
Gui.FormWCXref.cmdAdd.Size(855,375)
Gui.FormWCXref.cmdAdd.Position(4215,210)
Gui.FormWCXref.cmdAdd.Caption("Add")
Gui.FormWCXref.cmdAdd.Event(Click,cmdAdd_Click)
Gui.FormWCXref.cmdAdd.Enabled(True)
Gui.FormWCXref.cmdAdd.Visible(True)
Gui.FormWCXref.cmdAdd.Zorder(0)
Gui.FormWCXref.cmdAdd.FontName("Tahoma")
Gui.FormWCXref.cmdAdd.FontSize(8.25)
Gui.FormWCXref.cmdWorkcenterBrowser.Create(Button)
Gui.FormWCXref.cmdWorkcenterBrowser.Size(375,375)
Gui.FormWCXref.cmdWorkcenterBrowser.Position(1320,210)
Gui.FormWCXref.cmdWorkcenterBrowser.Caption("^")
Gui.FormWCXref.cmdWorkcenterBrowser.Event(Click,cmdWorkcenterBrowser_Click)
Gui.FormWCXref.cmdWorkcenterBrowser.Enabled(True)
Gui.FormWCXref.cmdWorkcenterBrowser.Visible(True)
Gui.FormWCXref.cmdWorkcenterBrowser.Zorder(0)
Gui.FormWCXref.cmdWorkcenterBrowser.FontName("Tahoma")
Gui.FormWCXref.cmdWorkcenterBrowser.FontSize(8.25)
Gui.FormExtraFields..Create(BaseForm)
Gui.FormExtraFields..Caption("Extra Import Fields")
Gui.FormExtraFields..Size(12945,8505)
Gui.FormExtraFields..MinX(0)
Gui.FormExtraFields..MinY(0)
Gui.FormExtraFields..Position(0,0)
Gui.FormExtraFields..AlwaysOnTop(True)
Gui.FormExtraFields..BackColor(-2147483633)
Gui.FormExtraFields..MinButton(False)
Gui.FormExtraFields..MousePointer(0)
Gui.FormExtraFields..Event(UnLoad,FormExtraFields_UnLoad)
Gui.FormExtraFields..FontName("Tahoma")
Gui.FormExtraFields..FontSize(8.25)
Gui.FormExtraFields..ControlBox(True)
Gui.FormExtraFields..MaxButton(True)
Gui.FormExtraFields..Moveable(True)
Gui.FormExtraFields..Sizeable(True)
Gui.FormExtraFields..ShowInTaskBar(True)
Gui.FormExtraFields..TitleBar(True)
Gui.FormExtraFields.gsgcExtraImportFields.Create(GsGridControl)
Gui.FormExtraFields.gsgcExtraImportFields.Size(12945,6810)
Gui.FormExtraFields.gsgcExtraImportFields.Position(0,1530)
Gui.FormExtraFields.gsgcExtraImportFields.Anchor(15)
Gui.FormExtraFields.gsgcExtraImportFields.Event(RowCellClick,gsgcExtraImportFields_RowCellClick)
Gui.FormExtraFields.gsgcExtraImportFields.Event(CellValueChanged,gsgcExtraImportFields_CellValueChanged)
Gui.FormExtraFields.gsgcExtraImportFields.Enabled(True)
Gui.FormExtraFields.gsgcExtraImportFields.Visible(True)
Gui.FormExtraFields.gsgcExtraImportFields.Zorder(0)
Gui.FormExtraFields.lblInfoStatic.Create(Label,"Static fields will always use the value entered below.",True,4455,255,0,30,90,True,0,"Arial",8,-2147483633,0,0)
Gui.FormExtraFields.lblInfoStatic.BorderStyle(0)
Gui.FormExtraFields.lblInfoExpression.Create(Label,"Expression fields are evaluated expressions based off of other fields. Enter field names in square brackets. Valid expressions include normal math, conversion, IIF, and string operations.",True,10080,420,0,30,330,True,0,"Arial",8,-2147483633,0,0)
Gui.FormExtraFields.lblInfoExpression.BorderStyle(0)
Gui.FormExtraFields.ddlType.Create(DropDownList)
Gui.FormExtraFields.ddlType.Size(1530,330)
Gui.FormExtraFields.ddlType.Position(600,765)
Gui.FormExtraFields.ddlType.TabStop(True)
Gui.FormExtraFields.ddlType.TabIndex(1)
Gui.FormExtraFields.ddlType.Enabled(True)
Gui.FormExtraFields.ddlType.Visible(True)
Gui.FormExtraFields.ddlType.Zorder(0)
Gui.FormExtraFields.ddlType.FontName("Tahoma")
Gui.FormExtraFields.ddlType.FontSize(8.25)
Gui.FormExtraFields.lblType.Create(Label,"Type",True,540,255,0,45,870,True,0,"Arial",8,-2147483633,0,0)
Gui.FormExtraFields.lblType.BorderStyle(0)
Gui.FormExtraFields.txtValue.Create(TextBox,"",True,11205,300,0,600,1140,True,0,"Arial",8,-2147483643,1)
Gui.FormExtraFields.txtValue.MaxLength(300)
Gui.FormExtraFields.txtValue.TabStop(True)
Gui.FormExtraFields.txtValue.TabIndex(3)
Gui.FormExtraFields.cmdAddExtraField.Create(Button)
Gui.FormExtraFields.cmdAddExtraField.Size(825,375)
Gui.FormExtraFields.cmdAddExtraField.Position(11850,1110)
Gui.FormExtraFields.cmdAddExtraField.Caption("Add")
Gui.FormExtraFields.cmdAddExtraField.Event(Click,cmdAddExtraField_Click)
Gui.FormExtraFields.cmdAddExtraField.TabStop(True)
Gui.FormExtraFields.cmdAddExtraField.TabIndex(4)
Gui.FormExtraFields.cmdAddExtraField.Enabled(True)
Gui.FormExtraFields.cmdAddExtraField.Visible(True)
Gui.FormExtraFields.cmdAddExtraField.Zorder(0)
Gui.FormExtraFields.cmdAddExtraField.FontName("Tahoma")
Gui.FormExtraFields.cmdAddExtraField.FontSize(8.25)
Gui.FormExtraFields.lblValue.Create(Label,"Value",True,555,255,0,45,1230,True,0,"Arial",8,-2147483633,0,0)
Gui.FormExtraFields.lblValue.BorderStyle(0)
Gui.FormExtraFields.txtExpressionType.Create(TextBox,"",True,1515,300,0,11145,45,False,2,"Arial",8,-2147483643,1)
Gui.FormExtraFields.txtDescription.Create(TextBox,"",True,8700,300,0,3105,780,True,0,"Arial",8,-2147483643,1)
Gui.FormExtraFields.txtDescription.MaxLength(100)
Gui.FormExtraFields.txtDescription.TabStop(True)
Gui.FormExtraFields.txtDescription.TabIndex(2)
Gui.FormExtraFields.lblDescription.Create(Label,"Description",True,1035,255,0,2175,870,True,0,"Arial",8,-2147483633,0,0)
Gui.FormExtraFields.lblDescription.BorderStyle(0)
Program.Sub.ScreenSU.End

Program.Sub.Preflight.Start
Program.External.Include.Library("GCG_4980_SharedFunctions.lib")

V.Global.sXPtype.Declare
V.Global.sProfile.Declare
V.Global.bNoProfile.Declare
V.Global.sFilter.Declare
V.Global.bCustomXP.Declare
V.Global.bNonInV.Declare
V.Global.bWC.Declare
V.Global.bWG.Declare
V.Global.bError.Declare(Boolean, False)
V.Global.bExpressionTypeImport.Declare(Boolean, False)

V.Global.iGreen.Declare(Long, 9498256)
V.Global.iRed.Declare(Long, 8421616)
Program.Sub.Preflight.End

Program.Sub.Main.Start
'GCG_4980_NEST_XPMAINT.g2u
'Ashwin D, Trey S, Alejandro A
'This script is the maintenance program for the standard nesting interface

F.Intrinsic.Control.Try

F.Intrinsic.UI.SetBrowserHotTypeAhead(True)

F.Intrinsic.Control.CallSub(Connection, "Connect", True)

F.Intrinsic.Control.CallSub(SetIcon)
F.Intrinsic.Control.CallSub(CreateDict)
F.Intrinsic.Control.CallSub(LoadPartSeparationCloseTypeDropDown)
F.Intrinsic.Control.CallSub(LoadAutomatedImportDropDown)
F.Intrinsic.Control.CallSub(LoadScriptButtonDropDown)
F.Intrinsic.Control.CallSub(LoadSequenceCloseDictionary)
F.Intrinsic.Control.CallSub(LoadLaborSequenceDropDown)
F.Intrinsic.Control.CallSub(LoadMaterialSequenceDropDown)
F.Intrinsic.Control.CallSub(LoadImportDecimalDropDown)
F.Intrinsic.Control.CallSub(LoadExtraFieldsScreen)
F.Intrinsic.Control.CallSub(LoadExtraFieldsGrid)
F.Intrinsic.Control.CallSub(LoadLegend)
f.Intrinsic.Control.CallSub(LoadProfile)
F.Intrinsic.Control.CallSub(LoadMaintenanceScreen)
f.Intrinsic.Control.CallSub(LoadWCXREF)
F.Intrinsic.Control.CallSub(LoadContextMenu)
F.Intrinsic.Control.CallSub(FixExtraFieldsLabel)

'this is for updating from older versions
F.Intrinsic.Control.CallSub(MoveExtraFieldsOverToSettingsTable)

'some cleanup from older versions
F.Intrinsic.Control.CallSub(CleanUpProfiles)

'add user buttons
GUI.FormExportMaintenance..BarAddButton("ProfileMaintenance", "Profile Maintenance")
GUI.FormExportMaintenance..BarAddButton("ImportMaintenance", "Import Maintenance")
GUI.FormExportMaintenance..BarAddButton("ExportProfile", "Export Profile To File")
GUI.FormExportMaintenance..BarAddButton("ImportProfile", "Import Profile From File")

GUI.FormExportMaintenance..Show

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.Main.End

Program.Sub.LoadSequenceCloseDictionary.Start
F.Intrinsic.Control.Try

F.Data.Dictionary.Create("dictCloseTypes")
F.Data.Dictionary.SetDefaultReturn("dictCloseTypes", "")
F.Data.Dictionary.AddItem("dictCloseTypes", "ALWAYS", "Always Close")
F.Data.Dictionary.AddItem("dictCloseTypes", "NEVER", "Never Close")
F.Data.Dictionary.AddItem("dictCloseTypes", "ESTIMATED_QUANTITY", "Close When Estimated Quantity Is Met")
F.Data.Dictionary.AddItem("dictCloseTypes", "RUN_QUANTITY", "Close When Run Quantity Is Met")
F.Data.Dictionary.AddItem("dictCloseTypes", "CUSTOMER_QUANTITY", "Close When Customer Quantity Is Met")
F.Data.Dictionary.AddItem("dictCloseTypes", "LABOR_CLOSED", "Close When Labor Sequence Is Closed")
F.Data.Dictionary.AddItem("dictCloseTypes", "MATERIAL_CLOSED", "Close When Material Sequence Is Closed")
F.Data.Dictionary.AddItem("dictCloseTypes", "MANUAL", "Manually Close")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.LoadSequenceCloseDictionary.End

Program.Sub.LoadContextMenu.Start
F.Intrinsic.Control.Try

GUI.FormExportMaintenance..ContextMenuCreate("ctxLegend")
GUI.FormExportMaintenance..ContextMenuAddItem("ctxLegend", "Export", 0, "Export")
GUI.FormExportMaintenance..ContextMenuSetItemEventHandler("ctxLegend", "Export", "ctx_Export_Click")
GUI.FormExportMaintenance.gsgcLegend.ContextMenuAttach("ctxLegend")

GUI.FormExportMaintenance..ContextMenuCreate("ctxFieldMap")
GUI.FormExportMaintenance..ContextMenuAddItem("ctxFieldMap", "Export", 0, "Export")
GUI.FormExportMaintenance..ContextMenuSetItemEventHandler("ctxFieldMap", "Export", "ctx_Export_Click")
GUI.FormExportMaintenance.GsGCFieldMap.ContextMenuAttach("ctxFieldMap")

GUI.FormExtraFields..ContextMenuCreate("ctxExtraFields")
GUI.FormExtraFields..ContextMenuAddItem("ctxExtraFields", "Export", 0, "Export")
GUI.FormExtraFields..ContextMenuSetItemEventHandler("ctxExtraFields", "Export", "ctx_Export_Click")
GUI.FormExtraFields.gsgcExtraImportFields.ContextMenuAttach("ctxExtraFields")

GUI.FormProfiles..ContextMenuCreate("ctxProfiles")
GUI.FormProfiles..ContextMenuAddItem("ctxProfiles", "Export", 0, "Export")
GUI.FormProfiles..ContextMenuSetItemEventHandler("ctxProfiles", "Export", "ctx_Export_Click")
GUI.FormProfiles.GsGCProfile.ContextMenuAttach("ctxProfiles")

GUI.FormWCXref..ContextMenuCreate("ctxWCs")
GUI.FormWCXref..ContextMenuAddItem("ctxWCs", "Export", 0, "Export")
GUI.FormWCXref..ContextMenuSetItemEventHandler("ctxWCs", "Export", "ctx_Export_Click")
GUI.FormWCXref.gsgcWCXref.ContextMenuAttach("ctxWCs")

GUI.FormImportMaintenance..ContextMenuCreate("ctxImportFields")
GUI.FormImportMaintenance..ContextMenuAddItem("ctxImportFields", "Export", 0, "Export")
GUI.FormImportMaintenance..ContextMenuSetItemEventHandler("ctxImportFields", "Export", "ctx_Export_Click")
GUI.FormImportMaintenance.GsGCImpFieldList.ContextMenuAttach("ctxImportFields")

GUI.FormImportMaintenance..ContextMenuCreate("ctxRemnantFields")
GUI.FormImportMaintenance..ContextMenuAddItem("ctxRemnantFields", "Export", 0, "Export")
GUI.FormImportMaintenance..ContextMenuSetItemEventHandler("ctxRemnantFields", "Export", "ctx_Export_Click")
GUI.FormImportMaintenance.GsGCImpRemList.ContextMenuAttach("ctxRemnantFields")

GUI.FormExportMaintenance..ContextMenuCreate("ctxExportPath")
GUI.FormExportMaintenance..ContextMenuAddItem("ctxExportPath", "Copy", V.Enum.MenuItemType!Button, "Copy Path")
GUI.FormExportMaintenance..ContextMenuSetItemEventHandler("ctxExportPath", "Copy", "ctx_Copy_Click")
GUI.FormExportMaintenance..ContextMenuAddItem("ctxExportPath", "Open", V.Enum.MenuItemType!Button, "Open Path")
GUI.FormExportMaintenance..ContextMenuSetItemEventHandler("ctxExportPath", "Open", "ctx_Open_Click")
GUI.FormExportMaintenance.txtXPPath.ContextMenuAttach("ctxExportPath")

GUI.FormImportMaintenance..ContextMenuCreate("ctxImportPath")
GUI.FormImportMaintenance..ContextMenuAddItem("ctxImportPath", "Copy", V.Enum.MenuItemType!Button, "Copy Path")
GUI.FormImportMaintenance..ContextMenuSetItemEventHandler("ctxImportPath", "Copy", "ctx_Copy_Click")
GUI.FormImportMaintenance..ContextMenuAddItem("ctxImportPath", "Open", V.Enum.MenuItemType!Button, "Open Path")
GUI.FormImportMaintenance..ContextMenuSetItemEventHandler("ctxImportPath", "Open", "ctx_Open_Click")
GUI.FormImportMaintenance.txtImpPath.ContextMenuAttach("ctxImportPath")

GUI.FormImportMaintenance..ContextMenuCreate("ctxRemnantPath")
GUI.FormImportMaintenance..ContextMenuAddItem("ctxRemnantPath", "Copy", V.Enum.MenuItemType!Button, "Copy Path")
GUI.FormImportMaintenance..ContextMenuSetItemEventHandler("ctxRemnantPath", "Copy", "ctx_Copy_Click")
GUI.FormImportMaintenance..ContextMenuAddItem("ctxRemnantPath", "Open", V.Enum.MenuItemType!Button, "Open Path")
GUI.FormImportMaintenance..ContextMenuSetItemEventHandler("ctxRemnantPath", "Open", "ctx_Open_Click")
GUI.FormImportMaintenance.txtRemPath.ContextMenuAttach("ctxRemnantPath")

GUI.FormImportMaintenance..ContextMenuCreate("ctxPartSeparationPath")
GUI.FormImportMaintenance..ContextMenuAddItem("ctxPartSeparationPath", "Copy", V.Enum.MenuItemType!Button, "Copy Path")
GUI.FormImportMaintenance..ContextMenuSetItemEventHandler("ctxPartSeparationPath", "Copy", "ctx_Copy_Click")
GUI.FormImportMaintenance..ContextMenuAddItem("ctxPartSeparationPath", "Open", V.Enum.MenuItemType!Button, "Open Path")
GUI.FormImportMaintenance..ContextMenuSetItemEventHandler("ctxPartSeparationPath", "Open", "ctx_Open_Click")
GUI.FormImportMaintenance.txtPartSeparationPath.ContextMenuAttach("ctxPartSeparationPath")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.LoadContextMenu.End

Program.Sub.ctx_Copy_Click.Start
F.Intrinsic.Control.Try

V.Local.sPath.Declare(String)
V.Local.sMenu.Declare(String)

F.Intrinsic.Control.SelectCase(V.Args.MenuName)
	F.Intrinsic.Control.Case("CTXEXPORTPATH")
		V.Local.sPath.Set(V.Screen.FormExportMaintenance!txtXPPath.Text.Trim)
		V.Local.sMenu.Set("FormExportMaintenance")
	F.Intrinsic.Control.Case("CTXIMPORTPATH")
		V.Local.sPath.Set(V.Screen.FormImportMaintenance!txtImpPath.Text.Trim)
		V.Local.sMenu.Set("FormImportMaintenance")
	F.Intrinsic.Control.Case("CTXREMNANTPATH")
		V.Local.sPath.Set(V.Screen.FormImportMaintenance!txtRemPath.Text.Trim)
		V.Local.sMenu.Set("FormImportMaintenance")
	F.Intrinsic.Control.Case("CTXPARTSEPARATIONPATH")
		V.Local.sPath.Set(V.Screen.FormImportMaintenance!txtPartSeparationPath.Text.Trim)
		V.Local.sMenu.Set("FormImportMaintenance")

F.Intrinsic.Control.EndSelect

F.Intrinsic.UI.SetClipboardText(V.Local.sPath)
GUI.[V.Local.sMenu]..ShowAlert(0, "Standard Nesting Interface Maintenance", "Path copied to clipboard")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.ctx_Copy_Click.End

Program.Sub.ctx_Open_Click.Start
F.Intrinsic.Control.Try

V.Local.sPath.Declare(String)

F.Intrinsic.Control.SelectCase(V.Args.MenuName)
	F.Intrinsic.Control.Case("CTXEXPORTPATH")
		V.Local.sPath.Set(V.Screen.FormExportMaintenance!txtXPPath.Text.Trim)
	F.Intrinsic.Control.Case("CTXIMPORTPATH")
		V.Local.sPath.Set(V.Screen.FormImportMaintenance!txtImpPath.Text.Trim)
	F.Intrinsic.Control.Case("CTXREMNANTPATH")
		V.Local.sPath.Set(V.Screen.FormImportMaintenance!txtRemPath.Text.Trim)
	F.Intrinsic.Control.Case("CTXPARTSEPARATIONPATH")
		V.Local.sPath.Set(V.Screen.FormImportMaintenance!txtPartSeparationPath.Text.Trim)

F.Intrinsic.Control.EndSelect

F.Intrinsic.Task.ShellExec(0, "", V.Local.sPath, "", "", 0)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.ctx_Open_Click.End

Program.Sub.LoadImportDecimalDropDown.Start
'option to set the number of decimals for issue amounts in import menu

F.Intrinsic.Control.Try

GUI.FormImportMaintenance.ddlIssueDecimals.AddItem("0")
GUI.FormImportMaintenance.ddlIssueDecimals.AddItem("1")
GUI.FormImportMaintenance.ddlIssueDecimals.AddItem("2")
GUI.FormImportMaintenance.ddlIssueDecimals.AddItem("3")
GUI.FormImportMaintenance.ddlIssueDecimals.AddItem("4")
GUI.FormImportMaintenance.ddlIssueDecimals.Text("4")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.LoadImportDecimalDropDown.End

Program.Sub.ctx_Export_Click.Start
F.Intrinsic.Control.Try

V.Local.sGridControl.Declare(String)
V.Local.sName.Declare(String)

F.Intrinsic.Control.SelectCase(V.Args.MenuName.UCase)
	F.Intrinsic.Control.Case("CTXLEGEND")
		V.Local.sGridControl.Set("gsgcLegend")
		V.Local.sName.Set("Legend")
		
	F.Intrinsic.Control.Case("CTXFIELDMAP")
		V.Local.sGridControl.Set("GsGCFieldMap")
		V.Local.sName.Set("ExportMapping")
		
	F.Intrinsic.Control.Case("CTXEXTRAFIELDS")
		V.Local.sGridControl.Set("gsgcExtraImportFields")
		V.Local.sName.Set("ExtraFields")
		
	F.Intrinsic.Control.Case("CTXPROFILES")
		V.Local.sGridControl.Set("GsGCProfile")
		V.Local.sName.Set("Profiles")
		
	F.Intrinsic.Control.Case("CTXWCS")
		V.Local.sGridControl.Set("gsgcWCXref")
		V.Local.sName.Set("WCXref")
		
	F.Intrinsic.Control.Case("CTXIMPORTFIELDS")
		V.Local.sGridControl.Set("GsGCImpFieldList")
		V.Local.sName.Set("ImportFields")
		
	F.Intrinsic.Control.Case("CTXREMNANTFIELDS")
		V.Local.sGridControl.Set("GsGCImpRemList")
		V.Local.sName.Set("RemnantFields")
		
F.Intrinsic.Control.EndSelect

F.Intrinsic.String.Build("GCG_4980_NEST_XPMAINT_{0}", V.Local.sName, V.Local.sName)

F.Intrinsic.Control.CallSub(Export, "Form", V.Args.Screen, "GridControl", V.Local.sGridControl, "FileName", V.Local.sName)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.ctx_Export_Click.End

Program.Sub.NoProfile.Start
F.Intrinsic.Control.Try

F.Intrinsic.Control.CallSub(ClearExportScreen)

GUI.FormExportMaintenance.txtXPPath.Enabled(false)
GUI.FormExportMaintenance.cmdXPPath.Enabled(false)
GUI.FormExportMaintenance.frameMapping.Enabled(false)
GUI.FormExportMaintenance.GsGCFieldMap.Enabled(false)
GUI.FormExportMaintenance.chkUnattendedExport.Enabled(false)
GUI.FormExportMaintenance.ddlXPType.Enabled(false)
GUI.FormExportMaintenance.chkHeaders.Enabled(False)
GUI.FormExportMaintenance.chkStaticFile.Enabled(False)
GUI.FormExportMaintenance.txtDateFormat.Enabled(False)
V.Global.bNoProfile.Set(True)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.NoProfile.End

Program.Sub.YesProfile.Start
F.Intrinsic.Control.Try

GUI.FormExportMaintenance.cmdXPPath.Enabled(True)
GUI.FormExportMaintenance.txtXPPath.Enabled(True)
GUI.FormExportMaintenance.frameMapping.Enabled(True)
GUI.FormExportMaintenance.GsGCFieldMap.Enabled(True)
GUI.FormExportMaintenance.chkUnattendedExport.Enabled(True)
GUI.FormExportMaintenance.ddlXPType.Enabled(True)
GUI.FormExportMaintenance.chkHeaders.Enabled(True)
GUI.FormExportMaintenance.chkStaticFile.Enabled(True)
GUI.FormExportMaintenance.txtDateFormat.Enabled(True)
V.Global.bNoProfile.Set(False)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.YesProfile.End

Program.Sub.FormatProfile.Start
F.Intrinsic.Control.Try

GUI.FormProfiles.GsGCProfile.AddGridviewFromDatatable("ProfileGrid","dtProfiles")
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "XPTYPE", "visible", False)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "EXPORT_FOLDER", "visible", False)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "IMPORT_FOLDER", "visible", False)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "CUSTOM_EXPORT", "visible", False)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "CUSTOM_IMPORT", "visible", False)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "XP_ON_GENWO", "visible", False)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "IMP_FMAP", "visible", False)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "IMP_REMNT", "visible", False)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "CREATE_FLEX_NEXT", "visible", False)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "BACK_FLUSH_MAT", "visible", False)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "BACK_FLUSH_LAB", "visible", False)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "DEFAULT_EMP", "visible", False)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "WORKCG", "visible", False)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "WCWG", "visible", False)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "WC", "visible", False)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "WG", "visible", False)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "ISSUE_FROM_INV", "visible", False)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "DEFAULT_BIN_INV", "visible", False)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "MANUAL_BIN", "visible", False)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "MANUAL_BIN_ENTRY", "visible", False)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "USE_INTERFACE", "visible", False)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "NEST_ID", "visible", False)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "WO_NUMBER", "visible", False)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "RAW_MAT", "visible", False)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "QTY", "visible", False)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "LABOR_WC", "visible", False)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "AREA_P_PART", "visible", False)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "DATE_PROCESSED", "visible", False)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "TIME_PER_PART", "visible", False)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "GOOD_PC", "visible", False)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "BAD_PC", "visible", False)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "REMNANT", "visible", False)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "REM_FOLDER", "visible", False)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "MAT_WEIGHT", "visible", False)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "MAT_LOCATION", "visible", False)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "ONLINE_IMP", "visible", False)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "OFFLINE_IMP", "visible", False)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "WC_XREF", "visible", False)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "FULL_PART_FLAG", "visible", False)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "FULL_PART_PATH", "visible", False)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "INDIRECT_ISSUE", "visible", False)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "ISSUE_WO", "visible", False)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "REM_NESTID", "visible", False)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "REM_FMAP", "visible", False)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "REM_RAWMAT", "visible", False)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "REM_LENGTH", "visible", False)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "REM_BREADTH", "visible", False)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "REM_WEIGHT", "visible", False)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "REM_BIN_ENTRY", "visible", False)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "BACKFLUSH_MISC_MAT", "visible", False)

GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "PROFILE", "headerforecolor", V.Color.PRI-GSS-00)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "PROFILE", "headerfontbold", True)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "PROFILE", "ReadOnly", True)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "PROFILE", "AllowEdit", False)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "PROFILE", "caption", "Profile Name")
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "PROFILE", "MinWidth",80)

GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "DEFAULT_PROFILE", "headerforecolor", V.Color.PRI-GSS-00)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "DEFAULT_PROFILE", "headerfontbold", True)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "DEFAULT_PROFILE", "ReadOnly", True)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "DEFAULT_PROFILE", "AllowEdit", False)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "DEFAULT_PROFILE", "caption", "Default Profile")
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "DEFAULT_PROFILE", "MinWidth",80)

GUI.FormProfiles.GsGCProfile.ColumnEdit("ProfileGrid","Delete","EditorButton","Delete")
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "Delete", "headerforecolor", V.Color.PRI-GSS-00)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "Delete", "headerfontbold", True)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "Delete", "ReadOnly", True)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "Delete", "AllowEdit", False)
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "Delete", "caption", "Delete")
GUI.FormProfiles.GsGCProfile.SetColumnProperty("ProfileGrid", "Delete", "MinWidth",80)

GUI.FormProfiles.GsGCProfile.MainView("ProfileGrid")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.FormatProfile.End

Program.Sub.LoadProfile.Start
F.Intrinsic.Control.Try

V.Local.sFilter.Declare

F.Intrinsic.Control.If(V.DataTable.dtProfiles.Exists)
	F.Data.DataTable.Close("dtProfiles")
F.Intrinsic.Control.EndIf

f.Data.DataTable.CreateFromSQL("dtProfiles","Con","select RTRIM(PROFILE) as PROFILE, DEFAULT_PROFILE, RTRIM(EXPORT_FOLDER) as EXPORT_FOLDER, RTRIM(IMPORT_FOLDER) as IMPORT_FOLDER, RTRIM(XPTYPE) as XPTYPE, CUSTOM_EXPORT, CUSTOM_IMPORT, XP_ON_GENWO, IMP_FMAP, IMP_REMNT, CREATE_FLEX_NEXT, BACK_FLUSH_MAT, BACK_FLUSH_LAB, RTRIM(DEFAULT_EMP) as DEFAULT_EMP, WCWG, WC, WG, ISSUE_FROM_INV, DEFAULT_BIN_INV, MANUAL_BIN, RTRIM(MANUAL_BIN_ENTRY) as MANUAL_BIN_ENTRY, RTRIM(NEST_ID) as NEST_ID, RTRIM(WO_NUMBER) as WO_NUMBER, RTRIM(RAW_MAT) as RAW_MAT, RTRIM(QTY) as QTY, RTRIM(AREA_P_PART) as AREA_P_PART, RTRIM(DATE_PROCESSED) as DATE_PROCESSED, RTRIM(TIME_PER_PART) as TIME_PER_PART, RTRIM(WORKCG) as WORKCG, RTRIM(LABOR_WC) as LABOR_WC, USE_INTERFACE, RTRIM(GOOD_PC) as GOOD_PC, RTRIM(BAD_PC) as BAD_PC, REMNANT, RTRIM(REM_FOLDER) as REM_FOLDER, REM_FMAP, RTRIM(REM_NESTID) as REM_NESTID, RTRIM(REM_RAWMAT) as REM_RAWMAT, RTRIM(REM_LENGTH) as REM_LENGTH, RTRIM(REM_BREADTH) as REM_BREADTH, RTRIM(REM_WEIGHT) as REM_WEIGHT, RTRIM(MAT_WEIGHT) as MAT_WEIGHT, RTRIM(REM_BIN_ENTRY) as REM_BIN_ENTRY, BACKFLUSH_MISC_MAT, RTRIM(MAT_LOCATION) as MAT_LOCATION, ONLINE_IMP, OFFLINE_IMP, WC_XREF, FULL_PART_FLAG, IF(FULL_PART_PATH = '0', '', RTRIM(FULL_PART_PATH)) as FULL_PART_PATH, INDIRECT_ISSUE, RTRIM(ISSUE_WO) as ISSUE_WO from GCG_4980_NESTPROFILE order by DEFAULT_PROFILE desc, PROFILE", True)

f.Data.DataTable.AddColumn("dtProfiles","DELETE","String")

f.Intrinsic.Control.CallSub(FormatProfile)

f.Intrinsic.Control.If(V.DataTable.dtProfiles.RowCount,=,0)
	f.Intrinsic.UI.Msgbox("You need to setup your profiles in the standard nesting maintenance menu.")
	f.Intrinsic.Control.CallSub(NoProfile)
f.Intrinsic.Control.Else
	GUI.FormExportMaintenance..Enabled(True)
	GUI.FormProfiles..visible(False)
	f.Intrinsic.Control.CallSub(YesProfile)
f.Intrinsic.Control.EndIf

f.Intrinsic.Control.BlockEvents
GUI.FormExportMaintenance.ddlProfile.AddItems("DataTable","dtProfiles","PROFILE","PROFILE")
f.Data.DataView.Create("dtProfiles","dvProfile",22,"DEFAULT_PROFILE = True","")

f.Intrinsic.Control.If(V.DataTable.dtProfiles.RowCount,>,0)
	
	f.Intrinsic.Control.If(V.DataView.dtProfiles!dvProfile.RowCount,>,0)
		GUI.FormExportMaintenance.ddlProfile.Text(V.DataView.dtProfiles!dvProfile(0).PROFILE!fieldVal)
		V.Global.sProfile.Set(V.DataView.dtProfiles!dvProfile(0).PROFILE!fieldVal)
	f.Intrinsic.Control.Else
		GUI.FormExportMaintenance.ddlProfile.Text("")
		V.Global.sProfile.Set("")
	f.Intrinsic.Control.EndIf
f.Intrinsic.Control.EndIf
f.Intrinsic.Control.UnBlockEvents

f.Intrinsic.string.Build("PROFILE = '{0}'",V.Global.sProfile,V.Local.sFilter) 
f.Data.DataView.Create("dtProfiles","CheckVw",22,V.Local.sFilter,"")
f.Intrinsic.Control.If(V.DataView.dtProfiles!CheckVw.RowCount,>,0)
	V.Global.sXPtype.Set(V.DataView.dtProfiles!CheckVw(0).XPTYPE!FieldValTrim)
f.Intrinsic.Control.EndIf

f.Data.DataView.Close("dtProfiles","CheckVw")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.LoadProfile.End

Program.Sub.CleanUpProfiles.Start
F.Intrinsic.Control.Try

F.ODBC.Connection!Con.Execute("delete from GCG_4980_SETTINGS where PROFILE not in (select PROFILE from GCG_4980_NESTPROFILE)")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.CleanUpProfiles.End

Program.Sub.ddlProfile_Click.Start
F.Intrinsic.Control.Try

V.Local.sSQL.Declare

f.Intrinsic.Control.If(V.Global.sProfile.Trim,=,V.Screen.FormExportMaintenance!ddlProfile.text.trim)
	f.Intrinsic.Control.ExitSub
f.Intrinsic.Control.EndIf

V.Global.sProfile.Set(V.Screen.FormExportMaintenance!ddlProfile.text)
f.Intrinsic.String.Build("Select distinct RTRIM(XPTYPE) XPTYPE from GCG_4980_NESTPROFILE where profile = '{0}'",V.Screen.FormExportMaintenance!ddlProfile.Text,V.Local.sSQL)
f.odbc.Connection!Con.executeandreturn(V.Local.sSQL,V.Global.sXPtype)

F.Intrinsic.Control.CallSub(LoadMaintenanceScreen)
f.Intrinsic.Control.CallSub(LoadWCXREF)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.ddlProfile_Click.End

Program.Sub.LoadWCXREF.Start
F.Intrinsic.Control.Try

V.Local.sFilter.Declare
V.Local.sSQL.Declare
V.Local.bBoost.Declare(Boolean, False)

f.Intrinsic.Control.If(V.DataTable.dtWCXref.Exists)
	f.Data.DataTable.Close("dtWCXref")
f.Intrinsic.Control.EndIf

F.Intrinsic.String.Build("select RTRIM(WC) WC, RTRIM(XREF) XREF, RTRIM(PROFILE) PROFILE, RTRIM(OSEON_OPERATION) OSEON_OPERATION from GCG_4980_WCXREF where PROFILE = '{0}'",V.Global.sProfile,V.Local.sSQL)
f.Data.DataTable.CreateFromSQL("dtWCXref","Con",V.Local.sSQL,true)
F.Data.DataTable.AddColumn("dtWCXref", "DELETE", "String", "")

GUI.FormWCXref.gsgcWCXref.AddGridviewFromDatatable("gvWCXref","dtWCXref")

GUI.FormWCXref.gsgcWCXref.SetColumnProperty("gvWCXref", "PROFILE", "Visible", False)

F.Intrinsic.Control.If(V.Global.sXPtype, =, "B")
	V.Local.bBoost.Set(True)
F.Intrinsic.Control.EndIf

GUI.FormWCXref.gsgcWCXref.SetColumnProperty("gvWCXref", "OSEON_OPERATION", "headerforecolor", V.Color.PRI-GSS-00)
GUI.FormWCXref.gsgcWCXref.SetColumnProperty("gvWCXref", "OSEON_OPERATION", "headerfontbold", True)
GUI.FormWCXref.gsgcWCXref.SetColumnProperty("gvWCXref", "OSEON_OPERATION", "ReadOnly", V.Local.bBoost.Not)
GUI.FormWCXref.gsgcWCXref.SetColumnProperty("gvWCXref", "OSEON_OPERATION", "AllowEdit", V.Local.bBoost)
GUI.FormWCXref.gsgcWCXref.SetColumnProperty("gvWCXref", "OSEON_OPERATION", "Visible", V.Local.bBoost)
GUI.FormWCXref.gsgcWCXref.SetColumnProperty("gvWCXref", "OSEON_OPERATION", "Caption", "Oseon Operation")
GUI.FormWCXref.gsgcWCXref.SetColumnProperty("gvWCXref", "OSEON_OPERATION", "MinWidth", 50)
GUI.FormWCXref.gsgcWCXref.SetColumnProperty("gvWCXref", "OSEON_OPERATION", "CellBackColor", "LightYellow")

GUI.FormWCXref.gsgcWCXref.SetColumnProperty("gvWCXref", "WC", "headerforecolor", V.Color.PRI-GSS-00)
GUI.FormWCXref.gsgcWCXref.SetColumnProperty("gvWCXref", "WC", "headerfontbold", True)
GUI.FormWCXref.gsgcWCXref.SetColumnProperty("gvWCXref", "WC", "ReadOnly", True)
GUI.FormWCXref.gsgcWCXref.SetColumnProperty("gvWCXref", "WC", "AllowEdit", False)
GUI.FormWCXref.gsgcWCXref.SetColumnProperty("gvWCXref", "WC", "caption", "Work Center")
GUI.FormWCXref.gsgcWCXref.SetColumnProperty("gvWCXref", "WC", "MinWidth",80)

GUI.FormWCXref.gsgcWCXref.SetColumnProperty("gvWCXref", "XREF", "headerforecolor", V.Color.PRI-GSS-00)
GUI.FormWCXref.gsgcWCXref.SetColumnProperty("gvWCXref", "XREF", "headerfontbold", True)
GUI.FormWCXref.gsgcWCXref.SetColumnProperty("gvWCXref", "XREF", "ReadOnly", False)
GUI.FormWCXref.gsgcWCXref.SetColumnProperty("gvWCXref", "XREF", "AllowEdit", True)
GUI.FormWCXref.gsgcWCXref.SetColumnProperty("gvWCXref", "XREF", "CellBackColor", "LightYellow")
GUI.FormWCXref.gsgcWCXref.SetColumnProperty("gvWCXref", "XREF", "caption", "XREF")
GUI.FormWCXref.gsgcWCXref.SetColumnProperty("gvWCXref", "XREF", "MinWidth",80)

GUI.FormWCXref.gsgcWCXref.SetColumnProperty("gvWCXref", "DELETE", "ShowCaption", False)
GUI.FormWCXref.gsgcWCXref.SetColumnProperty("gvWCXref", "DELETE", "ReadOnly", True)
GUI.FormWCXref.gsgcWCXref.SetColumnProperty("gvWCXref", "DELETE", "AllowEdit", False)
GUI.FormWCXref.gsgcWCXref.SetColumnProperty("gvWCXref", "DELETE", "MinWidth",80)
GUI.FormWCXref.gsgcWCXref.ColumnEdit("gvWCXref", "DELETE", "EditorButton", "Delete")

GUI.FormWCXref.gsgcWCXref.MainView("gvWCXref")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.LoadWCXREF.End

Program.Sub.CreateDict.Start
F.Intrinsic.Control.Try

f.Data.Dictionary.Create("XPTypeDict")
f.Data.Dictionary.AddItem("XPTypeDict","B","Trumpf Boost")
f.Data.Dictionary.AddItem("XPTypeDict","S","SigmaNest")
f.Data.Dictionary.AddItem("XPTypeDict","A","Dr. Abe")
f.Data.Dictionary.AddItem("XPTypeDict","P","ProNest")
f.Data.Dictionary.AddItem("XPTypeDict","O","OPS")
f.Data.Dictionary.AddItem("XPTypeDict","N","NCell")
f.Data.Dictionary.AddItem("XPTypeDict","E","PEP")
f.Data.Dictionary.AddItem("XPTypeDict","M","Metamation Enterprise")
f.Data.Dictionary.AddItem("XPTypeDict","Y","Bysoft")
f.Data.Dictionary.AddItem("XPTypeDict","R","Radan")
f.Data.Dictionary.AddItem("XPTypeDict","U","CutRite")
f.Data.Dictionary.AddItem("XPTypeDict","C","Custom")
f.Data.Dictionary.AddItem("XPTypeDict","","")
f.Data.dictionary.SetDefaultReturn("XPTypeDict","")

GUI.FormExportMaintenance.ddlXPType.AddItems("Dictionary", "XPTypeDict")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.CreateDict.End

Program.Sub.LoadImp.Start
F.Intrinsic.Control.Try

V.Local.ssql.Declare
V.Local.sGSSDDL.Declare
V.Local.bExists.Declare

f.Intrinsic.Control.If(V.DataTable.FImpDT.Exists)
	f.Data.DataTable.Close("FImpDT")
f.Intrinsic.Control.EndIf

f.Intrinsic.Control.SelectCase(V.Global.sXPtype.Trim)
	'XML Imports, Cutrite import
	f.Intrinsic.Control.CaseAny("B", "O", "Y")
		f.Data.DataTable.Create("FImpDT", True)
		f.Data.DataTable.AddColumn("FImpDT","PROFILE","STRING")
		f.Data.DataTable.AddColumn("FImpDT","IMPFIELD","STRING")
		f.Data.DataTable.AddColumn("FImpDT","INDX","LONG")
		GUI.FormImportMaintenance.txtImpFieldList.Text("")
		GUI.FormImportMaintenance.txtImpFieldList.Enabled(False)
		GUI.FormImportMaintenance.cmdImpFieldList.Enabled(False)

	f.Intrinsic.Control.CaseElse
		GUI.FormImportMaintenance.txtImpFieldList.Enabled(True)
		GUI.FormImportMaintenance.cmdImpFieldList.Enabled(True)

		f.Intrinsic.String.Build("select RTRIM(IMPFIELD) as IMPFIELD, INDX, RTRIM(PROFILE) as PROFILE from GCG_4980_IMPMAINT where profile = '{0}' order by INDX ASC",V.Global.sProfile,V.Local.sSql)
		f.Data.DataTable.CreateFromSQL("FImpDT","Con",V.Local.sSql,true)
		
		F.Intrinsic.Control.If(V.Global.sXPtype, =, "U")
			F.Intrinsic.Control.CallSub(LoadCutRiteImportFields)
		F.Intrinsic.Control.EndIf
		
		F.Intrinsic.String.Build("select RTRIM(SETTING) IMPFIELD, -1 INDX, PROFILE from GCG_4980_SETTINGS A where PROFILE = '{0}' and A.TYPE = 'IMPORT_FIELD'", V.Global.sProfile, V.Local.sSQL)
		F.Data.DataTable.CreateFromSQL("dtExtraFieldTemp", "Con", V.Local.sSQL)
		F.Data.DataTable.SetSeries("dtExtraFieldTemp", "INDX", V.DataTable.FImpDT.RowCount, 1)
		F.Data.DataTable.Merge("dtExtraFieldTemp", "FImpDT", False, 2)
		F.Data.DataTable.Close("dtExtraFieldTemp")
f.Intrinsic.Control.EndSelect

GUI.FormImportMaintenance.GsGCImpFieldList.AddGridviewFromDatatable("ImpListGrid","FImpDT")
GUI.FormImportMaintenance.GsGCImpFieldList.SetColumnProperty("ImpListGrid","PROFILE","visible",False)

GUI.FormImportMaintenance.GsGCImpFieldList.SetColumnProperty("ImpListGrid","IMPFIELD","headerforecolor", V.Color.PRI-GSS-00)
GUI.FormImportMaintenance.GsGCImpFieldList.SetColumnProperty("ImpListGrid","IMPFIELD","headerfontbold", true)
GUI.FormImportMaintenance.GsGCImpFieldList.SetColumnProperty("ImpListGrid","IMPFIELD","caption","Field Header")
GUI.FormImportMaintenance.GsGCImpFieldList.SetColumnProperty("ImpListGrid","IMPFIELD","readonly", True)
GUI.FormImportMaintenance.GsGCImpFieldList.SetColumnProperty("ImpListGrid","IMPFIELD","allowedit", False)
GUI.FormImportMaintenance.GsGCImpFieldList.SetColumnProperty("ImpListGrid","IMPFIELD","MinWidth", 150)

GUI.FormImportMaintenance.GsGCImpFieldList.SetColumnProperty("ImpListGrid","INDX","headerforecolor", V.Color.PRI-GSS-00)
GUI.FormImportMaintenance.GsGCImpFieldList.SetColumnProperty("ImpListGrid","INDX","headerfontbold", true)
GUI.FormImportMaintenance.GsGCImpFieldList.SetColumnProperty("ImpListGrid","INDX","caption","Index")
GUI.FormImportMaintenance.GsGCImpFieldList.SetColumnProperty("ImpListGrid","INDX","readonly", True)
GUI.FormImportMaintenance.GsGCImpFieldList.SetColumnProperty("ImpListGrid","INDX","allowedit", False)
GUI.FormImportMaintenance.GsGCImpFieldList.SetColumnProperty("ImpListGrid","INDX","MinWidth", 150)
GUI.FormImportMaintenance.GsGCImpFieldList.MainView("ImpListGrid")

f.Intrinsic.Control.BlockEvents

f.Data.Dictionary.Exists("NIDDICT",V.Local.bExists)
f.Intrinsic.Control.If(V.Local.bExists)
	f.Data.Dictionary.Close("NIDDICT")
f.Intrinsic.Control.EndIf
f.Data.Dictionary.CreateFromDatatable("NIDDICT","FImpDT","INDX","IMPFIELD")
GUI.FormImportMaintenance.ddlNestID.ClearItems
GUI.FormImportMaintenance.ddlNestID.AddItem("", 0)
GUI.FormImportMaintenance.ddlNestID.additems("Dictionary","NIDDICT")

f.Data.Dictionary.Exists("WODICT",V.Local.bExists)
f.Intrinsic.Control.If(V.Local.bExists)
	f.Data.Dictionary.Close("WODICT")
f.Intrinsic.Control.EndIf
f.Data.Dictionary.CreateFromDatatable("WODICT","FImpDT","INDX","IMPFIELD")
GUI.FormImportMaintenance.ddlWO.ClearItems
GUI.FormImportMaintenance.ddlWO.AddItem("", 0)
GUI.FormImportMaintenance.ddlWO.additems("Dictionary","WODICT")

f.Data.Dictionary.Exists("RMDDICT",V.Local.bExists)
f.Intrinsic.Control.If(V.Local.bExists)
	f.Data.Dictionary.Close("RMDDICT")
f.Intrinsic.Control.EndIf
f.Data.Dictionary.CreateFromDatatable("RMDDICT","FImpDT","INDX","IMPFIELD")
GUI.FormImportMaintenance.ddlRawMat.ClearItems
GUI.FormImportMaintenance.ddlRawMat.AddItem("", 0)
GUI.FormImportMaintenance.ddlRawMat.additems("Dictionary","RMDDICT")

f.Data.Dictionary.Exists("LOCDICT",V.Local.bExists)
f.Intrinsic.Control.If(V.Local.bExists)
	f.Data.Dictionary.Close("LOCDICT")
f.Intrinsic.Control.EndIf
f.Data.Dictionary.CreateFromDatatable("LOCDICT","FImpDT","INDX","IMPFIELD")
GUI.FormImportMaintenance.ddlLocation.ClearItems
GUI.FormImportMaintenance.ddlLocation.AddItem("", 0)
GUI.FormImportMaintenance.ddlLocation.additems("Dictionary","LOCDICT")

f.Data.Dictionary.Exists("APPDICT",V.Local.bExists)
f.Intrinsic.Control.If(V.Local.bExists)
	f.Data.Dictionary.Close("APPDICT")
f.Intrinsic.Control.EndIf
f.Data.Dictionary.CreateFromDatatable("APPDICT","FImpDT","INDX","IMPFIELD")
GUI.FormImportMaintenance.ddlAreaPerPart.ClearItems
GUI.FormImportMaintenance.ddlAreaPerPart.AddItem("", 0)
GUI.FormImportMaintenance.ddlAreaPerPart.additems("Dictionary","APPDICT")

f.Data.Dictionary.Exists("TPPDICT",V.Local.bExists)
f.Intrinsic.Control.If(V.Local.bExists)
	f.Data.Dictionary.Close("TPPDICT")
f.Intrinsic.Control.EndIf
f.Data.Dictionary.CreateFromDatatable("TPPDICT","FImpDT","INDX","IMPFIELD")
GUI.FormImportMaintenance.ddlTimePerPart.ClearItems
GUI.FormImportMaintenance.ddlTimePerPart.AddItem("", 0)
GUI.FormImportMaintenance.ddlTimePerPart.additems("Dictionary","TPPDICT")
f.Intrinsic.Control.UnBlockEvents

f.Data.Dictionary.Exists("LWCDICT",V.Local.bExists)
f.Intrinsic.Control.If(V.Local.bExists)
	f.Data.Dictionary.Close("LWCDICT")
f.Intrinsic.Control.EndIf
f.Data.Dictionary.CreateFromDatatable("LWCDICT","FImpDT","INDX","IMPFIELD")
GUI.FormImportMaintenance.ddlLaborWc.ClearItems
GUI.FormImportMaintenance.ddlLaborWc.AddItem("", 0)
GUI.FormImportMaintenance.ddlLaborWc.additems("Dictionary","LWCDICT")

f.Data.Dictionary.Exists("GPCDICT",V.Local.bExists)
f.Intrinsic.Control.If(V.Local.bExists)
	f.Data.Dictionary.Close("GPCDICT")
f.Intrinsic.Control.EndIf
f.Data.Dictionary.CreateFromDatatable("GPCDICT","FImpDT","INDX","IMPFIELD")
GUI.FormImportMaintenance.ddlGoodPc.ClearItems
GUI.FormImportMaintenance.ddlGoodPc.AddItem("", 0)
GUI.FormImportMaintenance.ddlGoodPc.additems("Dictionary","GPCDICT")

f.Data.Dictionary.Exists("WTDICT",V.Local.bExists)
f.Intrinsic.Control.If(V.Local.bExists)
	f.Data.Dictionary.Close("WTDICT")
f.Intrinsic.Control.EndIf
f.Data.Dictionary.CreateFromDatatable("WTDICT","FImpDT","INDX","IMPFIELD")
GUI.FormImportMaintenance.ddlWeight.ClearItems
GUI.FormImportMaintenance.ddlWeight.AddItem("", 0)
GUI.FormImportMaintenance.ddlWeight.additems("Dictionary","WTDICT")

f.Data.Dictionary.Exists("JADICT",V.Local.bExists)
f.Intrinsic.Control.If(V.Local.bExists)
	f.Data.Dictionary.Close("JADICT")
f.Intrinsic.Control.EndIf
f.Data.Dictionary.CreateFromDatatable("JADICT","FImpDT","INDX","IMPFIELD")
GUI.FormImportMaintenance.ddlJobArea.ClearItems
GUI.FormImportMaintenance.ddlJobArea.AddItem("", 0)
GUI.FormImportMaintenance.ddlJobArea.additems("Dictionary","JADICT")

f.Data.Dictionary.Exists("BPCDICT",V.Local.bExists)
f.Intrinsic.Control.If(V.Local.bExists)
	f.Data.Dictionary.Close("BPCDICT")
f.Intrinsic.Control.EndIf
f.Data.Dictionary.CreateFromDatatable("BPCDICT","FImpDT","INDX","IMPFIELD")
GUI.FormImportMaintenance.ddlBadPc.ClearItems
GUI.FormImportMaintenance.ddlBadPc.AddItem("", 0)
GUI.FormImportMaintenance.ddlBadPc.additems("Dictionary","BPCDICT")

f.Data.Dictionary.Exists("dictPartWeight",V.Local.bExists)
f.Intrinsic.Control.If(V.Local.bExists)
	f.Data.Dictionary.Close("dictPartWeight")
f.Intrinsic.Control.EndIf
f.Data.Dictionary.CreateFromDatatable("dictPartWeight","FImpDT","INDX","IMPFIELD")
GUI.FormImportMaintenance.ddlPartWeight.ClearItems
GUI.FormImportMaintenance.ddlPartWeight.additem("")
GUI.FormImportMaintenance.ddlPartWeight.additems("Dictionary","dictPartWeight")

GUI.FormImportMaintenance.ddlSheetArea.ClearItems
GUI.FormImportMaintenance.ddlEmployee.ClearItems
GUI.FormImportMaintenance.ddlSheetArea.AddItem("", 0)
GUI.FormImportMaintenance.ddlEmployee.AddItem("", 0)
GUI.FormImportMaintenance.ddlSheetArea.AddItems("DataTable", "FImpDT", "INDX", "IMPFIELD")
GUI.FormImportMaintenance.ddlEmployee.AddItems("DataTable", "FImpDT", "INDX", "IMPFIELD")

f.Intrinsic.Control.If(V.DataTable.fRemDT.Exists)
	f.Data.DataTable.Close("fRemDT")
f.Intrinsic.Control.EndIf

f.Intrinsic.Control.SelectCase(V.Global.sXPtype.Trim)
	f.Intrinsic.Control.CaseAny("B", "Y", "O")
		f.Data.DataTable.Create("fRemDT")
		f.Data.DataTable.AddColumn("fRemDT","PROFILE","STRING")
		f.Data.DataTable.AddColumn("fRemDT","IMPFIELD","STRING")
		f.Data.DataTable.AddColumn("fRemDT","INDX","LONG")
		GUI.FormImportMaintenance.txtImpRemList.Enabled(False)
		GUI.FormImportMaintenance.cmdImpRemList.Enabled(False)
		GUI.FormImportMaintenance.txtImpRemList.Text("")
	f.Intrinsic.Control.CaseElse
		GUI.FormImportMaintenance.txtImpRemList.Enabled(True)
		GUI.FormImportMaintenance.cmdImpRemList.Enabled(True)
		
		f.Intrinsic.String.Build("select RTRIM(IMPFIELD) as IMPFIELD, INDX, RTRIM(PROFILE) as PROFILE from GCG_4980_REMMAINT where profile = '{0}' order by INDX ASC",V.Global.sProfile,V.Local.sSql)
		f.Data.DataTable.CreateFromSQL("fRemDT","Con",V.Local.sSql,true)
		
f.Intrinsic.Control.EndSelect

GUI.FormImportMaintenance.GsGCImpRemList.AddGridviewFromDatatable("RemListGrid","fRemDT")
GUI.FormImportMaintenance.GsGCImpRemList.SetColumnProperty("RemListGrid","PROFILE","visible",False)

GUI.FormImportMaintenance.GsGCImpRemList.SetColumnProperty("RemListGrid","IMPFIELD","headerforecolor", V.Color.PRI-GSS-00)
GUI.FormImportMaintenance.GsGCImpRemList.SetColumnProperty("RemListGrid","IMPFIELD","headerfontbold", true)
GUI.FormImportMaintenance.GsGCImpRemList.SetColumnProperty("RemListGrid","IMPFIELD","caption","Field Header")
GUI.FormImportMaintenance.GsGCImpRemList.SetColumnProperty("RemListGrid","IMPFIELD","readonly", True)
GUI.FormImportMaintenance.GsGCImpRemList.SetColumnProperty("RemListGrid","IMPFIELD","allowedit", False)
GUI.FormImportMaintenance.GsGCImpRemList.SetColumnProperty("RemListGrid","IMPFIELD","MinWidth", 150)

GUI.FormImportMaintenance.GsGCImpRemList.SetColumnProperty("RemListGrid","INDX","headerforecolor", V.Color.PRI-GSS-00)
GUI.FormImportMaintenance.GsGCImpRemList.SetColumnProperty("RemListGrid","INDX","headerfontbold", true)
GUI.FormImportMaintenance.GsGCImpRemList.SetColumnProperty("RemListGrid","INDX","caption","Index")
GUI.FormImportMaintenance.GsGCImpRemList.SetColumnProperty("RemListGrid","INDX","readonly", True)
GUI.FormImportMaintenance.GsGCImpRemList.SetColumnProperty("RemListGrid","INDX","allowedit", False)
GUI.FormImportMaintenance.GsGCImpRemList.SetColumnProperty("RemListGrid","INDX","MinWidth", 150)
GUI.FormImportMaintenance.GsGCImpRemList.MainView("RemListGrid")

f.Intrinsic.Control.If(V.DataTable.fRemDT.RowCount,=,0)
	GUI.FormImportMaintenance.frameRemnant.Enabled(false)
f.Intrinsic.Control.Else
	GUI.FormImportMaintenance.frameRemnant.Enabled(True)
f.Intrinsic.Control.EndIf
f.Intrinsic.Control.BlockEvents

f.Data.Dictionary.Exists("RNIDDICT",V.Local.bExists)
f.Intrinsic.Control.If(V.Local.bExists)
	f.Data.Dictionary.Close("RNIDDICT")
f.Intrinsic.Control.EndIf
f.Data.Dictionary.CreateFromDatatable("RNIDDICT","FRemDT","INDX","IMPFIELD")
GUI.FormImportMaintenance.ddlRemNestID.ClearItems
GUI.FormImportMaintenance.ddlRemNestID.additems("Dictionary","RNIDDICT")

f.Data.Dictionary.Exists("RLDICT",V.Local.bExists)
f.Intrinsic.Control.If(V.Local.bExists)
	f.Data.Dictionary.Close("RLDICT")
f.Intrinsic.Control.EndIf
f.Data.Dictionary.CreateFromDatatable("RLDICT","FRemDT","INDX","IMPFIELD")
GUI.FormImportMaintenance.ddlRemLength.ClearItems
GUI.FormImportMaintenance.ddlRemLength.AddItem("", 0)
GUI.FormImportMaintenance.ddlRemLength.additems("Dictionary","RLDICT")

f.Data.Dictionary.Exists("RBDICT",V.Local.bExists)
f.Intrinsic.Control.If(V.Local.bExists)
	f.Data.Dictionary.Close("RBDICT")
f.Intrinsic.Control.EndIf
f.Data.Dictionary.CreateFromDatatable("RBDICT","FRemDT","INDX","IMPFIELD")
GUI.FormImportMaintenance.ddlRemBreadth.ClearItems
GUI.FormImportMaintenance.ddlRemBreadth.AddItem("", 0)
GUI.FormImportMaintenance.ddlRemBreadth.additems("Dictionary","RBDICT")

f.Data.Dictionary.Exists("RWDICT",V.Local.bExists)
f.Intrinsic.Control.If(V.Local.bExists)
	f.Data.Dictionary.Close("RWDICT")
f.Intrinsic.Control.EndIf
f.Data.Dictionary.CreateFromDatatable("RWDICT","FRemDT","INDX","IMPFIELD")
GUI.FormImportMaintenance.ddlRemWeight.ClearItems
GUI.FormImportMaintenance.ddlRemWeight.AddItem("", 0)
GUI.FormImportMaintenance.ddlRemWeight.additems("Dictionary","RWDICT")

GUI.FormImportMaintenance.ddlDropID.ClearItems
GUI.FormImportMaintenance.ddlDropID.AddItems("DataTable", "FRemDT", "INDX", "IMPFIELD")

f.Intrinsic.Control.UnBlockEvents

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.LoadImp.End

Program.Sub.LoadCutRiteImportFields.Start
F.Intrinsic.Control.Try

V.Local.sImportFile.Declare(String)
V.Local.bExists.Declare(Boolean, False)
V.Local.sContent.Declare(String)

F.Intrinsic.String.Build("{0}\GCG_4980_CutRiteImportFields.dat", V.Ambient.ScriptPath, V.Local.sImportFile)
F.Intrinsic.File.Exists(V.Local.sImportFile, V.Local.bExists)

F.Intrinsic.Control.If(V.Local.bExists)
	F.Intrinsic.File.File2String(V.Local.sImportFile, V.Local.sContent)
	
	F.Data.DataTable.CreateFromString("dtCutRiteFields", V.Local.sContent, "IMPFIELD", "String", "***NO-DELIMITER***", V.Ambient.NewLine)
	F.Intrinsic.Control.If(V.DataTable.dtCutRiteFields(V.DataTable.dtCutRiteFields.RowCount--).IMPFIELD!FieldValTrim, =, "")
		F.Data.DataTable.DeleteRow("dtCutRiteFields", V.DataTable.dtCutRiteFields.RowCount--)
	F.Intrinsic.Control.EndIf
	
	F.Data.DataTable.AddColumn("dtCutRiteFields", "INDX", "Long", -1)
	F.Data.DataTable.SetSeries("dtCutRiteFields", "INDX", 0, 1)
	F.Data.DataTable.AddColumn("dtCutRiteFields", "PROFILE", "String", V.Global.sProfile)
	
	F.Data.DataTable.Merge("dtCutRiteFields", "FImpDT", False, 2)
	F.Data.DataTable.Close("dtCutRiteFields")
	
F.Intrinsic.Control.Else
	F.Intrinsic.UI.Msgbox("Error: Missing Cut Rite import field file [GCG_4980_CutRiteImportFields.dat].")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.LoadCutRiteImportFields.End

Program.Sub.LoadMap.Start
F.Intrinsic.Control.Try

V.Local.sSql.Declare
V.Local.sRet.Declare
V.Local.sDD.Declare
V.Local.sXPKey.Declare
V.Local.bReEnable.Declare(Boolean, False)

f.Intrinsic.Control.BlockEvents

F.Intrinsic.Control.If(V.Screen.FormExportMaintenance.Enabled)
	GUI.FormExportMaintenance..Enabled(False)
	V.Local.bReEnable.Set(True)
F.Intrinsic.Control.EndIf

f.Intrinsic.Control.SelectCase(V.Args.XPTYPE.Trim)
	f.Intrinsic.Control.Case("B")
		GUI.FormExportMaintenance.chkFullPartPath.Enabled(True)
		
	f.Intrinsic.Control.Case("S")
		GUI.FormExportMaintenance.chkFullPartPath.Enabled(True)
		
	f.Intrinsic.Control.Case("O")
		GUI.FormExportMaintenance.chkFullPartPath.Enabled(True)
		
	f.Intrinsic.Control.Case("N")
		GUI.FormExportMaintenance.chkFullPartPath.Enabled(True)
		
	f.Intrinsic.Control.Case("P")
		GUI.FormExportMaintenance.chkFullPartPath.Enabled(True)
		
	f.Intrinsic.Control.Case("A")
		GUI.FormExportMaintenance.chkFullPartPath.Enabled(True)
		
	f.Intrinsic.Control.Case("C")
		GUI.FormExportMaintenance.chkFullPartPath.Enabled(True)
		
	f.Intrinsic.Control.Case("E")
		GUI.FormExportMaintenance.chkFullPartPath.Enabled(True)
		
	f.Intrinsic.Control.Case("M")
		GUI.FormExportMaintenance.chkFullPartPath.Enabled(True)
		
	F.Intrinsic.Control.Case("Y")
		GUI.FormExportMaintenance.chkFullPartPath.Enabled(False)
	
	F.Intrinsic.Control.Case("R")
		GUI.FormExportMaintenance.chkFullPartPath.Enabled(True)
	
	F.Intrinsic.Control.Case("U")
		'disable export menu
		GUI.FormExportMaintenance.chkFullPartPath.Enabled(False)
		
	f.Intrinsic.Control.CaseElse
		GUI.FormExportMaintenance.chkFullPartPath.Enabled(False)
		GUI.FormExportMaintenance.ddlXPType.Text("")
		
f.Intrinsic.Control.EndSelect
GUI.FormExportMaintenance.ddlXPType.Text(V.Dictionary.XPTypeDict![V.Args.XPTYPE.Trim])

'disable export if needed
F.Intrinsic.Control.If(V.Args.XPType, !=, "U")
	F.Intrinsic.Control.CallSub(EnableExport, "Enabled", True)
F.Intrinsic.Control.Else
	F.Intrinsic.Control.CallSub(EnableExport, "Enabled", False)
F.Intrinsic.Control.EndIf

f.Intrinsic.Control.UnBlockEvents
f.Intrinsic.Control.If(V.DataTable.dtMapping.Exists)
	f.Data.DataTable.Close("dtMapping")
f.Intrinsic.Control.EndIf

f.Intrinsic.Control.If(V.DataTable.dtMapping.Exists)
	f.Data.DataView.Close("dtMapping","FMapVw")
	f.Data.DataTable.Close("dtMapping")
f.Intrinsic.Control.EndIf

f.Intrinsic.String.Build("Select Enabled, RTRIM(XPTYPE) XPTYPE, RTRIM(XPFIELD) XPFIELD, RTRIM(MAPID) MAPID, '' DESCR, INDX, RTRIM(PROFILE) PROFILE, RTRIM(IsNull(XML_PATH, '')) XML_PATH from GCG_4980_NESTMAINT where profile = '{1}' order by INDX ASC",V.Args.XPTYPE,V.Global.sProfile,V.Local.sSql)
f.Data.DataTable.CreateFromSQL("dtMapping","Con",V.Local.sSql,true)

f.Intrinsic.Control.If(V.DataTable.dtMapping.RowCount,=,0)
	F.Intrinsic.Control.If(V.Args.XPTYPE, =, "B", "OR", V.Args.XPTYPE, =, "Y")
		F.Intrinsic.Control.CallSub(LoadXMLFields)
	F.Intrinsic.Control.EndIf
f.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(LoadFieldList)

f.Data.DataTable.FillFromDictionary("dtMapping","dictFieldDescriptions","MAPID","DESCR")

f.Data.Dataview.Create("dtMapping","FMapVw",22)

GUI.FormExportMaintenance.GsGCFieldMap.AddGridviewFromDataview("gvExportMap","dtMapping","FMapVw")
GUI.FormExportMaintenance.GsGCFieldMap.SetColumnProperty("gvExportMap","INDX","visible",False)
GUI.FormExportMaintenance.GsGCFieldMap.SetColumnProperty("gvExportMap","XPTYPE","visible",False)
GUI.FormExportMaintenance.GsGCFieldMap.SetColumnProperty("gvExportMap","PROFILE","visible",False)
GUI.FormExportMaintenance.GsGCFieldMap.SetColumnProperty("gvExportMap", "XML_PATH", "Visible", False)

GUI.FormExportMaintenance.GsGCFieldMap.SetColumnProperty("gvExportMap","Enabled","headerforecolor", V.Color.PRI-GSS-00)
GUI.FormExportMaintenance.GsGCFieldMap.SetColumnProperty("gvExportMap","Enabled","headerfontbold", true)
GUI.FormExportMaintenance.GsGCFieldMap.SetColumnProperty("gvExportMap","Enabled","caption","Enable")
GUI.FormExportMaintenance.GsGCFieldMap.SetColumnProperty("gvExportMap","Enabled","readonly", False)
GUI.FormExportMaintenance.GsGCFieldMap.SetColumnProperty("gvExportMap","Enabled","allowedit", True)
GUI.FormExportMaintenance.GsGCFieldMap.SetColumnProperty("gvExportMap","Enabled","MinWidth", 55)
GUI.FormExportMaintenance.GsGCFieldMap.SetColumnProperty("gvExportMap","Enabled","MaxWidth", 55)

GUI.FormExportMaintenance.GsGCFieldMap.SetColumnProperty("gvExportMap","XPField","headerforecolor", V.Color.PRI-GSS-00)
GUI.FormExportMaintenance.GsGCFieldMap.SetColumnProperty("gvExportMap","XPField","headerfontbold", true)
GUI.FormExportMaintenance.GsGCFieldMap.SetColumnProperty("gvExportMap","XPField","caption","Field Header")
GUI.FormExportMaintenance.GsGCFieldMap.SetColumnProperty("gvExportMap","XPField","readonly", True)
GUI.FormExportMaintenance.GsGCFieldMap.SetColumnProperty("gvExportMap","XPField","allowedit", False)
GUI.FormExportMaintenance.GsGCFieldMap.SetColumnProperty("gvExportMap","XPField","MinWidth", 120)

GUI.FormExportMaintenance.GsGCFieldMap.SetColumnProperty("gvExportMap","MAPID","headerforecolor", V.Color.PRI-GSS-00)
GUI.FormExportMaintenance.GsGCFieldMap.SetColumnProperty("gvExportMap","MAPID","headerfontbold", true)
GUI.FormExportMaintenance.GsGCFieldMap.SetColumnProperty("gvExportMap","MAPID","caption","Field Map ID")
GUI.FormExportMaintenance.GsGCFieldMap.SetColumnProperty("gvExportMap","MAPID","readonly", False)
GUI.FormExportMaintenance.GsGCFieldMap.SetColumnProperty("gvExportMap","MAPID","allowedit", True)
GUI.FormExportMaintenance.GsGCFieldMap.SetColumnProperty("gvExportMap","MAPID","MinWidth", 80)

GUI.FormExportMaintenance.GsGCFieldMap.SetColumnProperty("gvExportMap","DESCR","headerforecolor", V.Color.PRI-GSS-00)
GUI.FormExportMaintenance.GsGCFieldMap.SetColumnProperty("gvExportMap","DESCR","headerfontbold", true)
GUI.FormExportMaintenance.GsGCFieldMap.SetColumnProperty("gvExportMap","DESCR","caption","Field Description")
GUI.FormExportMaintenance.GsGCFieldMap.SetColumnProperty("gvExportMap","DESCR","readonly", True)
GUI.FormExportMaintenance.GsGCFieldMap.SetColumnProperty("gvExportMap","DESCR","allowedit", False)
GUI.FormExportMaintenance.GsGCFieldMap.SetColumnProperty("gvExportMap","DESCR","MinWidth", 160)

GUI.FormExportMaintenance.GsGCFieldMap.SetGridviewProperty("gvExportMap","Enableappearanceoddrow",True)
GUI.FormExportMaintenance.GsGCFieldMap.SetGridviewProperty("gvExportMap","OptionsFindAlwaysVisible",False)
GUI.FormExportMaintenance.GsGCFieldMap.SetGridviewProperty("gvExportMap","Showgrouppanel",False)
GUI.FormExportMaintenance.GsGCFieldMap.SetGridviewProperty("gvExportMap","OptionsViewShowAutoFilterRow",False)
GUI.FormExportMaintenance.GsGCFieldMap.SetGridviewProperty("gvExportMap","AllowSort",False)
GUI.FormExportMaintenance.GsGCFieldMap.SetGridviewProperty("gvExportMap","AllowFilter",False)
GUI.FormExportMaintenance.GsGCFieldMap.SetGridviewProperty("gvExportMap","AllowColumnMoving",False)
GUI.FormExportMaintenance.GsGCFieldMap.SetGridviewProperty("gvExportMap","OptionsViewColumnAutoWidth",False)

GUI.FormExportMaintenance.GsGCFieldMap.SetColumnProperty("gvExportMap", "XML_PATH", "HeaderForeColor", V.Color.PRI-GSS-00)
GUI.FormExportMaintenance.GsGCFieldMap.SetColumnProperty("gvExportMap", "XML_PATH", "HeaderFontBold", True)
GUI.FormExportMaintenance.GsGCFieldMap.SetColumnProperty("gvExportMap", "XML_PATH", "Caption","XML Path")
GUI.FormExportMaintenance.GsGCFieldMap.SetColumnProperty("gvExportMap", "XML_PATH", "Readonly", False)
GUI.FormExportMaintenance.GsGCFieldMap.SetColumnProperty("gvExportMap", "XML_PATH", "AllowEdit", True)
GUI.FormExportMaintenance.GsGCFieldMap.SetColumnProperty("gvExportMap", "XML_PATH", "MinWidth", 200)

F.Intrinsic.Control.CallSub(LoadExportFieldDropDown)

GUI.FormExportMaintenance.GsGCFieldMap.MainView("gvExportMap")

F.Intrinsic.Control.If(V.Local.bReEnable)
	GUI.FormExportMaintenance..Enabled(True)
F.Intrinsic.Control.EndIf

GUI.FormExportMaintenance..SetFocus

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.LoadMap.End

Program.Sub.EnableExport.Start
'pass enabled

F.Intrinsic.Control.Try

GUI.FormExportMaintenance.frameLegend.Enabled(V.Args.Enabled)
GUI.FormExportMaintenance.frameMapping.Enabled(V.Args.Enabled)
GUI.FormExportMaintenance.txtXPPath.Enabled(V.Args.Enabled)
GUI.FormExportMaintenance.cmdXPPath.Enabled(V.Args.Enabled)
GUI.FormExportMaintenance.chkStaticFile.Enabled(V.Args.Enabled)
GUI.FormExportMaintenance.chkUnattendedExport.Enabled(V.Args.Enabled)
GUI.FormExportMaintenance.chkHeaders.Enabled(V.Args.Enabled)
GUI.FormExportMaintenance.txtDateFormat.Enabled(V.Args.Enabled)
GUI.FormExportMaintenance.chkBackupExport.Enabled(V.Args.Enabled)
GUI.FormExportMaintenance.txtImportFields.Enabled(V.Args.Enabled)
GUI.FormExportMaintenance.cmdExportExpressionColumns.Enabled(V.Args.Enabled)
GUI.FormExportMaintenance.cmdLoadFieldList.Enabled(V.Args.Enabled)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.EnableExport.End

Program.Sub.LoadExportFieldDropDown.Start
F.Intrinsic.Control.Try

V.Local.sDD.Declare(String)
V.Local.sSQL.Declare(String)
V.Local.sRet.Declare(String)

F.Data.DataView.Create("dtLegend", "dvDropDown", 22)
F.Data.DataView.ToString("dtLegend", "dvDropDown", "INDEX", "***NODELIMITER***", "*!*", V.Local.sDD)
F.Data.DataView.Close("dtLegend", "dvDropDown")

'here load expression columns
F.Intrinsic.String.Build("select RTRIM(SETTING) from GCG_4980_SETTINGS where TYPE = 'EXPORT_FIELD' and PROFILE = '{0}' ORDER by left(SETTING, 2), CAST(RIGHT(RTRIM(SETTING), LENGTH(SETTING) - 2) as Integer)", V.Global.sProfile, V.Local.sSql)
F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSql, V.Local.sRet)
F.Intrinsic.Control.If(V.Ambient.ExecuteAndReturnEOF.Not)
	F.Intrinsic.String.Replace(V.Local.sRet, "#$#", "*!*", V.Local.sRet)
	V.Local.sDD.Append("*!*")
	V.Local.sDD.Append(V.Local.sRet)
F.Intrinsic.Control.EndIf

V.Local.sDD.Append("*!*N_A")

GUI.FormExportMaintenance.GsGCFieldMap.ColumnEdit("gvExportMap","MAPID","Dropdownlist",V.Local.sDD)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.LoadExportFieldDropDown.End

Program.Sub.Unload_All.Start
F.Intrinsic.Control.Try

F.Data.Dictionary.Close("dictCloseTypes")

F.Intrinsic.Control.CallSub(CloseSettingsDT)
F.Intrinsic.Control.CallSub(Connection, "Connect", False)
f.Intrinsic.Control.End

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.Unload_All.End

Program.Sub.cmdXPPath_Click.Start
F.Intrinsic.Control.Try

V.local.sFolder.Declare

f.Intrinsic.UI.FolderBrowser("Select a Destination Folder", V.Local.sFolder)

f.Intrinsic.Control.If(V.Local.sFolder.IsNotCancel)
	GUI.FormExportMaintenance.txtXPPath.Text(V.Local.sFolder)
f.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(txtXPPath_LostFocus)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.cmdXPPath_Click.End

Program.Sub.txtWorkOrder_Change.Start
F.Intrinsic.Control.Try

V.Local.sSQL.Declare
V.Local.sWO.Declare
V.Local.sJob.Declare
V.Local.sSuffix.Declare
V.Local.sSeq.Declare
V.Local.icount.Declare
V.Local.sFilter.Declare
V.Local.sCount.Declare
V.Local.dTemp.Declare(Date)
V.Local.sPath.Declare(String)
V.Local.sLegend.Declare(String)
V.Local.sWCs.Declare(String)
V.Local.sParent.Declare(String)
V.Local.sProduct_Line.Declare(String)
V.Local.sJobs.Declare(String)
V.Local.sTempSplit.Declare(String)
V.Local.iCnt.Declare(Long)
V.Local.bLongPart.Declare(Boolean)

f.Intrinsic.Control.If(V.Screen.FormExportMaintenance!txtWorkOrder.Text.trim,=,"")
	f.Intrinsic.Control.ExitSub
f.Intrinsic.Control.EndIf

GUI.FormExportMaintenance..Enabled(False)
F.Intrinsic.UI.InvokeWaitDialog("Loading Work Order Info...", "Loading")

f.Intrinsic.String.Split(V.Screen.FormExportMaintenance!txtWorkOrder.Text,"-",V.Local.sWO)
V.Local.sjob.set(V.Local.sWO(0))
V.Local.sSuffix.set(V.Local.sWO(1))
V.Local.sSeq.set(V.Local.sWO(2))
V.Local.sWO.Redim(0,0)

f.Intrinsic.String.Build("SELECT JOB, SUFFIX, SEQ,RTRIM(' ') as UNITS, concat(Concat(concat(Job,concat('-',suffix)),'-'),SEQ) as C01,JOB + SUFFIX + SEQ AS JSS,(SELECT TOP 1 DESCRIPTION FROM V_JOB_OPERATIONS WHERE JOB = A.JOB AND SUFFIX = A.SUFFIX AND LMO = 'C' AND SEQ > A.SEQ AND SEQ < ISNULL((SELECT TOP 1 SEQ FROM V_JOB_OPERATIONS WHERE JOB = A.JOB AND SUFFIX = A.SUFFIX AND SEQ > A.SEQ AND SEQ < '995000' AND LMO = 'L' ),'995000'))  as C34,DATE_DUE as C00,RTRIM(' ') as C33,RTRIM(' ') as C48, job as C88, RTRIM(Suffix) as C89, Seq as C90, Seq as C91, UNITS_OPEN - UNITS_COMPLETE C94, DATE_START C96, RTRIM(OPERATION) C222, RTRIM(ROUTER_SEQ) C223, UNITS_OPEN C224, HOURS_ESTIMATED C225, UNITS_COMPLETE C226, UNITS_SCRAP C227 from V_JOB_OPERATIONS AS A WHERE LMO = 'L' AND FLAG_CLOSED <> 'Y' AND SEQ < '995000' and job = '{0}' and suffix = '{1}' and seq = '{2}'",V.Local.sJob,V.Local.sSuffix,V.Local.sSeq,V.Local.sSql )

f.Data.DataTable.CreateFromSQL("JobOp","Con",V.Local.sSQL)
F.Intrinsic.String.Build("Select JSS, RTRIM(SAR) as WC from APSV3_UBDETAIL where SEQ < '995000' and SAR in (select Machine from Workcenters where Nesting_Intrfc = 'Y') and HOURTYPE = 1 and JOB = '{0}' and SFX = '{1}'", V.Local.sJob, V.Local.sSuffix, V.Local.sSQL)
f.Data.Dictionary.CreateFromSQL("WCDict","Con",V.Local.sSQL)
f.Data.Dictionary.SetDefaultReturn("WCDict","")
f.Data.DataTable.FillFromDictionary("JobOp","WCDict","JSS","C91")
f.Data.Dictionary.Close("WCDict")

F.Intrinsic.String.Build("Select job,suffix,seq,part,Hours_Estimated as Units from V_job_operations where LMO = 'M' and SEQ < '995000' and JOB = '{0}' and SUFFIX = '{1}'", V.Local.sJob, V.Local.sSuffix, V.Local.sSQL)
f.Data.DataTable.CreateFromSQL("MatSeq","Con", V.Local.sSQL)

F.Data.DataTable.AddColumn("JobOp", "C198", "String", "")

'why is there a loop here
f.Intrinsic.Control.If(V.DataTable.JobOp.RowCount,>,0)
	f.Intrinsic.Control.For(V.Local.iCount,0,V.DataTable.JobOp.RowCount--,1)
		f.Intrinsic.String.Build("Job = '{0}' AND Suffix = '{1}' AND SEQ < '{2}'",V.DataTable.JobOp(V.Local.icount).job!fieldVal,V.DataTable.JobOp(V.Local.icount).suffix!fieldVal,V.DataTable.JobOp(V.Local.icount).Seq!fieldVal,V.Local.sFilter)
		f.Data.DataView.Create("MatSeq","TempVw","22",V.Local.sFilter,"SEQ DESC")
		f.Intrinsic.Control.If(V.DataView.MatSeq!TempVw.RowCount,>,0)
			f.Data.DataTable.SetValue("JobOp",V.Local.iCount,"UNITS",V.DataView.MatSeq!TempVw(0).Units!fieldValFloat)
			f.Data.DataTable.SetValue("JobOp",V.Local.iCount,"C48",V.DataView.MatSeq!TempVw(0).Part!fieldValTrim)
			f.Data.DataTable.SetValue("JobOp",V.Local.iCount,"C33",V.DataView.MatSeq!TempVw(0).Part!fieldValTrim)
			f.Data.DataTable.SetValue("JobOp",V.Local.iCount,"C198",V.DataView.MatSeq!TempVw(0).Seq!fieldValTrim)
		f.Intrinsic.Control.EndIf
		f.Data.DataView.Close("MatSeq","TempVw")
	f.Intrinsic.Control.Next(V.Local.iCount)
f.Intrinsic.Control.EndIf

f.Data.DataTable.Close("MatSeq")

f.Intrinsic.String.Build("Select A.job,A.suffix,RTRIM(concat(A.Job,concat('-',A.suffix))) as C02,RTRIM(A.Router) as C03, RTRIM(A.Description) as C04, RTRIM(A.Part) as C05,RTRIM(LEFT(A.Part,17)) as C82,RTRIM(Right(A.Part,3)) as C83,RTRIM(A.LOCATION) as C84,RTRIM(A.CUSTOMER) as C07,RTRIM(' ') as C08,A.AMT_PRICE_PER_UNIT as C09,RTRIM(A.PRIORITY) as  C10,RTRIM(A.PRODUCT_LINE) as C11, RTRIM(A.PROJECT) as C12, RTRIM(A.Phase) as C13, IF(A.SALES_ORDER like '%0' or A.SALES_ORDER = '', '', RTRIM(A.SALES_ORDER) + '-' + RTRIM(A.SALES_ORDER_LINE)) as C14, A.QTY_ORDER as C15,RTRIM(A.CUSTOMER_PO) as C16, RTRIM(A.COMMENTS_1) as C17, RTRIM(A.COMMENTS_2) as C18, RTRIM(A.Comments_3) as C19, RTRIM(A.Drawing_Customer) as C20,RTRIM(A.part_customer) as C21, IF (RTRIM(A.PARENT_WO )= '', '', RTRIM(A.Parent_WO) + '-' + RTRIM(A.PARENT_SUFFIX_PARENT)) as C22,IF(A.SALES_ORDER like '%0', '', RTRIM(A.sales_Order)) as sales_Order, IF(A.SALES_ORDER_LINE like '%0', '', RTRIM(A.Sales_Order_Line)) as Sales_Order_Line, A.DATE_OPENED as C92, A.QTY_ORDER - A.QTY_COMPLETED C93, A.DATE_START C95, A.DATE_DUE C97, Cast(IF(RTrim(IsNull(A.EXPORTED, '')) = '', 0, 1) as BIT) C201, B.LastSchedDate C204, A.FLAG_HOLD C213 from V_Job_Header A left join APSV3_JBMaster B on A.JOB = B.JOB and A.SUFFIX = B.SFX where A.job = '{0}' and A.suffix = '{1}'",V.Local.sJob,V.Local.sSuffix,V.Local.sSQL)
f.data.DataTable.CreateFromSQL("JobHD","Con",V.Local.sSQL)

f.Data.Dictionary.CreateFromSQL("CustDict","Con","Select Customer, Name_Customer as C08 from V_CUSTOMER_MASTER")
f.Data.Dictionary.SetDefaultReturn("CustDict","")
f.Data.DataTable.FillFromDictionary("JobHD","CustDict","C07","C08")
f.Data.Dictionary.Close("CustDict")

F.Intrinsic.String.Build("select job,suffix, RTRIM(user_1) as C23, RTRIM(user_2) as C24,RTRIM(user_3) as C25,RTRIM(user_4) as C26,RTRIM(user_5) as C27,RTRIM(user_6) as C28,RTRIM(user_7) as C29,RTRIM(user_8) as C30,RTRIM(user_9) as C31,RTRIM(user_10) as C32 from V_WO_USER_FLDS where JOB = '{0}' and SUFFIX = '{1}'", V.Local.sJob, V.Local.sSuffix, V.Local.sSQL)
f.Data.DataTable.CreateFromSQL("JobHDUsr", "Con", V.Local.sSQL)

f.Data.linq.Join("LeftJoin","DataTable","JobHD*!*a","DataTable","JobHDUsr*!*b","a.job=b.job AND a.suffix = b.suffix","a.job*!*a.suffix*!*a.C02*!*a.C03*!*a.C04*!*a.C05*!*a.C07*!*a.C08*!*a.C09*!*a.C10*!*a.C11*!*a.C12*!*a.C13*!*a.C14*!*a.C15*!*a.C16*!*a.C17*!*a.C18*!*a.C19*!*a.C20*!*a.C21*!*a.C22*!*b.C23*!*b.C24*!*b.C25*!*b.C26*!*b.C27*!*b.C28*!*b.C29*!*b.C30*!*b.C31*!*b.C32*!*a.C82*!*a.C83*!*a.C84*!*a.sales_Order*!*a.sales_Order_line*!*A.C92*!*a.C93*!*a.C95*!*A.C97*!*A.C201*!*A.C204*!*A.C213","","","","JobHDWOPart",false)

f.Data.DataTable.Close("JobHD")
f.Data.DataTable.Close("JobHDUsr")

f.Data.linq.Join("LeftJoin","DataTable","JobOp*!*a","DataTable","JobHDWOPart*!*b","a.job=b.job AND a.suffix = b.suffix","a.job*!*a.suffix*!*a.seq*!*a.C00*!*a.C01*!*b.C02*!*b.C03*!*b.C04*!*b.C05*!*b.C07*!*b.C08*!*b.C09*!*b.C10*!*b.C11*!*b.C12*!*b.C13*!*b.C14*!*b.C15*!*b.C16*!*b.C17*!*b.C18*!*b.C19*!*b.C20*!*b.C21*!*b.C22*!*b.C23*!*b.C24*!*b.C25*!*b.C26*!*b.C27*!*b.C28*!*b.C29*!*b.C30*!*b.C31*!*b.C32*!*a.C33*!*a.C34*!*a.C48*!*b.C82*!*b.C83*!*b.C84*!*a.C88*!*a.C89*!*a.C90*!*a.C91*!*b.sales_Order*!*b.sales_Order_line*!*b.C92*!*b.C93*!*b.C95*!*A.C94*!*A.C96*!*B.C97*!*A.C198*!*B.C201*!*B.C204*!*B.C213*!*A.C222*!*A.C223*!*A.C224*!*A.C225*!*A.C226*!*A.C227","","","","WOSEQPART",True)

f.Data.DataTable.Close("JobHDWOPart")
f.Data.DataTable.Close("JobOp")

f.data.DataTable.CreateFromSQL("SODet","Con","Select RTRIM(a.order_no )as C63,b.order_type as C64,RTRIM(b.customer_po) as C65,RTRIM(b.User_1) as C66,RTRIM(b.User_2) as C67,RTRIM(b.user_3) as C68,RTRIM(b.user_4) as C69,RTRIM(b.user_5) as C70, RTRIM(Left(a.record_no,3)) as C71, RTRIM(a.LINE_TYPE) as C72,RTRIM(a.part) as C73,RTRIM(a.info_1) as C74,RTRIM(a.info_2) as C75,RTRIM(a.GROUP_LINES) as C76,RTRIM(a.user_1) as C77, RTRIM(a.user_2) as C78, RTRIM(a.user_3) as C79, RTRIM(a.user_4) as C80, RTRIM(a.user_5) as C81 from v_order_lines a inner join V_order_header b on a.order_no = b.Order_no")

f.Data.linq.Join("LeftJoin","DataTable","WOSEQPART*!*a","DataTable","SODet*!*b","a.sales_Order=b.C63 AND a.sales_Order_line = b.C71","a.job*!*a.suffix*!*a.seq*!*a.C00*!*a.C01*!*a.C02*!*a.C03*!*a.C04*!*a.C05*!*a.C07*!*a.C08*!*a.C09*!*a.C10*!*a.C11*!*a.C12*!*a.C13*!*a.C14*!*a.C15*!*a.C16*!*a.C17*!*a.C18*!*a.C19*!*a.C20*!*a.C21*!*a.C22*!*a.C23*!*a.C24*!*a.C25*!*a.C26*!*a.C27*!*a.C28*!*a.C29*!*a.C30*!*a.C31*!*a.C32*!*a.C33*!*a.C34*!*a.C48*!*b.C63*!*b.C64*!*b.C65*!*b.C66*!*b.C67*!*b.C68*!*b.C69*!*b.C70*!*b.C71*!*b.C72*!*b.C73*!*b.C74*!*b.C75*!*b.C76*!*b.C77*!*b.C78*!*b.C79*!*b.C80*!*b.C81*!*a.C82*!*a.C83*!*a.C84*!*a.C88*!*a.C89*!*a.C90*!*a.C91*!*a.C92*!*a.C93*!*a.C95*!*A.C94*!*A.C96*!*A.C97*!*A.C198*!*A.C201*!*A.C204*!*A.C213*!*A.C222*!*A.C223*!*A.C224*!*A.C225*!*A.C226*!*A.C227","","","","WOSO",True)

f.Data.DataTable.Close("WOSEQPART")

f.Data.DataTable.Close("SODet")

f.Data.DataTable.CreateFromSQL("InvDT","Con","select RTRIM(a.Part) as part, RTRIM(a.location) as location,RTRIM(a.Description) as C06,RTRIM(a.Bin) as C35,RTRIM(a.CODE_SORT) as C36,RTRIM(b.Name_vendor) as C37,RTRIM(b.Text_info1) as C38,RTRIM(b.Text_info2) as C39,b.LBS as C40,RTRIM(C.Stock_Bin) as C41,b.length as LENGTH, b.width as WIDTH, a.LENGTH_RAW_MATL as ALTERNATE_LENGTH, A.WIDTH_RAW_MATL as ALTERNATE_WIDTH,c.thickness as C44,a.Density_raw_matl as C45,RTRIM(b.description_2) as C46,RTRIM(b.description_3) as C47, RTRIM(a.UM_INVENTORY) C202 from V_INVENTORY_MSTR a left Outer join V_INVENTORY_MST2 b on a.part = b.part and a.location = b.location left outer join V_INVENTORY_MST3 c on a.part = c.part and a.location = c.location")

f.Data.linq.Join("LeftJoin","DataTable","WOSO*!*a","DataTable","InvDT*!*b","a.C05=b.part AND a.C84 = b.location","a.job*!*a.suffix*!*a.seq*!*a.C00*!*a.C01*!*a.C02*!*a.C03*!*a.C04*!*a.C05*!*b.C06*!*a.C07*!*a.C08*!*a.C09*!*a.C10*!*a.C11*!*a.C12*!*a.C13*!*a.C14*!*a.C15*!*a.C16*!*a.C17*!*a.C18*!*a.C19*!*a.C20*!*a.C21*!*a.C22*!*a.C23*!*a.C24*!*a.C25*!*a.C26*!*a.C27*!*a.C28*!*a.C29*!*a.C30*!*a.C31*!*a.C32*!*a.C33*!*a.C34*!*b.C35*!*b.C36*!*b.C37*!*b.C38*!*b.C39*!*b.C40*!*b.C41*!*B.LENGTH*!*B.WIDTH*!*B.ALTERNATE_LENGTH*!*B.ALTERNATE_WIDTH*!*b.C44*!*b.C45*!*b.C46*!*b.C47*!*a.C48*!*a.C63*!*a.C64*!*a.C65*!*a.C66*!*a.C67*!*a.C68*!*a.C69*!*a.C70*!*a.C71*!*a.C72*!*a.C73*!*a.C74*!*a.C75*!*a.C76*!*a.C77*!*a.C78*!*a.C79*!*a.C80*!*a.C81*!*a.C82*!*a.C83*!*a.C84*!*a.C88*!*a.C89*!*a.C90*!*a.C91*!*a.C92*!*a.C93*!*a.C95*!*A.C94*!*A.C96*!*A.C97*!*A.C198*!*A.C201*!*B.C202*!*A.C204*!*A.C213*!*A.C222*!*A.C223*!*A.C224*!*A.C225*!*A.C226*!*A.C227","","","","WOSOFG",True)

f.Data.DataTable.Close("WOSO")

f.Data.DataTable.Close("InvDT")

f.Data.DataTable.CreateFromSQL("InvDT","Con","select RTRIM(a.Part) as part , RTRIM(a.location) as location,RTRIM(a.Product_line) as C49,RTRIM(a.Description) as C87,RTRIM(a.Bin) as C50,RTRIM(a.CODE_SORT) as C51,RTRIM(b.Name_vendor) as C52,RTRIM(b.Text_info1) as C53,RTRIM(b.Text_info2) as C54,b.LBS as C55,RTRIM(C.Stock_Bin) as C56, b.length as C57, b.width as C58,c.thickness as C59,a.Density_raw_matl as C60,RTRIM(b.description_2) as C61,RTRIM(b.description_3) as C62,RTRIM(left(a.part,17)) as C85, RTRIM(Right(a.part,3)) as C86, RTRIM(a.UM_INVENTORY) C203 from V_INVENTORY_MSTR a left Outer join V_INVENTORY_MST2 b on a.part = b.part and a.location = b.location left outer join V_INVENTORY_MST3 c on a.part = c.part and a.location = c.location")

f.Data.linq.Join("LeftJoin","DataTable","WOSOFG*!*a","DataTable","InvDT*!*b","a.C48=b.part AND a.C84 = b.location","a.job*!*a.suffix*!*a.seq*!*a.C00*!*a.C01*!*a.C02*!*a.C03*!*a.C04*!*a.C05*!*a.C06*!*a.C07*!*a.C08*!*a.C09*!*a.C10*!*a.C11*!*a.C12*!*a.C13*!*a.C14*!*a.C15*!*a.C16*!*a.C17*!*a.C18*!*a.C19*!*a.C20*!*a.C21*!*a.C22*!*a.C23*!*a.C24*!*a.C25*!*a.C26*!*a.C27*!*a.C28*!*a.C29*!*a.C30*!*a.C31*!*a.C32*!*a.C33*!*a.C34*!*a.C35*!*a.C36*!*a.C37*!*a.C38*!*a.C39*!*a.C40*!*a.C41*!*A.LENGTH*!*A.WIDTH*!*A.ALTERNATE_LENGTH*!*A.ALTERNATE_WIDTH*!*a.C44*!*a.C45*!*a.C46*!*a.C47*!*a.C48*!*b.C49*!*b.C50*!*b.C51*!*b.C52*!*b.C53*!*b.C54*!*b.C55*!*b.C56*!*b.C57*!*b.C58*!*b.C59*!*b.C60*!*b.C61*!*b.C62*!*a.C63*!*a.C64*!*a.C65*!*a.C66*!*a.C67*!*a.C68*!*a.C69*!*a.C70*!*a.C71*!*a.C72*!*a.C73*!*a.C74*!*a.C75*!*a.C76*!*a.C77*!*a.C78*!*a.C79*!*a.C80*!*a.C81*!*a.C82*!*a.C83*!*a.C84*!*b.C85*!*b.C86*!*b.C87*!*a.C88*!*a.C89*!*a.C90*!*a.C91*!*a.C92*!*a.C93*!*a.C95*!*A.C94*!*A.C96*!*A.C97*!*A.C198*!*A.C201*!*A.C202*!*B.C203*!*A.C204*!*A.C213*!*A.C222*!*A.C223*!*A.C224*!*A.C225*!*A.C226*!*A.C227","","","","WOSOINV",True)
f.Data.DataTable.Close("WOSOFG")
f.Data.DataTable.Close("InvDT")

'length/width can be stored in either INVENTORY_MSTR or INVENTORY_MST2 depending on the Advanced Inventory Option "Store Part Dimensions in Inches instead of Feet"
F.Data.DataTable.AddExpressionColumn("WOSOINV", "C42", "Float", "IIF([LENGTH] = 0, [ALTERNATE_LENGTH], [LENGTH])")
F.Data.DataTable.AddExpressionColumn("WOSOINV", "C43", "Float", "IIF([WIDTH] = 0, [ALTERNATE_WIDTH], [WIDTH])")

'Werk Brau Custom (Alejandro Anazco - 10/14/2019)
f.Intrinsic.String.Build("Select Rtrim(Part) as Part from Job_Operations where (LMO = 'L' or LMO = 'O') and PART <> 'TASK' and Job = '{0}' and Suffix = '{1}' and Part <> '' Order By  Seq asc", V.Local.sJob, V.Local.sSuffix, V.Local.sSQL)
f.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sWCs)
F.Intrinsic.String.Split(V.Local.sWCs, "#$#", V.Local.sWCs)
F.Intrinsic.String.RemoveArrayDuplicates(V.Local.sWCs, V.Local.sWCs)
F.Intrinsic.String.Join(V.Local.sWCs, "\", V.Local.sWCs)
f.Data.DataTable.AddColumn("WOSOINV", "C98", "String", V.Local.sWCs)

'previous WCs
f.Intrinsic.String.Build("Select Rtrim(Part) as Part from Job_Operations where (LMO = 'L' or LMO = 'O') and PART <> 'TASK' and Job = '{0}' and Suffix = '{1}' and Part <> '' and SEQ < '{2}' Order By  Seq asc", V.Local.sJob, V.Local.sSuffix, V.Local.sSeq, V.Local.sSQL)
f.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sWCs)
F.Intrinsic.String.Split(V.Local.sWCs, "#$#", V.Local.sWCs)
F.Intrinsic.String.RemoveArrayDuplicates(V.Local.sWCs, V.Local.sWCs)
F.Intrinsic.String.Join(V.Local.sWCs, "\", V.Local.sWCs)
f.Data.DataTable.AddColumn("WOSOINV", "C199", "String", V.Local.sWCs)

'subsequent WCs
f.Intrinsic.String.Build("Select Rtrim(Part) as Part from Job_Operations where (LMO = 'L' or LMO = 'O') and PART <> 'TASK' and Job = '{0}' and Suffix = '{1}' and Part <> '' and SEQ > '{2}' Order By Seq asc", V.Local.sJob, V.Local.sSuffix, V.Local.sSeq, V.Local.sSQL)
f.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sWCs)
F.Intrinsic.String.Split(V.Local.sWCs, "#$#", V.Local.sWCs)
F.Intrinsic.String.RemoveArrayDuplicates(V.Local.sWCs, V.Local.sWCs)
F.Intrinsic.String.Join(V.Local.sWCs, "\", V.Local.sWCs)
f.Data.DataTable.AddColumn("WOSOINV", "C200", "String", V.Local.sWCs)

f.Data.DataTable.AddColumn("WOSOINV", "C99", "String")
f.Data.DataTable.AddColumn("WOSOINV", "C100", "String")

'adding bom parent part and PO
F.Data.DataTable.CreateFromSQL("dtJobHeaderFields", "Con", "select  RTRIM(A.JOB) + '-' + RTRIM(A.SUFFIX) JS, RTRIM(A.JOB) JOB, RTRIM(A.SUFFIX) SUFFIX, IF (RTRIM(A.PARENT_WO )= '', '', RTRIM(A.Parent_WO) + RTRIM(A.PARENT_SUFFIX_PARENT)) PARENTJOB, RTRIM(A.PRODUCT_LINE) PRODUCT_LINE, RTRIM(A.PART) PART, RTRIM(A.CUSTOMER_PO) CUSTOMER_PO, IF(A.SALES_ORDER like '%0', '', RTRIM(A.SALES_ORDER)) SALES_ORDER, IF(A.SALES_ORDER_LINE like '%0', '', RTRIM(A.SALES_ORDER_LINE)) SALES_ORDER_LINE, RTRIM(B.USER_1) SO_U1, RTRIM(B.USER_2) SO_U2, RTRIM(B.USER_3) SO_U3, RTRIM(B.USER_4) SO_U4, RTRIM(B.USER_5) SO_U5 from V_JOB_HEADER A left join V_ORDER_HEADER B on A.SALES_ORDER = B.ORDER_NO")
F.Data.DataTable.AddExpressionColumn("dtJobHeaderFields", "FULL_SO", "String", "IIF([SALES_ORDER] <> '', Trim([SALES_ORDER]) + '-' + TRIM(SALES_ORDER_LINE), '')")
	
'direct BOM parent fields
F.Data.Dictionary.CreateFromDataTable("plDictionary", "dtJobHeaderFields", "JS", "PRODUCT_LINE")
f.Data.Dictionary.SetDefaultReturn("plDictionary", "")
f.Data.DataTable.FillFromDictionary("WOSOINV", "plDictionary", "C22", "C99")
f.Data.Dictionary.Close("plDictionary")

'part
F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtJobHeaderFields", "JS", "PART")
F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
F.Data.DataTable.AddColumn("WOSOINV", "C101_TEMP", "String", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C22", "C101_TEMP")
F.Data.Dictionary.Close("dictTemp")
F.Data.DataTable.AddExpressionColumn("WOSOINV", "C101", "String", "[C101_TEMP]")

'po
F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtJobHeaderFields", "JS", "CUSTOMER_PO")
F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
F.Data.DataTable.AddColumn("WOSOINV", "C102_TEMP", "String", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C22", "C102_TEMP")
F.Data.Dictionary.Close("dictTemp")
F.Data.DataTable.AddExpressionColumn("WOSOINV", "C102", "String", "[C102_TEMP]")

'so
F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtJobHeaderFields", "JS", "SALES_ORDER")
F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
F.Data.DataTable.AddColumn("WOSOINV", "C104_TEMP", "String", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C22", "C104_TEMP")
F.Data.Dictionary.Close("dictTemp")
F.Data.DataTable.AddExpressionColumn("WOSOINV", "C104", "String", "[C104_TEMP]")

'so line
F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtJobHeaderFields", "JS", "SALES_ORDER_LINE")
F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
F.Data.DataTable.AddColumn("WOSOINV", "C106_TEMP", "String", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C22", "C106_TEMP")
F.Data.Dictionary.Close("dictTemp")
F.Data.DataTable.AddExpressionColumn("WOSOINV", "C106", "String", "[C106_TEMP]")

'full so
F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtJobHeaderFields", "JS", "FULL_SO")
F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
F.Data.DataTable.AddColumn("WOSOINV", "C108_TEMP", "String", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C22", "C108_TEMP")
F.Data.Dictionary.Close("dictTemp")
F.Data.DataTable.AddExpressionColumn("WOSOINV", "C108", "String", "[C108_TEMP]")

'user 1
F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtJobHeaderFields", "JS", "SO_U1")
F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
F.Data.DataTable.AddColumn("WOSOINV", "C117", "String", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C22", "C117")
F.Data.Dictionary.Close("dictTemp")

'user 2
F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtJobHeaderFields", "JS", "SO_U2")
F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
F.Data.DataTable.AddColumn("WOSOINV", "C118", "String", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C22", "C118")
F.Data.Dictionary.Close("dictTemp")

'user 3
F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtJobHeaderFields", "JS", "SO_U3")
F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
F.Data.DataTable.AddColumn("WOSOINV", "C119", "String", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C22", "C119")
F.Data.Dictionary.Close("dictTemp")

'user 4
F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtJobHeaderFields", "JS", "SO_U4")
F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
F.Data.DataTable.AddColumn("WOSOINV", "C120", "String", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C22", "C120")
F.Data.Dictionary.Close("dictTemp")

'user 5
F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtJobHeaderFields", "JS", "SO_U5")
F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
F.Data.DataTable.AddColumn("WOSOINV", "C121", "String", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C22", "C121")
F.Data.Dictionary.Close("dictTemp")

'top level BOM Parent fields
F.Data.DataView.Create("dtJobHeaderFields", "dvTopParent", 22, "[SUFFIX] = '000'", "")
F.Data.DataView.ToDataTable("dtJobHeaderFields", "dvTopParent", "dtTopParent")
F.Data.DataView.Close("dtJobHeaderFields", "dvTopParent")

'pl
F.Data.Dictionary.CreateFromDataTable("topPlDictionary", "dtTopParent", "JOB", "PRODUCT_LINE")
f.Data.Dictionary.SetDefaultReturn("topPlDictionary", "")
f.Data.DataTable.FillFromDictionary("WOSOINV", "topPlDictionary", "C88", "C100")
f.Data.Dictionary.Close("topPlDictionary")

'part
F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtTopParent", "JOB", "PART")
F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
F.Data.DataTable.AddColumn("WOSOINV", "C109_TEMP", "String", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C88", "C109_TEMP")
F.Data.Dictionary.Close("dictTemp")
F.Data.DataTable.AddExpressionColumn("WOSOINV", "C109", "String", "[C109_TEMP]")

'po
F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtTopParent", "JOB", "CUSTOMER_PO")
F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
F.Data.DataTable.AddColumn("WOSOINV", "C110_TEMP", "String", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C88", "C110_TEMP")
F.Data.Dictionary.Close("dictTemp")
F.Data.DataTable.AddExpressionColumn("WOSOINV", "C110", "String", "[C110_TEMP]")

'so
F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtTopParent", "JOB", "SALES_ORDER")
F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
F.Data.DataTable.AddColumn("WOSOINV", "C103_TEMP", "String", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C88", "C103_TEMP")
F.Data.Dictionary.Close("dictTemp")
F.Data.DataTable.AddExpressionColumn("WOSOINV", "C103", "String", "[C103_TEMP]")

'so line
F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtTopParent", "JOB", "SALES_ORDER_LINE")
F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
F.Data.DataTable.AddColumn("WOSOINV", "C105_TEMP", "String", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C88", "C105_TEMP")
F.Data.Dictionary.Close("dictTemp")
F.Data.DataTable.AddExpressionColumn("WOSOINV", "C105", "String", "[C105_TEMP]")

'full so
F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtTopParent", "JOB", "FULL_SO")
F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
F.Data.DataTable.AddColumn("WOSOINV", "C107_TEMP", "String", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C88", "C107_TEMP")
F.Data.Dictionary.Close("dictTemp")
F.Data.DataTable.AddExpressionColumn("WOSOINV", "C107", "String", "[C107_TEMP]")

'user 1
F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtTopParent", "JOB", "SO_U1")
F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
F.Data.DataTable.AddColumn("WOSOINV", "C112", "String", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C88", "C112")
F.Data.Dictionary.Close("dictTemp")

'user 2
F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtTopParent", "JOB", "SO_U2")
F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
F.Data.DataTable.AddColumn("WOSOINV", "C113", "String", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C88", "C113")
F.Data.Dictionary.Close("dictTemp")

'user 3
F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtTopParent", "JOB", "SO_U3")
F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
F.Data.DataTable.AddColumn("WOSOINV", "C114", "String", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C88", "C114")
F.Data.Dictionary.Close("dictTemp")

'user 4
F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtTopParent", "JOB", "SO_U4")
F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
F.Data.DataTable.AddColumn("WOSOINV", "C115", "String", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C88", "C115")
F.Data.Dictionary.Close("dictTemp")

'user 5
F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtTopParent", "JOB", "SO_U5")
F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
F.Data.DataTable.AddColumn("WOSOINV", "C116", "String", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C88", "C116")
F.Data.Dictionary.Close("dictTemp")

F.Data.DataTable.Close("dtTopParent")
F.Data.DataTable.Close("dtJobHeaderFields")

F.Data.DataTable.AddExpressionColumn("WOSOINV", "C111", "String", "IIF([C22] = '', '', [C88] + '-000')")

'now load bom so line user fields
F.Data.DataTable.CreateFromSQL("dtSOLineFields", "Con", "select RTRIM(ORDER_NO) ORDER_NO, SUBSTRING(RECORD_NO, 1, 3) LINE, RTRIM(ORDER_NO) + '-' + SUBSTRING(RECORD_NO, 1, 3) as FULL_SO, RTRIM(USER_1) USER_1, RTRIM(USER_2) USER_2, RTRIM(USER_3) USER_3, RTRIM(USER_4) USER_4, RTRIM(USER_5) USER_5, RTRIM(INFO_1) INFO_1, RTRIM(INFO_2) INFO_2 from V_ORDER_LINES")

F.Data.DataTable.AddColumn("WOSOINV", "C122", "String", "")
F.Data.DataTable.AddColumn("WOSOINV", "C123", "String", "")
F.Data.DataTable.AddColumn("WOSOINV", "C124", "String", "")
F.Data.DataTable.AddColumn("WOSOINV", "C125", "String", "")
F.Data.DataTable.AddColumn("WOSOINV", "C126", "String", "")
F.Data.DataTable.AddColumn("WOSOINV", "C127", "String", "")
F.Data.DataTable.AddColumn("WOSOINV", "C128", "String", "")
F.Data.DataTable.AddColumn("WOSOINV", "C129", "String", "")
F.Data.DataTable.AddColumn("WOSOINV", "C130", "String", "")
F.Data.DataTable.AddColumn("WOSOINV", "C131", "String", "")
F.Data.DataTable.AddColumn("WOSOINV", "C132", "String", "")
F.Data.DataTable.AddColumn("WOSOINV", "C133", "String", "")
F.Data.DataTable.AddColumn("WOSOINV", "C134", "String", "")
F.Data.DataTable.AddColumn("WOSOINV", "C135", "String", "")

F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtSOLineFields", "FULL_SO", "USER_1")
F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C107", "C122")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C108", "C129")
F.Data.Dictionary.Close("dictTemp")

F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtSOLineFields", "FULL_SO", "USER_2")
F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C107", "C123")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C108", "C130")
F.Data.Dictionary.Close("dictTemp")

F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtSOLineFields", "FULL_SO", "USER_3")
F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C107", "C124")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C108", "C131")
F.Data.Dictionary.Close("dictTemp")

F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtSOLineFields", "FULL_SO", "USER_4")
F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C107", "C125")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C108", "C132")
F.Data.Dictionary.Close("dictTemp")

F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtSOLineFields", "FULL_SO", "USER_5")
F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C107", "C126")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C108", "C133")
F.Data.Dictionary.Close("dictTemp")

F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtSOLineFields", "FULL_SO", "INFO_1")
F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C107", "C127")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C108", "C134")
F.Data.Dictionary.Close("dictTemp")

F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtSOLineFields", "FULL_SO", "INFO_2")
F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C107", "C128")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C108", "C135")
F.Data.Dictionary.Close("dictTemp")

F.Data.DataTable.Close("dtSOLineFields")

F.Data.DataTable.AddColumn("WOSOINV", "C136", "String", "")
F.Data.DataTable.AddColumn("WOSOINV", "C137", "String", "")

'add WC list for BOM Parent Part and top level BOM Parent part
f.Intrinsic.Control.For(V.Local.iCnt, 0, V.DataTable.WOSOINV.RowCount--, 1)
	'direct BOM Parent WC list
	F.Intrinsic.Control.If(V.DataTable.WOSOINV(V.Local.iCnt).C22!FieldValTrim, !=, "")
		F.Intrinsic.String.Split(V.DataTable.WOSOINV(V.Local.iCnt).C22!FieldValTrim, "-", V.Local.sTempSplit)
		V.Local.sJob.Set(V.Local.sTempSplit(0).Trim)
		V.Local.sSuffix.Set(V.Local.sTempSplit(1).Trim)
		
		f.Intrinsic.String.Build("Select Rtrim(Part) as Part from Job_Operations where (LMO = 'L' or LMO = 'O') and PART <> 'TASK' and Job = '{0}' and Suffix = '{1}' and Part <> '' Order By  Seq asc", V.Local.sJob, V.Local.sSuffix, V.Local.sSQL)
		f.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sWCs)
		F.Intrinsic.String.Split(V.Local.sWCs, "#$#", V.Local.sWCs)
		F.Intrinsic.String.RemoveArrayDuplicates(V.Local.sWCs, V.Local.sWCs)
		F.Intrinsic.String.Join(V.Local.sWCs, "\", V.Local.sWCs)
		f.Data.DataTable.SetValue("WOSOINV", V.Local.iCnt, "C136", V.Local.sWCs)
	F.Intrinsic.Control.EndIf
	
	'top level BOM Parent WC list
	F.Intrinsic.Control.If(V.DataTable.WOSOINV(V.Local.iCnt).C111!FieldValTrim, !=, "")
		F.Intrinsic.String.Split(V.DataTable.WOSOINV(V.Local.iCnt).C111!FieldValTrim, "-", V.Local.sTempSplit)
		V.Local.sJob.Set(V.Local.sTempSplit(0).Trim)
		V.Local.sSuffix.Set(V.Local.sTempSplit(1).Trim)
		
		f.Intrinsic.String.Build("Select Rtrim(Part) as Part from Job_Operations where (LMO = 'L' or LMO = 'O') and PART <> 'TASK' and Job = '{0}' and Suffix = '{1}' and Part <> '' Order By  Seq asc", V.Local.sJob, V.Local.sSuffix, V.Local.sSQL)
		f.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sWCs)
		F.Intrinsic.String.Split(V.Local.sWCs, "#$#", V.Local.sWCs)
		F.Intrinsic.String.RemoveArrayDuplicates(V.Local.sWCs, V.Local.sWCs)
		F.Intrinsic.String.Join(V.Local.sWCs, "\", V.Local.sWCs)
		f.Data.DataTable.SetValue("WOSOINV", V.Local.iCnt, "C137", V.Local.sWCs)
	F.Intrinsic.Control.EndIf
f.Intrinsic.Control.Next(V.Local.iCnt)
V.Local.sTempSplit.Redim(0, 0)

'ship to values
F.Data.DataTable.CreateFromSQL("dtShipFields", "Con", "select RTRIM(ORDER_NO) ORDER_NO, RTRIM(ORDER_SHIP_ID) ORDER_SHIP_ID, RTRIM(NAME_CUSTOMER_SHIP) NAME_CUSTOMER_SHIP, RTRIM(ADDRESS_1_SHIP) ADDRESS_1_SHIP, RTRIM(ADDRESS_2_SHIP) ADDRESS_2_SHIP, RTRIM(ADDRESS_3_SHIP) ADDRESS_3_SHIP, RTRIM(ADDRESS_4_SHIP) ADDRESS_4_SHIP, RTRIM(ADDRESS_5_SHIP) ADDRESS_5_SHIP, RTRIM(CITY_SHIP) CITY_SHIP, RTRIM(STATE_SHIP) STATE_SHIP, RTRIM(CODE_ZIP_SHIP) CODE_ZIP_SHIP, RTRIM(COUNTRY_SHIP) COUNTRY_SHIP, RTRIM(ATTENTION_SHIP) ATTENTION_SHIP from V_ORDER_SHIP_TO")

F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtShipFields", "ORDER_NO", "ORDER_SHIP_ID")
F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
F.Data.DataTable.AddColumn("WOSOINV", "C138", "String", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C63", "C138")
F.Data.DataTable.AddColumn("WOSOINV", "C150", "String", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C104", "C150")
F.Data.DataTable.AddColumn("WOSOINV", "C162", "String", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C103", "C162")
F.Data.Dictionary.Close("dictTemp")

F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtShipFields", "ORDER_NO", "NAME_CUSTOMER_SHIP")
F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
F.Data.DataTable.AddColumn("WOSOINV", "C139", "String", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C63", "C139")
F.Data.DataTable.AddColumn("WOSOINV", "C151", "String", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C104", "C151")
F.Data.DataTable.AddColumn("WOSOINV", "C163", "String", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C103", "C163")
F.Data.Dictionary.Close("dictTemp")

F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtShipFields", "ORDER_NO", "ADDRESS_1_SHIP")
F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
F.Data.DataTable.AddColumn("WOSOINV", "C140", "String", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C63", "C140")
F.Data.DataTable.AddColumn("WOSOINV", "C152", "String", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C104", "C152")
F.Data.DataTable.AddColumn("WOSOINV", "C164", "String", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C103", "C164")
F.Data.Dictionary.Close("dictTemp")

F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtShipFields", "ORDER_NO", "ADDRESS_2_SHIP")
F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
F.Data.DataTable.AddColumn("WOSOINV", "C141", "String", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C63", "C141")
F.Data.DataTable.AddColumn("WOSOINV", "C153", "String", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C104", "C153")
F.Data.DataTable.AddColumn("WOSOINV", "C165", "String", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C103", "C165")
F.Data.Dictionary.Close("dictTemp")

F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtShipFields", "ORDER_NO", "ADDRESS_3_SHIP")
F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
F.Data.DataTable.AddColumn("WOSOINV", "C142", "String", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C63", "C142")
F.Data.DataTable.AddColumn("WOSOINV", "C154", "String", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C104", "C154")
F.Data.DataTable.AddColumn("WOSOINV", "C166", "String", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C103", "C166")
F.Data.Dictionary.Close("dictTemp")

F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtShipFields", "ORDER_NO", "ADDRESS_4_SHIP")
F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
F.Data.DataTable.AddColumn("WOSOINV", "C143", "String", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C63", "C143")
F.Data.DataTable.AddColumn("WOSOINV", "C155", "String", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C104", "C155")
F.Data.DataTable.AddColumn("WOSOINV", "C167", "String", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C103", "C167")
F.Data.Dictionary.Close("dictTemp")

F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtShipFields", "ORDER_NO", "ADDRESS_5_SHIP")
F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
F.Data.DataTable.AddColumn("WOSOINV", "C144", "String", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C63", "C144")
F.Data.DataTable.AddColumn("WOSOINV", "C156", "String", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C104", "C156")
F.Data.DataTable.AddColumn("WOSOINV", "C168", "String", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C103", "C168")
F.Data.Dictionary.Close("dictTemp")

F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtShipFields", "ORDER_NO", "CITY_SHIP")
F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
F.Data.DataTable.AddColumn("WOSOINV", "C145", "String", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C63", "C145")
F.Data.DataTable.AddColumn("WOSOINV", "C157", "String", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C104", "C157")
F.Data.DataTable.AddColumn("WOSOINV", "C169", "String", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C103", "C169")
F.Data.Dictionary.Close("dictTemp")

F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtShipFields", "ORDER_NO", "STATE_SHIP")
F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
F.Data.DataTable.AddColumn("WOSOINV", "C146", "String", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C63", "C146")
F.Data.DataTable.AddColumn("WOSOINV", "C158", "String", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C104", "C158")
F.Data.DataTable.AddColumn("WOSOINV", "C170", "String", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C103", "C170")
F.Data.Dictionary.Close("dictTemp")

F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtShipFields", "ORDER_NO", "CODE_ZIP_SHIP")
F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
F.Data.DataTable.AddColumn("WOSOINV", "C147", "String", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C63", "C147")
F.Data.DataTable.AddColumn("WOSOINV", "C159", "String", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C104", "C159")
F.Data.DataTable.AddColumn("WOSOINV", "C171", "String", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C103", "C171")
F.Data.Dictionary.Close("dictTemp")

F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtShipFields", "ORDER_NO", "COUNTRY_SHIP")
F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
F.Data.DataTable.AddColumn("WOSOINV", "C148", "String", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C63", "C148")
F.Data.DataTable.AddColumn("WOSOINV", "C160", "String", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C104", "C160")
F.Data.DataTable.AddColumn("WOSOINV", "C172", "String", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C103", "C172")
F.Data.Dictionary.Close("dictTemp")

F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtShipFields", "ORDER_NO", "ATTENTION_SHIP")
F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
F.Data.DataTable.AddColumn("WOSOINV", "C149", "String", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C63", "C149")
F.Data.DataTable.AddColumn("WOSOINV", "C161", "String", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C104", "C161")
F.Data.DataTable.AddColumn("WOSOINV", "C173", "String", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C103", "C173")
F.Data.Dictionary.Close("dictTemp")

F.Data.DataTable.Close("dtShipFields")

'grab WG
F.Data.Dictionary.CreateFromSQL("dictTemp", "Con", "select RTRIM(WORKCENTER), RTRIM(WORKGROUP) from V_WORKGROUP_LINE")
F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
F.Data.DataTable.AddColumn("WOSOINV", "C205", "String", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "C91", "C205")
F.Data.Dictionary.Close("dictTemp")

F.Intrinsic.Control.CallSub(GetOtherSequenceInfo)

'grab router info
'fields C206 - C211
'router is C03
F.Intrinsic.String.Build("select RTRIM(PROD_LINE) PRODUCT_LINE, SCRAP, RTRIM(CUSTOMER) ROUTER_CUSTOMER, RTRIM(PART_CUSTOMER) PART_CUSTOMER, RTRIM(DRAWING_CUSTOMER) DRAWING_CUSTOMER, RTRIM(SORT_1) SORT_1, RTRIM(SORT_2) SORT_2 from V_ROUTER_HEADER where ROUTER = '{0}'", V.DataTable.WOSOINV(0).C03!FieldValTrim, V.Local.sSQL)
F.Data.DataTable.CreateFromSQL("dtRouterInfo", "Con", V.Local.sSQL)

F.Intrinsic.Control.If(V.DataTable.dtRouterInfo.RowCount, >, 0)
	F.Data.DataTable.AddColumn("WOSOINV", "C206", "String", V.DataTable.dtRouterInfo(0).PRODUCT_LINE!FieldValTrim)
	F.Data.DataTable.AddColumn("WOSOINV", "C207", "Float", V.DataTable.dtRouterInfo(0).SCRAP!FieldValFloat)
	F.Data.DataTable.AddColumn("WOSOINV", "C208", "String", V.DataTable.dtRouterInfo(0).ROUTER_CUSTOMER!FieldValTrim)
	F.Data.DataTable.AddColumn("WOSOINV", "C209", "String", V.DataTable.dtRouterInfo(0).PART_CUSTOMER!FieldValTrim)
	F.Data.DataTable.AddColumn("WOSOINV", "C210", "String", V.DataTable.dtRouterInfo(0).DRAWING_CUSTOMER!FieldValTrim)
	F.Data.DataTable.AddColumn("WOSOINV", "C211", "String", V.DataTable.dtRouterInfo(0).SORT_1!FieldValTrim)
	F.Data.DataTable.AddColumn("WOSOINV", "C212", "String", V.DataTable.dtRouterInfo(0).SORT_2!FieldValTrim)
F.Intrinsic.Control.Else
	F.Data.DataTable.AddColumn("WOSOINV", "C206", "String", "")
	F.Data.DataTable.AddColumn("WOSOINV", "C207", "Float", 0)
	F.Data.DataTable.AddColumn("WOSOINV", "C208", "String", "")
	F.Data.DataTable.AddColumn("WOSOINV", "C209", "String", "")
	F.Data.DataTable.AddColumn("WOSOINV", "C210", "String", "")
	F.Data.DataTable.AddColumn("WOSOINV", "C211", "String", "")
	F.Data.DataTable.AddColumn("WOSOINV", "C212", "String", "")
F.Intrinsic.Control.EndIf

F.Data.DataTable.Close("dtRouterInfo")

'long part fields
'part fields
F.Data.DataTable.AddColumn("WOSOINV", "C214", "String", "")
F.Data.DataTable.AddColumn("WOSOINV", "C215", "String", "")

'mat fields
F.Data.DataTable.AddColumn("WOSOINV", "C216", "String", "")
F.Data.DataTable.AddColumn("WOSOINV", "C217", "String", "")

'BOM Parent fields
F.Data.DataTable.AddColumn("WOSOINV", "C218", "String", "")
F.Data.DataTable.AddColumn("WOSOINV", "C219", "String", "")

'TOP Bom parent fields
F.Data.DataTable.AddColumn("WOSOINV", "C220", "String", "")
F.Data.DataTable.AddColumn("WOSOINV", "C221", "String", "")

F.Global.General.ReadOption(400861, 0, False, 0, V.Local.bLongPart)
	F.Intrinsic.Control.If(V.Local.bLongPart.Not)
		F.Global.General.ReadOption(400861, 0, False, 4, V.Local.bLongPart)
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(V.Local.bLongPart)
		F.Data.DataTable.AddDisplayPartColumn("WOSOINV", 0, "C05", "C214", "C215")
		F.Data.DataTable.AddDisplayPartColumn("WOSOINV", 0, "C33", "C215", "C216")
		F.Data.DataTable.AddDisplayPartColumn("WOSOINV", 0, "C101", "C217", "C218")
		F.Data.DataTable.AddDisplayPartColumn("WOSOINV", 0, "C109", "C219", "C220")
	F.Intrinsic.Control.EndIf

GUI.FormExportMaintenance.gsgcLegend.SuspendLayout
GUI.FormExportMaintenance.gsgcLegend.Visible(False)

F.Intrinsic.Control.For(V.Local.icount, 1, V.DataTable.dtLegend.RowCount--, 1)
	F.Intrinsic.Control.if(V.Local.icount, <, 10)
		F.intrinsic.String.Build("0{0}", V.Local.icount.String, V.Local.sCount)
	F.Intrinsic.Control.Else
		V.Local.sCount.Set(V.Local.icount.String)
	F.Intrinsic.Control.EndIf
	F.Data.DataTable.SetValue("dtLegend", V.Local.icount, "Value", V.DataTable.WOSOINV(0).C[V.Local.sCount]!fieldVal)
	
F.Intrinsic.Control.Next(V.Local.icount)

V.Local.dTemp.Set(V.DataTable.WOSOINV(0).C00!FieldVal)
F.Data.DataTable.SetValue("dtLegend", 0, "Value", V.Local.dTemp.FormatMM/DD/YYYY)
V.Local.dTemp.Set(V.DataTable.WOSOINV(0).C92!FieldVal)
F.Data.DataTable.SetValue("dtLegend", 92, "Value", V.Local.dTemp.FormatMM/DD/YYYY)

GUI.FormExportMaintenance.gsgcLegend.Visible(True)
GUI.FormExportMaintenance.gsgcLegend.ResumeLayout

GUI.FormExportMaintenance..Enabled(True)
F.Intrinsic.UI.CloseWaitDialog

F.Data.DataTable.Close("WOSOINV")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.txtWorkOrder_Change.End

Program.Sub.GetFilter.Start
'pass DATATABLE, FIELD (*!* delimiter)
'returns filter
'returns a list of the distinct values of that field delimited by ','

F.Intrinsic.Control.Try

V.Local.iCounter.Declare(Long, 0)
V.Local.sFilter.Declare(String)
V.Local.sDataView.Declare(String, "dvGetFilterTemp_0")
V.Local.sDataViewFilter.Declare(String)

'make sure no duplicate dataview
F.Intrinsic.Control.DoUntil(V.DataView.[V.Args.DataTable]![V.Local.sDataView].Exists, =, False)
	F.Intrinsic.String.Build("dvGetFilterTemp_{0}", V.Local.iCounter.++, V.Local.sDataView)
F.Intrinsic.Control.Loop

'create in filter
F.Intrinsic.String.Build("Convert([{0}], 'System.String') <> ''", V.Args.Field, V.Local.sDataViewFilter)
F.Data.DataView.Create(V.Args.DataTable, V.Local.sDataView, 22, V.Local.sDataViewFilter, "")
F.Data.DataView.ToString(V.Args.DataTable, V.Local.sDataView, V.Args.Field, "***NODELIMITER***", "','", V.Local.sFilter)
F.Data.DataView.Close(V.Args.DataTable, V.Local.sDataView)

'remove duplicates
F.Intrinsic.String.Split(V.Local.sFilter, "','", V.Local.sFilter)
F.Intrinsic.String.RemoveArrayDuplicates(V.Local.sFilter, V.Local.sFilter)
F.Intrinsic.String.Join(V.Local.sFilter, "','", V.Local.sFilter)
V.Local.sFilter.RedimPreserve(0,0)

F.Intrinsic.Variable.AddRV("FILTER", V.Local.sFilter)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.GetFilter.End

Program.Sub.GetOtherSequenceInfo.Start
F.Intrinsic.Control.Try

V.Local.sSQL.Declare(String)

F.Intrinsic.Control.CallSub(GetFilter, "DataTable", "WOSOINV", "Field", "C02")

'get job information
F.Intrinsic.String.Build("SELECT A.JOB, A.SUFFIX, A.SEQ, RTRIM(A.JOB)+'-'+RTRIM(A.SUFFIX)+'-'+RTRIM(A.SEQ) as JSS, RTRIM(A.JOB)+'-'+RTRIM(A.SUFFIX) JS, A.UNITS_COMPLETE, A.UNITS_SCRAP, A.FLAG_CLOSED, RTRIM(A.OPERATION) as OPERATION, RTRIM(A.PART) as WC, RTRIM(A.DESCRIPTION) DESCRIPTION, RTRIM(ROUTER_SEQ) ROUTER_SEQ, UNITS_OPEN, HOURS_ESTIMATED, DATE_START, DATE_DUE, RTRIM(IF(IsNull(FLAG_CLOSED, '') = 'Y', 'Y', 'N')) FLAG_CLOSED FROM V_JOB_OPERATIONS A WHERE A.LMO = 'L' and JS in ('{0}') and SEQ < '900000' ORDER BY JSS", V.Args.Filter, V.Local.sSQL)

F.Data.DataTable.CreateFromSQL("dtPrevSeq", "Con", V.Local.sSQL)
F.Data.DataTable.AddColumn("dtPrevSeq", "PREVIOUS_LABOR_INDEX", "Long", -1)
F.Data.DataTable.AddExpressionColumn("dtPrevSeq", "LABOR_INDEX", "Long", "PREVIOUS_LABOR_INDEX + 1")
F.Data.DataTable.SetValueOnNextLine("dtPrevSeq", "LABOR_INDEX", "PREVIOUS_LABOR_INDEX", "JS")

'fill labor index
F.Data.Dictionary.CreateFromDataTable("dictLaborIndex", "dtPrevSeq", "JSS", "LABOR_INDEX")
F.Data.Dictionary.SetDefaultReturn("dictLaborIndex", -2)
F.Data.DataTable.AddColumn("WOSOINV", "LABOR_INDEX", "Long")
F.Data.DataTable.AddColumn("WOSOINV", "Seq_Format", "String")
F.Data.DataTable.SetValueFormat("WOSOINV", -1, "SEQ", "Seq_Format", "000000")
F.Data.DataTable.AddExpressionColumn("WOSOINV", "JSS", "String", "TRIM([JOB]) + '-' + TRIM([SUFFIX]) + '-' + TRIM([SEQ_FORMAT])")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictLaborIndex", "JSS", "LABOR_INDEX")
F.Data.Dictionary.Close("dictLaborIndex")

F.Data.DataTable.AddExpressionColumn("WOSOINV", "PREV_LABOR_INDEX", "Long", "[LABOR_INDEX] - 1")
F.Data.DataTable.AddExpressionColumn("WOSOINV", "NEXT_LABOR_INDEX", "Long", "[LABOR_INDEX] + 1")
F.Data.DataTable.AddExpressionColumn("WOSOINV", "JS", "String", "Trim(JOB) + '-' + TRIM(SUFFIX)")
F.Data.DataTable.AddExpressionColumn("WOSOINV", "JSLaborIndex", "String", "JS + '-' + [LABOR_INDEX]")
F.Data.DataTable.AddExpressionColumn("WOSOINV", "JSPrevLaborIndex", "String", "JS + '-' + [PREV_LABOR_INDEX]")
F.Data.DataTable.AddExpressionColumn("WOSOINV", "JSNextLaborIndex", "String", "JS + '-' + [NEXT_LABOR_INDEX]")
F.Data.DataTable.AddExpressionColumn("dtPrevSeq", "JSLaborIndex", "String", "Trim(JOB) + '-' + TRIM(SUFFIX) + '-' + [LABOR_INDEX]")

F.Data.DataTable.AddColumn("WOSOINV", "C174", "String", "")
F.Data.DataTable.AddColumn("WOSOINV", "C175", "String", "")
F.Data.DataTable.AddColumn("WOSOINV", "C176", "String", "")
F.Data.DataTable.AddColumn("WOSOINV", "C177", "String", "")
F.Data.DataTable.AddColumn("WOSOINV", "C178", "String", "")
F.Data.DataTable.AddColumn("WOSOINV", "C179", "String", "")
F.Data.DataTable.AddColumn("WOSOINV", "C180", "String", "")
F.Data.DataTable.AddColumn("WOSOINV", "C181", "String", "")
F.Data.DataTable.AddColumn("WOSOINV", "C182", "String", "")
F.Data.DataTable.AddColumn("WOSOINV", "C183", "String", "")
F.Data.DataTable.AddColumn("WOSOINV", "C184", "String", "")
F.Data.DataTable.AddColumn("WOSOINV", "C185", "String", "")
F.Data.DataTable.AddColumn("WOSOINV", "C186", "String", "")
F.Data.DataTable.AddColumn("WOSOINV", "C187", "String", "")
F.Data.DataTable.AddColumn("WOSOINV", "C188", "String", "")
F.Data.DataTable.AddColumn("WOSOINV", "C189", "String", "")
F.Data.DataTable.AddColumn("WOSOINV", "C190", "String", "")
F.Data.DataTable.AddColumn("WOSOINV", "C191", "String", "")
F.Data.DataTable.AddColumn("WOSOINV", "C192", "String", "")
F.Data.DataTable.AddColumn("WOSOINV", "C193", "String", "")
F.Data.DataTable.AddColumn("WOSOINV", "C194", "String", "")
F.Data.DataTable.AddColumn("WOSOINV", "C195", "String", "")
F.Data.DataTable.AddColumn("WOSOINV", "C196", "String", "")
F.Data.DataTable.AddColumn("WOSOINV", "C197", "String", "")

'fill Operation
F.Data.Dictionary.CreateFromDataTable("dictPrevOP", "dtPrevSeq", "JSLaborIndex", "Operation")
F.Data.Dictionary.SetDefaultReturn("dictPrevOP", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictPrevOP", "JSPrevLaborIndex", "C188")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictPrevOP", "JSNextLaborIndex", "C176")
F.Data.Dictionary.Close("dictPrevOP")

'fill WC
F.Data.Dictionary.CreateFromDataTable("dictWC", "dtPrevSeq", "JSLaborIndex", "WC")
F.Data.Dictionary.SetDefaultReturn("dictWC", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictWC", "JSPrevLaborIndex", "C189")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictWC", "JSNextLaborIndex", "C177")
F.Data.Dictionary.Close("dictWC")

'fill sequence
F.Data.Dictionary.CreateFromDataTable("dictPrevSeq", "dtPrevSeq", "JSLaborIndex", "SEQ")
F.Data.Dictionary.SetDefaultReturn("dictPrevSeq", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictPrevSeq", "JSPrevLaborIndex", "C186")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictPrevSeq", "JSNextLaborIndex", "C174")
F.Data.Dictionary.Close("dictPrevSeq")

'fill units complete
F.Data.Dictionary.CreateFromDataTable("dictPrevQty", "dtPrevSeq", "JSLaborIndex", "UNITS_COMPLETE")
F.Data.Dictionary.SetDefaultReturn("dictPrevQty", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictPrevQty", "JSPrevLaborIndex", "C195")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictPrevQty", "JSNextLaborIndex", "C183")
F.Data.Dictionary.Close("dictPrevQty")

'fill scrap
F.Data.Dictionary.CreateFromDataTable("dictPrevScrap", "dtPrevSeq", "JSLaborIndex", "UNITS_SCRAP")
F.Data.Dictionary.SetDefaultReturn("dictPrevScrap", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictPrevScrap", "JSPrevLaborIndex", "C196")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictPrevScrap", "JSNextLaborIndex", "C184")
F.Data.Dictionary.Close("dictPrevScrap")

'fill closed
F.Data.Dictionary.CreateFromDataTable("dictPrevClsd", "dtPrevSeq", "JSLaborIndex", "FLAG_CLOSED")
F.Data.Dictionary.SetDefaultReturn("dictPrevClsd", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictPrevClsd", "JSPrevLaborIndex", "C197")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictPrevClsd", "JSNextLaborIndex", "C185")
F.Data.Dictionary.Close("dictPrevClsd")

'fill description
F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtPrevSeq", "JSLaborIndex", "DESCRIPTION")
F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "JSPrevLaborIndex", "C187")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "JSNextLaborIndex", "C175")
F.Data.Dictionary.Close("dictTemp")

'fill router sequence
F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtPrevSeq", "JSLaborIndex", "ROUTER_SEQ")
F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "JSPrevLaborIndex", "C190")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "JSNextLaborIndex", "C178")
F.Data.Dictionary.Close("dictTemp")

'fill run quantity
F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtPrevSeq", "JSLaborIndex", "UNITS_OPEN")
F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "JSPrevLaborIndex", "C191")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "JSNextLaborIndex", "C179")
F.Data.Dictionary.Close("dictTemp")

'fill estimated hours
F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtPrevSeq", "JSLaborIndex", "HOURS_ESTIMATED")
F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "JSPrevLaborIndex", "C192")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "JSNextLaborIndex", "C180")
F.Data.Dictionary.Close("dictTemp")

'fill start date
F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtPrevSeq", "JSLaborIndex", "DATE_START")
F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "JSPrevLaborIndex", "C193")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "JSNextLaborIndex", "C181")
F.Data.Dictionary.Close("dictTemp")

'fill due date
F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtPrevSeq", "JSLaborIndex", "DATE_DUE")
F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "JSPrevLaborIndex", "C194")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "JSNextLaborIndex", "C182")
F.Data.Dictionary.Close("dictTemp")

'fill closed
F.Data.Dictionary.CreateFromDataTable("dictTemp", "dtPrevSeq", "JSLaborIndex", "FLAG_CLOSED")
F.Data.Dictionary.SetDefaultReturn("dictTemp", "")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "JSPrevLaborIndex", "C197")
F.Data.DataTable.FillFromDictionary("WOSOINV", "dictTemp", "JSNextLaborIndex", "C185")
F.Data.Dictionary.Close("dictTemp")

F.Data.DataTable.Close("dtPrevSeq")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.GetOtherSequenceInfo.End

Program.Sub.LoadLegend.Start
F.Intrinsic.Control.Try

V.Local.sPath.Declare(String)
V.Local.sLegend.Declare(String)
V.Local.bExists.Declare(Boolean)

F.Intrinsic.String.Build("{0}\GCG_4980_NEST_XPMAINT_FIELD_LEGEND.dat", V.Ambient.ScriptPath, V.Local.sPath)
F.Intrinsic.File.File2String(V.Local.sPath, V.Local.sLegend)

F.Intrinsic.Control.If(V.DataTable.dtLegend.Exists)
	F.Data.DataTable.Close("dtLegend")
F.Intrinsic.Control.EndIf

F.Data.DataTable.CreateFromString("dtLegend", V.Local.sLegend, "INDEX*!*FIELD*!*CATEGORY", "STRING*!*STRING*!*STRING", "-", V.Ambient.NewLine, True)
F.Data.DataTable.AddColumn("dtLegend", "Value", "String", "")

F.Intrinsic.Control.If(V.DataTable.dtLegend(V.DataTable.dtLegend.RowCount--).INDEX!FieldValTrim, =, "")
	F.Data.DataTable.DeleteRow("dtLegend", V.DataTable.dtLegend.RowCount--)
	F.Data.DataTable.AcceptChanges("dtLegend")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(LoadLegendGrid)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.LoadLegend.End

Program.Sub.LoadExportFieldDictionary.Start
'create field dictionary

F.Intrinsic.Control.Try

V.Local.bExists.Declare(Boolean, False)
V.Local.sSQL.Declare(String)
V.Local.iCounter.Declare(Long)
V.Local.sValue.Declare(String)

F.Data.Dictionary.Exists("dictFieldDescriptions", V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists)
	F.Data.Dictionary.Close("dictFieldDescriptions")
F.Intrinsic.Control.EndIf
F.Data.Dictionary.CreateFromDataTable("dictFieldDescriptions", "dtLegend", "INDEX", "FIELD")
F.Data.Dictionary.SetDefaultReturn("dictFieldDescriptions", "")

'add expression/static columns
F.Intrinsic.String.Build("select RTRIM(SETTING) SETTING, RTRIM(VALUE) VALUE from GCG_4980_SETTINGS where PROFILE = '{0}' and TYPE = 'EXPORT_FIELD'", V.Global.sProfile, V.Local.sSQL)
F.Data.DataTable.CreateFromSQL("dtExtraFieldsTemp", "Con", V.Local.sSQL)

F.Intrinsic.Control.For(V.Local.iCounter, 0, V.DataTable.dtExtraFieldsTemp.RowCount--, 1)
	F.Intrinsic.String.Split(V.DataTable.dtExtraFieldsTemp(V.Local.iCounter).VALUE!FieldValTrim, "@*!*@", V.Local.sValue)
	V.Local.sValue.RedimPreserve(0, 1)
	F.Data.Dictionary.AddItem("dictFieldDescriptions", V.DataTable.dtExtraFieldsTemp(V.Local.iCounter).SETTING!FieldValTrim, V.Local.sValue(1))
F.Intrinsic.Control.Next(V.Local.iCounter)
V.Local.sValue.Redim(0, 0)
F.Data.DataTable.Close("dtExtraFieldsTemp")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.LoadExportFieldDictionary.End

Program.Sub.LoadLegendGrid.Start
F.Intrinsic.Control.Try

GUI.FormExportMaintenance.gsgcLegend.AddGridviewFromDataTable("gvLegend", "dtLegend")

GUI.FormExportMaintenance.gsgcLegend.SetGridViewProperty("gvLegend", "ReadOnly", True)
GUI.FormExportMaintenance.gsgcLegend.SetGridViewProperty("gvLegend", "Showgrouppanel", True)
GUI.FormExportMaintenance.gsgcLegend.SetGridViewProperty("gvLegend", "OptionsFindAlwaysVisible", True)

GUI.FormExportMaintenance.gsgcLegend.SetColumnProperty("gvLegend", "Category", "GroupIndex", 0)

GUI.FormExportMaintenance.gsgcLegend.SetColumnProperty("gvLegend", "INDEX", "HeaderFontBold", True)
GUI.FormExportMaintenance.gsgcLegend.SetColumnProperty("gvLegend", "Category", "HeaderFontBold", True)
GUI.FormExportMaintenance.gsgcLegend.SetColumnProperty("gvLegend", "FIELD", "HeaderFontBold", True)
GUI.FormExportMaintenance.gsgcLegend.SetColumnProperty("gvLegend", "VALUE", "HeaderFontBold", True)

GUI.FormExportMaintenance.gsgcLegend.SetColumnProperty("gvLegend", "INDEX", "AllowEdit", False)
GUI.FormExportMaintenance.gsgcLegend.SetColumnProperty("gvLegend", "Category", "AllowEdit", False)
GUI.FormExportMaintenance.gsgcLegend.SetColumnProperty("gvLegend", "FIELD", "AllowEdit", False)
GUI.FormExportMaintenance.gsgcLegend.SetColumnProperty("gvLegend", "VALUE", "AllowEdit", False)

GUI.FormExportMaintenance.gsgcLegend.SetColumnProperty("gvLegend", "Index", "Caption", "Index")
GUI.FormExportMaintenance.gsgcLegend.SetColumnProperty("gvLegend", "Category", "Caption", "Category")
GUI.FormExportMaintenance.gsgcLegend.SetColumnProperty("gvLegend", "FIELD", "Caption", "Field")
GUI.FormExportMaintenance.gsgcLegend.SetColumnProperty("gvLegend", "VALUE", "Caption", "Value")

GUI.FormExportMaintenance.gsgcLegend.SetColumnProperty("gvLegend", "INDEX", "MinWidth", 30)
GUI.FormExportMaintenance.gsgcLegend.SetColumnProperty("gvLegend", "INDEX", "MaxWidth", 40)
GUI.FormExportMaintenance.gsgcLegend.SetColumnProperty("gvLegend", "Category", "MinWidth", 40)
GUI.FormExportMaintenance.gsgcLegend.SetColumnProperty("gvLegend", "FIELD", "MinWidth", 120)
GUI.FormExportMaintenance.gsgcLegend.SetColumnProperty("gvLegend", "FIELD", "MaxWidth", 160)
GUI.FormExportMaintenance.gsgcLegend.SetColumnProperty("gvLegend", "VALUE", "MinWidth", 120)

GUI.FormExportMaintenance.gsgcLegend.SetColumnProperty("gvLegend", "INDEX", "CellHAlignment", "Center")
GUI.FormExportMaintenance.gsgcLegend.SetColumnProperty("gvLegend", "INDEX", "HeaderHAlignment", "Center")

GUI.FormExportMaintenance.gsgcLegend.SetColumnProperty("gvLegend", "INDEX", "CellFontBold", True)

GUI.FormExportMaintenance.gsgcLegend.SetColumnProperty("gvLegend", "INDEX", "HeaderForeColor", V.Color.PRI-GSS-00)
GUI.FormExportMaintenance.gsgcLegend.SetColumnProperty("gvLegend", "Category", "HeaderForeColor", V.Color.PRI-GSS-00)
GUI.FormExportMaintenance.gsgcLegend.SetColumnProperty("gvLegend", "Field", "HeaderForeColor", V.Color.PRI-GSS-00)
GUI.FormExportMaintenance.gsgcLegend.SetColumnProperty("gvLegend", "Value", "HeaderForeColor", V.Color.PRI-GSS-00)

GUI.FormExportMaintenance.gsgcLegend.MainView("gvLegend")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.LoadLegendGrid.End

Program.Sub.cmdWOBrw_Click.Start
F.Intrinsic.Control.Try

V.Local.sSql.Declare
V.local.sTitles.Declare
V.Local.iWidths.Declare
V.Local.sRet.Declare
V.Local.sDisp.Declare

'create browser
V.Local.sSql.Set("select Job, Suffix, Seq,Description from V_JOB_Operations where flag_closed <> 'Y' and LMO = 'L' and SEQ < '995000'")
F.Intrinsic.String.Split("Job*!*Suffix*!*Seq*!*Description","*!*",V.Local.sTitles)
F.Intrinsic.String.Split("300*!*300*!*300*!*600","*!*",V.Local.iWidths)
F.Intrinsic.UI.SetBrowserHotTypeAhead(True)
f.Intrinsic.UI.Browser("Select Labor Sequence","Con",V.Local.sSql,V.Local.sTitles,V.Local.iWidths,V.Local.sRet)

'handle return
F.Intrinsic.Control.If(V.Local.sRet,=,"***CANCEL***")
	f.Intrinsic.Control.ExitSub
f.Intrinsic.Control.else
	f.Intrinsic.String.Split(V.Local.sRet,"*!*",V.local.sRet)
	
	f.Intrinsic.String.Build("{0}-{1}-{2}",V.Local.sRet(0),V.Local.sRet(1),V.Local.sRet(2),V.Local.sDisp)
	
	GUI.FormExportMaintenance.txtWorkOrder.Text(V.Local.sDisp)
	
f.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.cmdWOBrw_Click.End

Program.Sub.cmdSaveMap_Click.Start
F.Intrinsic.Control.Try

V.Local.sXPtypeExist.Declare
V.Local.sXPPath.Declare
V.Local.sDxfPath.Declare
V.Local.sFilter.Declare
V.Local.iRet.Declare
V.Local.ssql.Declare
V.Local.sScriptPath.Declare
V.Local.sScriptName.Declare
V.Local.sFilePath.Declare
V.Local.bExists.Declare
V.Local.sFileName.Declare(String)
V.Local.sFileNameFriendly.Declare(String)
V.Local.iCounter.Declare(Long)
V.Local.sMessage.Declare(String)

F.Intrinsic.Control.If(V.Screen.FormExportMaintenance!chkStaticFile.checkedAsBoolean)
	V.Local.sFileName.Set(V.Screen.FormExportMaintenance!txtStaticFile.Text.Trim)
	F.Intrinsic.Control.If(V.Local.sFileName.Trim, =, "")
		F.Intrinsic.UI.Msgbox("The Static File Name option is selected but no file name is set. Please enter a file name before saving.")
		F.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.Else
		F.Intrinsic.File.MakeFilenameFriendly(V.Local.sFileName, V.Local.sFileNameFriendly)
		F.Intrinsic.Control.If(V.Local.sFileName, !=, V.Local.sFileNameFriendly)
			F.Intrinsic.UI.Msgbox("The Static file Name set is not a valid file name. Please enter a valid file name.")
			F.Intrinsic.Control.ExitSub
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

GUI.FormExportMaintenance..Enabled(False)

f.Intrinsic.String.Build("PROFILE = '{0}'",V.Global.sProfile,V.Local.sFilter)
f.Data.DataView.Create("dtProfiles","SavVw",22,V.Local.sFilter,"")

V.Local.sXPPath.Set(V.Screen.FormExportMaintenance!txtXPPath.text)
F.Data.DataView.SetValue("dtProfiles","SavVw",0,"EXPORT_FOLDER",V.Local.sXPPath.Trim)

f.Data.DataView.SetValue("dtProfiles","SavVw",0,"FULL_PART_FLAG",V.Screen.FormExportMaintenance!chkFullPartPath.CheckedAsBoolean)
f.Data.DataView.SetValue("dtProfiles","SavVw",0,"FULL_PART_PATH",V.Screen.FormExportMaintenance!txtFullPartPath.text.trim)

F.Data.DataView.SetValue("dtProfiles", "SavVw", -1, "XP_ON_GENWO", V.Screen.FormExportMaintenance!chkUnattendedExport.CheckedAsBoolean)

f.Data.DataTable.AcceptChanges("dtProfiles")

f.Data.DataTable.SaveToDB("dtProfiles","Con","GCG_4980_NESTPROFILE","PROFILE",256,"PROFILE@!@PROFILE*!*XP_ON_GENWO@!@XP_ON_GENWO*!*CUSTOM_EXPORT@!@CUSTOM_EXPORT*!*EXPORT_FOLDER@!@EXPORT_FOLDER*!*FULL_PART_FLAG@!@FULL_PART_FLAG*!*FULL_PART_PATH@!@FULL_PART_PATH")
f.Data.DataView.Close("dtProfiles","SavVw")

f.Data.DataTable.AddExpressionColumn("dtMapping","CHK","String","ISNULL(MAPID,'N')")
f.Data.Dataview.Create("dtMapping","TempVw",22,"MAPID = '' OR CHK = 'N'","")

f.Data.DataView.SetValue("dtMapping","TempVw",-1,"MAPID","N_A")
f.Data.DataTable.AcceptChanges("dtMapping")
f.data.DataTable.FillFromDictionary("dtMapping","dictFieldDescriptions","MAPID","DESCR")
f.Data.DataTable.RemoveColumn("dtMapping","CHK")

'set profile and type
f.Data.DataView.SetFilter("dtMapping","TempVw","")
f.Data.DataView.SetValue("dtMapping","TempVw",-1,"PROFILE",V.global.sProfile.Trim,"XPTYPE",V.Global.sXPtype.Trim)

'remove any invalid mappings
F.Intrinsic.Control.CallSub(LoadExtraFields)
F.Data.DataView.Create("dtExtraFields", "dvExtraFields", 22)
F.Data.DataView.SetFilter("dtMapping", "TempVw", "MAPID like 'ST%' or MAPID like 'EX%'")
F.Intrinsic.Control.For(V.Local.iCounter, V.DataView.dtMapping!TempVw.RowCount--, 0, -1)
	F.Intrinsic.String.Build("TRIM(FIELD) = '{0}'", V.DataView.dtMapping!TempVw(V.Local.iCounter).MAPID!FieldValTrim, V.Local.sFilter)
	F.Data.DataView.SetFilter("dtExtraFields", "dvExtraFields", V.Local.sFilter)
	
	'if not found, remove it and let the user know
	F.Intrinsic.Control.If(V.DataView.dtExtraFields!dvExtraFields.RowCount, <, 1)
		F.Intrinsic.String.Build("Mapped field [{0}] was not found in field definitions. Removing from mapping.", V.DataView.dtMapping!TempVw(V.Local.iCounter).MAPID!FieldValTrim, V.Local.sMessage)
		F.Intrinsic.UI.Msgbox(V.Local.sMessage)
		
		F.Data.DataView.SetValue("dtMapping", "TempVw", V.Local.iCounter, "MAPID", "N_A")
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Next(V.Local.iCounter)
F.Data.DataView.Close("dtExtraFields", "dvExtraFields")

f.Data.DataView.Close("dtMapping","TempVw")

F.Intrinsic.String.Build("Delete from GCG_4980_NESTMAINT where PROFILE = '{0}'", V.Global.sProfile.Trim, V.Local.ssql)
F.ODBC.Connection!Con.Execute(V.Local.ssql)
f.Data.DataTable.SaveToDB("dtMapping","Con","GCG_4980_NESTMAINT","PROFILE*!*XPField*!*XML_PATH",128,"Enabled@!@Enabled*!*XPFIELD@!@XPFIELD*!*MAPID@!@MAPID*!*INDX@!@INDX*!*PROFILE@!@PROFILE*!*XML_PATH@!@XML_PATH*!*XPTYPE@!@XPTYPE")

'save extra settings
F.Data.DataTable.Create("dtSave")
F.Data.DataTable.AddColumn("dtSave", "PROFILE", "STRING")
F.Data.DataTable.AddColumn("dtSave", "TYPE", "STRING")
F.Data.DataTable.AddColumn("dtSave", "SETTING", "STRING")
F.Data.DataTable.AddColumn("dtSave", "VALUE", "STRING")

F.Data.DataTable.AddRow("dtSave", "PROFILE", V.Global.sProfile, "TYPE", "EXPORT_OPTION", "SETTING", "FILE_NAME", "VALUE", V.Screen.FormExportMaintenance!txtStaticFile.Text.Trim)
F.Data.DataTable.AddRow("dtSave", "PROFILE", V.Global.sProfile, "TYPE", "EXPORT_OPTION", "SETTING", "INCLUDE_EXPORTED", "VALUE", V.Screen.FormExportMaintenance!chkUnattendedExported.Value)
F.Data.DataTable.AddRow("dtSave", "PROFILE", V.Global.sProfile, "TYPE", "EXPORT_OPTION", "SETTING", "INCLUDE_HEADERS", "VALUE", V.Screen.FormExportMaintenance!chkHeaders.Value)
F.Data.DataTable.AddRow("dtSave", "PROFILE", V.Global.sProfile, "TYPE", "EXPORT_OPTION", "SETTING", "DATE_FORMAT", "VALUE", V.Screen.FormExportMaintenance!txtDateFormat.Text.Trim)
F.Data.DataTable.AddRow("dtSave", "PROFILE", V.Global.sProfile, "TYPE", "EXPORT_OPTION", "SETTING", "ADD_BENDING_STEP", "VALUE", V.Screen.FormExportMaintenance!chkBendingStep.CheckedAsBoolean)
F.Data.DataTable.AddRow("dtSave", "PROFILE", V.Global.sProfile, "TYPE", "EXPORT_OPTION", "SETTING", "BENDING_WORKCENTERS", "VALUE", V.Screen.FormExportMaintenance!txtBendingWorkcenters.Text.Trim)
F.Data.DataTable.AddRow("dtSave", "PROFILE", V.Global.sProfile, "TYPE", "EXPORT_OPTION", "SETTING", "ONLY_INCLUDE_UPDATED", "VALUE", V.Screen.FormExportMaintenance!chkOnlyIncludeRescheduled.CheckedAsBoolean)
F.Data.DataTable.AddRow("dtSave", "PROFILE", V.Global.sProfile, "TYPE", "EXPORT_OPTION", "SETTING", "BACKUP_EXPORT", "VALUE", V.Screen.FormExportMaintenance!chkBackupExport.CheckedAsBoolean)
F.Data.DataTable.AddRow("dtSave", "PROFILE", V.Global.sProfile, "TYPE", "EXPORT_OPTION", "SETTING", "UNATTENDED_FILTER", "VALUE", V.Screen.FormExportMaintenance!txtUnattendedFilter.Text.Trim)
F.Data.DataTable.AddRow("dtSave", "PROFILE", V.Global.sProfile, "TYPE", "EXPORT_OPTION", "SETTING", "OSEON_WORKPLAN", "VALUE", V.Screen.FormExportMaintenance!chkOseonWorkplan.CheckedAsBoolean)

F.Data.DataTable.SaveToDB("dtSave", "Con", "GCG_4980_SETTINGS", "PROFILE*!*TYPE*!*SETTING", 256)
F.Data.DataTable.Close("dtSave")

'now check hooks
F.Intrinsic.Control.CallSub(SetHooks)

GUI.FormExportMaintenance..Enabled(True)
GUI.FormExportMaintenance..SetFocus

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.cmdSaveMap_Click.End

Program.Sub.GsGCFieldMap_CellValueChanged.Start
F.Intrinsic.Control.Try

f.Intrinsic.Control.If(V.Args.Column,=,"MAPID")
	f.Data.DataTable.FillFromDictionary("dtMapping","dictFieldDescriptions","MAPID","DESCR")
f.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.GsGCFieldMap_CellValueChanged.End

Program.Sub.cmdBrowseFile_Click.Start
F.Intrinsic.Control.Try

V.local.sFile.Declare(string)
V.local.sFileName.Declare(string)

'open file dialog where you can only select png and return a value
F.intrinsic.UI.ShowOpenFileDialog("","G2U|*.g2u",V.Local.sFile)
'check if returned value is not cancel and load file name into text field followed by file path into metadata
f.Intrinsic.Control.If(V.Local.sFile,<>,"***CANCEL***")	
	GUI.FormExportMaintenance.txtCustomScript.Text(V.Local.sFile)
f.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.cmdBrowseFile_Click.End

Program.Sub.LoadMaintenanceScreen.Start
F.Intrinsic.Control.Try

V.Local.sFilePath.Declare
V.Local.sImpPath.Declare
V.Local.sFilter.Declare
V.Local.sCustom.Declare
V.Local.bExists.Declare
V.Local.sXPPath.Declare
V.Local.sRemPath.Declare
V.Local.bEnabled.Declare(Boolean)
V.Local.iRet.Declare(Long)
V.Local.bRemnants.Declare(Boolean, True)

GUI.FormExportMaintenance..Enabled(False)

F.Intrinsic.Control.CallSub(LoadExportFieldDictionary)
F.Intrinsic.Control.CallSub(LoadMap,"XPTYPE",V.Global.sXPtype)
F.Intrinsic.Control.CallSub(LoadImp)

f.Intrinsic.string.Build("PROFILE = '{0}'",V.Global.sProfile,V.Local.sFilter) 
f.Data.DataView.Create("dtProfiles","CheckVw",22,V.Local.sFilter,"")

f.Intrinsic.Control.If(V.DataView.dtProfiles!CheckVw.RowCount,>,0)
	
	GUI.FormExportMaintenance.txtXPPath.Text(V.DataView.dtProfiles!CheckVw(0).EXPORT_FOLDER!fieldvalTrim)
	F.Intrinsic.Control.CallSub(txtXPPath_LostFocus)
	
	GUI.FormExportMaintenance.chkFullPartPath.Value(V.DataView.dtProfiles!CheckVw(0).Full_Part_Flag!fieldval)
	GUI.FormExportMaintenance.txtFullPartPath.Text(V.DataView.dtProfiles!CheckVw(0).Full_Part_Path!fieldvalTrim)
	F.Intrinsic.Control.CallSub(chkFullPartPath_Click)
	
	'allowing load default for some types
	F.Intrinsic.Control.If(V.Global.sXPtype, =, "C", "OR", V.Global.sXPtype, =, "B", V.Global.sXPtype, =, "Y")
		GUI.FormExportMaintenance.cmdLoadDefaultFieldList.Enabled(True)
	F.Intrinsic.Control.Else
		GUI.FormExportMaintenance.cmdLoadDefaultFieldList.Enabled(False)
	F.Intrinsic.Control.EndIf
	
	'checking for field list ability
	F.Intrinsic.Control.If(V.Global.sXPtype, =, "B", "OR", V.Global.sXPtype, =, "Y")
		GUI.FormExportMaintenance.txtImportFields.Enabled(False)
		GUI.FormExportMaintenance.cmdLoadFieldList.Enabled(False)
	F.Intrinsic.Control.EndIf
	
	GUI.FormExportMaintenance.chkUnattendedExport.Value(V.DataView.dtProfiles!CheckVw(0).XP_ON_GENWO!fieldvalTrim)
	
	'Add bending step option
	F.Intrinsic.Control.If(V.Global.sXPtype, =, "Y")
		GUI.FormExportMaintenance.chkBendingStep.Enabled(True)
	F.Intrinsic.Control.Else
		GUI.FormExportMaintenance.chkBendingStep.Enabled(False)
	F.Intrinsic.Control.EndIf
	
	'headers are mandatory for OPS and not viable for Boost
	F.Intrinsic.Control.If(V.Global.sXPtype.Trim, =, "O", OR, V.Global.sXPtype.Trim, =, "B", V.Global.sXPtype.Trim, =, "Y")
		GUI.FormExportMaintenance.chkHeaders.Enabled(False)
	F.Intrinsic.Control.Else
		GUI.FormExportMaintenance.chkHeaders.Enabled(True)
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(V.Global.sXPtype.Trim, =, "B")
		GUI.FormExportMaintenance.chkOseonWorkplan.Enabled(True)
	F.Intrinsic.Control.Else
		GUI.FormExportMaintenance.chkOseonWorkplan.Enabled(False)
	F.Intrinsic.Control.EndIf
	
	'IMPORT SETTINGS BELOW-------------------------------------------------------------------
	GUI.FormImportMaintenance.txtImpPath.Text(V.DataView.dtProfiles!CheckVw(0).IMPORT_FOLDER!fieldvalTrim)
	F.Intrinsic.Control.CallSub(txtImpPath_LostFocus)
	GUI.FormImportMaintenance.txtImpFieldList.Text(V.DataView.dtProfiles!CheckVw(0).IMP_FMAP!fieldvalTrim)
	
	f.Intrinsic.Control.If(V.DataView.dtProfiles!CheckVw(0).BACK_FLUSH_MAT!fieldval)
		GUI.FormImportMaintenance.chkBackFlushMat.Value(1)
		
		f.Intrinsic.Control.If(V.DataView.dtProfiles!CheckVw(0).ISSUE_FROM_INV!fieldval)
			GUI.FormImportMaintenance.optIssuInV.Value(1)
			GUI.FormImportMaintenance.txtLotBin.text("")
			f.Intrinsic.Control.CallSub(optIssuInv_Click)
		f.Intrinsic.Control.ElseIf(V.DataView.dtProfiles!CheckVw(0).DEFAULT_BIN_INV!fieldval)
			GUI.FormImportMaintenance.optIssuDefBin.Value(1)
			GUI.FormImportMaintenance.txtLotBin.text("")
			f.Intrinsic.Control.CallSub(optIssuDefBin_Click)
		f.Intrinsic.Control.ElseIf(V.DataView.dtProfiles!CheckVw(0).MANUAL_BIN!fieldval)
			GUI.FormImportMaintenance.optManualBin.Value(1)
			GUI.FormImportMaintenance.txtLotBin.Text(V.DataView.dtProfiles!CheckVw(0).MANUAL_BIN_ENTRY!fieldvalTrim)
			f.Intrinsic.Control.CallSub(optManualBin_Click)
		f.Intrinsic.Control.EndIf
		
		GUI.FormImportMaintenance.chkMatMisc.Value(V.DataView.dtProfiles!CheckVw(0).BACKFLUSH_MISC_MAT!fieldval)
		
	f.Intrinsic.Control.Else
		GUI.FormImportMaintenance.txtLotBin.text("")	
		GUI.FormImportMaintenance.chkBackFlushMat.Value(0)
	f.Intrinsic.Control.EndIf
	
	GUI.FormImportMaintenance.chkBackFlushLab.Value(V.DataView.dtProfiles!CheckVw(0).BACK_FLUSH_LAB!fieldval)
	GUI.FormImportMaintenance.txtDefEmp.Text(V.DataView.dtProfiles!CheckVw(0).DEFAULT_EMP!fieldvalTrim)
	f.Intrinsic.Control.CallSub(chkBackFlushLab_Click)
	
	f.Intrinsic.Control.If(V.DataView.dtProfiles!CheckVw(0).WCWG!fieldval)
		GUI.FormImportMaintenance.chkWCWG.Value(1)
		f.Intrinsic.Control.CallSub(chkWCWG_Click)
		f.Intrinsic.Control.If(V.DataView.dtProfiles!CheckVw(0).WC!fieldval)
			GUI.FormImportMaintenance.optWC.Value(1)
			f.Intrinsic.Control.CallSub(optWC_Click)
		f.Intrinsic.Control.ElseIf(V.DataView.dtProfiles!CheckVw(0).WG!fieldval)
			GUI.FormImportMaintenance.optWG.Value(1)
			f.Intrinsic.Control.CallSub(optWG_Click)
		f.Intrinsic.Control.Else
			GUI.FormImportMaintenance.optWC.Value(1)
			f.Intrinsic.Control.CallSub(optWC_Click)
		f.Intrinsic.Control.EndIf
		
		GUI.FormImportMaintenance.txtWCWG.text(V.DataView.dtProfiles!CheckVw(0).WORKCG!fieldvalTrim)	
	f.Intrinsic.Control.Else
		GUI.FormImportMaintenance.chkWCWG.Value(0)
		f.Intrinsic.Control.CallSub(chkWCWG_Click)
		GUI.FormImportMaintenance.txtWCWG.text("")
	f.Intrinsic.Control.EndIf
	
	GUI.FormImportMaintenance.chkWCCrossRef.Value(V.DataView.dtProfiles!CheckVw(0).WC_XREF!fieldval)
	
	f.Intrinsic.Control.If(V.DataView.dtProfiles!CheckVw(0).ONLINE_IMP!fieldval)
		GUI.FormImportMaintenance.optBOnline.Value(1)
	f.Intrinsic.Control.ElseIf(V.DataView.dtProfiles!CheckVw(0).OFFLINE_IMP!fieldval)
		GUI.FormImportMaintenance.optBOffline.Value(1)
	f.Intrinsic.Control.EndIf
	
	'metric option only working for sigmanest currently
	F.Intrinsic.Control.If(V.Global.sXPtype.Trim, =, "S")
		GUI.FormImportMaintenance.chkMetric.Enabled(True)
		GUI.FormImportMaintenance.chkSplitMaterial.Enabled(True)
	F.Intrinsic.Control.Else
		GUI.FormImportMaintenance.chkMetric.Enabled(False)
		GUI.FormImportMaintenance.chkSplitMaterial.Enabled(False)
	F.Intrinsic.Control.EndIf
	
	'only show boost options for boost
	F.Intrinsic.Control.If(V.Global.sXPtype.Trim, =, "B")
		GUI.FormImportMaintenance.frameBoostOpt.Visible(True)
	F.Intrinsic.Control.Else
		GUI.FormImportMaintenance.frameBoostOpt.Visible(False)
	F.Intrinsic.Control.EndIf
	
	'only enable part separation option for boost
	F.Intrinsic.Control.If(V.Global.sXPtype.Trim, =, "B")
		GUI.FormImportMaintenance.chkPartSeparation.Enabled(True)
		GUI.FormImportMaintenance.tabImportSettings.TabEnabled(2, True)
	F.Intrinsic.Control.Else
		GUI.FormImportMaintenance.chkPartSeparation.Enabled(False)
		GUI.FormImportMaintenance.tabImportSettings.TabEnabled(2, False)
	F.Intrinsic.Control.EndIf
	
	'only enable bysoft cumulative option for bysoft
	F.Intrinsic.Control.If(V.Global.sXPtype.Trim, =, "Y")
		GUI.FormImportMaintenance.chkBysoftCumulativeImport.Enabled(True)
	F.Intrinsic.Control.Else
		GUI.FormImportMaintenance.chkBysoftCumulativeImport.Enabled(False)
	F.Intrinsic.Control.EndIf
	
	'only enable NCELL station files for NCELL
	F.Intrinsic.Control.If(V.Global.sXPtype.Trim, =, "N")
		GUI.FormImportMaintenance.chkNCellStationFiles.Enabled(True)
	F.Intrinsic.Control.Else
		GUI.FormImportMaintenance.chkNCellStationFiles.Enabled(False)
	F.Intrinsic.Control.EndIf
	
	'import mapping
	F.Intrinsic.Control.If(V.Global.sXPtype.Trim, =, "N", OR, V.Global.sXPtype.Trim, =, "M", V.Global.sXPtype.Trim, =, "O", V.Global.sXPtype.Trim, =, "B", V.Global.sXPtype.Trim, =, "Y")
		V.Local.bEnabled.Set(False)
	F.Intrinsic.Control.Else
		V.Local.bEnabled.Set(True)
	F.Intrinsic.Control.EndIf
	
	'remnants
	F.Intrinsic.Control.If(V.Global.sXPtype.Trim, =, "N")
		GUI.FormImportMaintenance.chkRemnant.Enabled(True)
	F.Intrinsic.Control.Else
		F.Intrinsic.Control.If(V.Global.sXPtype.Trim, =, "U")
			GUI.FormImportMaintenance.chkRemnant.Enabled(False)
			V.Local.bRemnants.Set(False)
		F.Intrinsic.Control.Else
			F.Intrinsic.Control.If(V.Global.sXPtype.Trim, =, "B", "AND", V.DataView.dtProfiles!CheckVw(0).OFFLINE_IMP!fieldval, =, True)
				GUI.FormImportMaintenance.chkRemnant.Enabled(True)
			F.Intrinsic.Control.Else
				GUI.FormImportMaintenance.chkRemnant.Enabled(V.Local.bEnabled)
				V.Local.bRemnants.Set(V.Local.bEnabled)
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
	GUI.FormImportMaintenance.tabImportSettings.TabEnabled(1, V.Local.bRemnants)
	
	'remnant options
	GUI.FormImportMaintenance.txtImpRemList.Text(V.DataView.dtProfiles!CheckVw(0).REM_FMAP!fieldvalTrim)
	GUI.FormImportMaintenance.txtRemPath.Text(V.DataView.dtProfiles!CheckVw(0).REM_FOLDER!fieldvalTrim)
	F.Intrinsic.Control.CallSub(txtRemPath_LostFocus)
	GUI.FormImportMaintenance.chkRemnant.Value(V.DataView.dtProfiles!CheckVw(0).REMNANT!fieldval)
	F.Intrinsic.Control.CallSub(chkRemnant_Click)
	
	GUI.FormImportMaintenance.ddlNestID.Enabled(V.Local.bEnabled)
	GUI.FormImportMaintenance.ddlWO.Enabled(V.Local.bEnabled)
	GUI.FormImportMaintenance.ddlRawMat.Enabled(V.Local.bEnabled)
	GUI.FormImportMaintenance.ddlLocation.Enabled(V.Local.bEnabled)
	GUI.FormImportMaintenance.ddlWeight.Enabled(V.Local.bEnabled)
	GUI.FormImportMaintenance.ddlAreaPerPart.Enabled(V.Local.bEnabled)
	GUI.FormImportMaintenance.ddlGoodPc.Enabled(V.Local.bEnabled)
	GUI.FormImportMaintenance.ddlBadPc.Enabled(V.Local.bEnabled)
	GUI.FormImportMaintenance.ddlLaborWc.Enabled(V.Local.bEnabled)
	GUI.FormImportMaintenance.ddlTimePerPart.Enabled(V.Local.bEnabled)
	GUI.FormImportMaintenance.txtRemPath.Enabled(V.Local.bEnabled)
	GUI.FormImportMaintenance.cmdRemBrw.Enabled(V.Local.bEnabled)
	GUI.FormImportMaintenance.ddlRemNestID.Enabled(V.Local.bEnabled)
	GUI.FormImportMaintenance.ddlRemLength.Enabled(V.Local.bEnabled)
	GUI.FormImportMaintenance.ddlRemBreadth.Enabled(V.Local.bEnabled)
	GUI.FormImportMaintenance.ddlRemWeight.Enabled(V.Local.bEnabled)
	GUI.FormImportMaintenance.txtRemLotBin.Enabled(V.Local.bEnabled)
	GUI.FormImportMaintenance.ddlDropId.Enabled(V.Local.bEnabled)
	GUI.FormImportMaintenance.ddlSheetArea.Enabled(V.Local.bEnabled)
	GUI.FormImportMaintenance.ddlJobArea.Enabled(V.Local.bEnabled)
	GUI.FormImportMaintenance.ddlEmployee.Enabled(V.Local.bEnabled)
	GUI.FormImportMaintenance.GsGCImpFieldList.Enabled(V.Local.bEnabled)
	GUI.FormImportMaintenance.GsGCImpRemList.Enabled(V.Local.bEnabled)
	GUI.FormImportMaintenance.txtImpRemList.Enabled(V.Local.bEnabled)
	GUI.FormImportMaintenance.cmdExpression.Enabled(V.Local.bEnabled)
	GUI.FormImportMaintenance.ddlPartWeight.Enabled(V.Local.bEnabled)
	GUI.FormImportMaintenance.chkSheetAreaNestSummary.Enabled(V.Local.bEnabled)
	GUI.FormImportMaintenance.chkSheetWeightNestSummary.Enabled(V.Local.bEnabled)
	
	F.Intrinsic.Control.If(V.Global.sXPtype, !=, "U")
		GUI.FormImportMaintenance.txtImpFieldList.Enabled(V.Local.bEnabled)
		GUI.FormImportMaintenance.cmdImpFieldList.Enabled(V.Local.bEnabled)
	F.Intrinsic.Control.Else
		GUI.FormImportMaintenance.txtImpFieldList.Enabled(False)
		GUI.FormImportMaintenance.cmdImpFieldList.Enabled(False)
	F.Intrinsic.Control.EndIf
	
	GUI.FormImportMaintenance.ddlNestID.Text(V.DataView.dtProfiles!CheckVw(0).NEST_ID!fieldvalTrim)
	GUI.FormImportMaintenance.ddlWO.Text(V.DataView.dtProfiles!CheckVw(0).WO_NUMBER!fieldvalTrim)
	GUI.FormImportMaintenance.ddlRawMat.Text(V.DataView.dtProfiles!CheckVw(0).RAW_MAT!fieldvalTrim)
	GUI.FormImportMaintenance.ddlLocation.Text(V.DataView.dtProfiles!CheckVw(0).MAT_LOCATION!fieldvalTrim)
	GUI.FormImportMaintenance.ddlWeight.Text(V.DataView.dtProfiles!CheckVw(0).MAT_WEIGHT!fieldvalTrim)
	GUI.FormImportMaintenance.ddlAreaPerPart.Text(V.DataView.dtProfiles!CheckVw(0).AREA_P_PART!fieldvalTrim)
	GUI.FormImportMaintenance.ddlGoodPc.Text(V.DataView.dtProfiles!CheckVw(0).GOOD_PC!fieldvalTrim)
	GUI.FormImportMaintenance.ddlBadPc.Text(V.DataView.dtProfiles!CheckVw(0).BAD_PC!fieldvalTrim)
	GUI.FormImportMaintenance.ddlLaborWc.Text(V.DataView.dtProfiles!CheckVw(0).LABOR_WC!fieldvalTrim)
	GUI.FormImportMaintenance.ddlTimePerPart.Text(V.DataView.dtProfiles!CheckVw(0).TIME_PER_PART!fieldvalTrim)
	
	GUI.FormImportMaintenance.ddlRemNestID.Text(V.DataView.dtProfiles!CheckVw(0).REM_NESTID!fieldvalTrim)
	GUI.FormImportMaintenance.ddlRemLength.Text(V.DataView.dtProfiles!CheckVw(0).REM_LENGTH!fieldvalTrim)
	GUI.FormImportMaintenance.ddlRemBreadth.Text(V.DataView.dtProfiles!CheckVw(0).REM_BREADTH!fieldvalTrim)
	GUI.FormImportMaintenance.ddlRemWeight.Text(V.DataView.dtProfiles!CheckVw(0).REM_WEIGHT!fieldvalTrim)
	GUI.FormImportMaintenance.txtRemLotBin.Text(V.DataView.dtProfiles!CheckVw(0).REM_BIN_ENTRY!fieldvalTrim)
	
	GUI.FormImportMaintenance.chkIndirectIssue.Value(V.DataView.dtProfiles!CheckVw(0).INDIRECT_ISSUE!FieldVal)
	GUI.FormImportMaintenance.txtIndirectIssue.Text(V.DataView.dtProfiles!CheckVw(0).ISSUE_WO!FieldValTrim)
	
	F.Intrinsic.Control.CallSub(CheckImportGrid)
	
f.Intrinsic.Control.EndIf

f.Data.DataView.Close("dtProfiles","CheckVw")

F.Intrinsic.Control.CallSub(LoadExtraSettings)

F.Intrinsic.Control.If(V.Global.sXPtype.Trim, =, "O")
	GUI.FormExportMaintenance.chkHeaders.Value(True)
F.Intrinsic.Control.EndIf
	
F.Intrinsic.Control.CallSub(CheckMoveticketProjects)

GUI.FormExportMaintenance..Enabled(True)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.LoadMaintenanceScreen.End

Program.Sub.LoadExtraSettings.Start
F.Intrinsic.Control.Try

V.Local.sSQL.Declare(String)
V.Local.iIndex.Declare(Long)
V.Local.sSetting.Declare(String)

F.Intrinsic.Control.BlockEvents

'load the settings stored in GCG_4980_Settings
F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "IMPORT_MAP", "SETTING", "SHEET_AREA", "PROFILE", V.Global.sProfile)
GUI.FormImportMaintenance.ddlSheetArea.Text(V.Args.SETTING.Trim)

F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "IMPORT_MAP", "SETTING", "JOB_AREA", "PROFILE", V.Global.sProfile)
GUI.FormImportMaintenance.ddlJobArea.Text(V.Args.SETTING.Trim)

F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "IMPORT_MAP", "SETTING", "PART_WEIGHT", "PROFILE", V.Global.sProfile)
GUI.FormImportMaintenance.ddlPartWeight.Text(V.Args.SETTING.Trim)

F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "IMPORT_MAP", "SETTING", "EMPLOYEE_ID", "PROFILE", V.Global.sProfile)
GUI.FormImportMaintenance.ddlEmployee.Text(V.Args.SETTING.Trim)

F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "REMNANT_MAP", "SETTING", "DROP_ID", "PROFILE", V.Global.sProfile)
GUI.FormImportMaintenance.ddlDropID.Text(V.Args.SETTING.Trim)

'EXPORT OPTIONS --------------------------------------------------------------
F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "EXPORT_OPTION", "SETTING", "INCLUDE_EXPORTED", "PROFILE", V.Global.sProfile)
F.Intrinsic.Control.If(V.Args.Setting.Trim, =, "")
	GUI.FormExportMaintenance.chkUnattendedExported.Value(False)
F.Intrinsic.Control.Else
	GUI.FormExportMaintenance.chkUnattendedExported.Value(V.Args.Setting)
F.Intrinsic.Control.EndIf
F.Intrinsic.Control.CallSub(chkUnattendedExported_Click)

F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "EXPORT_OPTION", "SETTING", "FILE_NAME", "PROFILE", V.Global.sProfile)
F.Intrinsic.Control.If(V.Args.Setting.Trim, =, "")
	GUI.FormExportMaintenance.chkStaticFile.Value(False)
	GUI.FormExportMaintenance.txtStaticFile.Text("")
F.Intrinsic.Control.Else
	GUI.FormExportMaintenance.chkStaticFile.Value(True)
	GUI.FormExportMaintenance.txtStaticFile.Text(V.Args.Setting)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "EXPORT_OPTION", "SETTING", "INCLUDE_HEADERS", "PROFILE", V.Global.sProfile)
F.Intrinsic.Control.If(V.Args.Setting.Trim, =, "")
	GUI.FormExportMaintenance.chkHeaders.Value(False)
F.Intrinsic.Control.Else
	GUI.FormExportMaintenance.chkHeaders.Value(V.Args.Setting.Trim)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "EXPORT_OPTION", "SETTING", "OSEON_WORKPLAN", "PROFILE", V.Global.sProfile)
F.Intrinsic.Control.If(V.Args.Setting.Trim, =, "")
	GUI.FormExportMaintenance.chkOseonWorkplan.Value(False)
F.Intrinsic.Control.Else
	GUI.FormExportMaintenance.chkOseonWorkplan.Value(V.Args.Setting.Trim)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "EXPORT_OPTION", "SETTING", "DATE_FORMAT", "PROFILE", V.Global.sProfile)
F.Intrinsic.Control.If(V.Args.Setting.Trim, =, "")
	GUI.FormExportMaintenance.txtDateFormat.Text("mm/dd/yy")
F.Intrinsic.Control.Else
	GUI.FormExportMaintenance.txtDateFormat.Text(V.Args.Setting.Trim)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "EXPORT_OPTION", "SETTING", "ADD_BENDING_STEP", "PROFILE", V.Global.sProfile)
F.Intrinsic.Control.If(V.Args.Setting.Trim, =, "")
	GUI.FormExportMaintenance.chkBendingStep.Value(False)
F.Intrinsic.Control.Else
	GUI.FormExportMaintenance.chkBendingStep.Value(V.Args.Setting.Trim)
	F.Intrinsic.Control.CallSub(chkBendingStep_Click)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "EXPORT_OPTION", "SETTING", "BENDING_WORKCENTERS", "PROFILE", V.Global.sProfile)
F.Intrinsic.Control.If(V.Args.Setting.Trim, =, "")
	GUI.FormExportMaintenance.txtBendingWorkcenters.Text("")
F.Intrinsic.Control.Else
	GUI.FormExportMaintenance.txtBendingWorkcenters.Text(V.Args.Setting.Trim)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "EXPORT_OPTION", "SETTING", "ONLY_INCLUDE_UPDATED", "PROFILE", V.Global.sProfile)
F.Intrinsic.Control.If(V.Args.Setting.Trim, =, "")
	GUI.FormExportMaintenance.chkOnlyIncludeRescheduled.Value(False)
F.Intrinsic.Control.Else
	GUI.FormExportMaintenance.chkOnlyIncludeRescheduled.Value(V.Args.Setting.Trim)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "EXPORT_OPTION", "SETTING", "BACKUP_EXPORT", "PROFILE", V.Global.sProfile)
F.Intrinsic.Control.If(V.Args.Setting.Trim, =, "")
	'default this to true
	GUI.FormExportMaintenance.chkBackupExport.Value(True)
F.Intrinsic.Control.Else
	GUI.FormExportMaintenance.chkBackupExport.Value(V.Args.Setting.Trim)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "EXPORT_OPTION", "SETTING", "UNATTENDED_FILTER", "PROFILE", V.Global.sProfile)
F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
	GUI.FormExportMaintenance.txtUnattendedFilter.Text(V.Args.Setting.Trim)
F.Intrinsic.Control.Else
	GUI.FormExportMaintenance.txtUnattendedFilter.Text("")
F.Intrinsic.Control.EndIf

'IMPORT OPTIONS BELOW------------------------------------------------------
F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "IMPORT_OPTION", "SETTING", "USE_METRIC", "PROFILE", V.Global.sProfile)
F.Intrinsic.Control.If(V.Args.Setting.Trim, =, "")
	GUI.FormImportMaintenance.chkMetric.Value(False)
F.Intrinsic.Control.Else
	GUI.FormImportMaintenance.chkMetric.Value(V.Args.Setting)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "IMPORT_OPTION", "SETTING", "MOVE_TICKET", "PROFILE", V.Global.sProfile)
F.Intrinsic.Control.If(V.Args.Setting.Trim, =, "CODESOFT")
	GUI.FormImportMaintenance.chkMoveTicketCodesoft.Value(True)
	GUI.FormImportMaintenance.chkMoveTicketCrystal.Value(False)
	GUI.FormImportMaintenance.chkMoveTicketNone.Value(False)
	GUI.FormImportMaintenance.chkMoveTicketATG.Value(False)
F.Intrinsic.Control.ElseIf(V.Args.Setting.Trim, =, "CRYSTAL")
	GUI.FormImportMaintenance.chkMoveTicketCrystal.Value(True)
	GUI.FormImportMaintenance.chkMoveTicketCodesoft.Value(False)
	GUI.FormImportMaintenance.chkMoveTicketNone.Value(False)
	GUI.FormImportMaintenance.chkMoveTicketATG.Value(False)
F.Intrinsic.Control.ElseIf(V.Args.Setting.Trim, =, "ATG")
	GUI.FormImportMaintenance.chkMoveTicketCrystal.Value(False)
	GUI.FormImportMaintenance.chkMoveTicketCodesoft.Value(False)
	GUI.FormImportMaintenance.chkMoveTicketNone.Value(False)
	GUI.FormImportMaintenance.chkMoveTicketATG.Value(True)
F.Intrinsic.Control.Else
	GUI.FormImportMaintenance.chkMoveTicketNone.Value(True)
	GUI.FormImportMaintenance.chkMoveTicketCodesoft.Value(False)
	GUI.FormImportMaintenance.chkMoveTicketCrystal.Value(False)
	GUI.FormImportMaintenance.chkMoveTicketATG.Value(False)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "IMPORT_OPTION", "SETTING", "CUSTOM_LABEL", "PROFILE", V.Global.sProfile)
F.Intrinsic.Control.If(V.Args.Setting.Trim, =, "")
	GUI.FormImportMaintenance.chkCustomLabel.Value(False)
F.Intrinsic.Control.Else
	GUI.FormImportMaintenance.chkCustomLabel.Value(True)
	GUI.FormImportMaintenance.txtCustomLabel.Text(V.Args.Setting.Trim)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "IMPORT_OPTION", "SETTING", "MULTIPLE_BINS", "PROFILE", V.Global.sProfile)
F.Intrinsic.Control.If(V.Args.Setting.Trim, =, "")
	GUI.FormImportMaintenance.chkMultipleBinIssue.Value(False)
F.Intrinsic.Control.Else
	GUI.FormImportMaintenance.chkMultipleBinIssue.Value(V.Args.Setting.Trim)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "IMPORT_OPTION", "SETTING", "CHECK_MATERIAL", "PROFILE", V.Global.sProfile)
F.Intrinsic.Control.If(V.Args.Setting.Trim, =, "")
	GUI.FormImportMaintenance.chkCheckMaterial.Value(True)
F.Intrinsic.Control.Else
	GUI.FormImportMaintenance.chkCheckMaterial.Value(V.Args.Setting.Trim)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "IMPORT_OPTION", "SETTING", "OVERWRITE_OPERATION", "PROFILE", V.Global.sProfile)
F.Intrinsic.Control.If(V.Args.Setting.Trim, =, "")
	GUI.FormImportMaintenance.chkOverwriteOpCode.Value(False)
F.Intrinsic.Control.Else
	GUI.FormImportMaintenance.chkOverwriteOpCode.Value(V.Args.Setting.Trim)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "IMPORT_OPTION", "SETTING", "SPLIT_MATERIAL", "PROFILE", V.Global.sProfile)
F.Intrinsic.Control.If(V.Args.Setting.Trim, =, "")
	GUI.FormImportMaintenance.chkSplitMaterial.Value(False)
F.Intrinsic.Control.Else
	GUI.FormImportMaintenance.chkSplitMaterial.Value(V.Args.Setting.Trim)
F.Intrinsic.Control.EndIf
F.Intrinsic.Control.CallSub(chkSplitMaterial_Click)

F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "IMPORT_OPTION", "SETTING", "SPLIT_DELIMITER", "PROFILE", V.Global.sProfile)
F.Intrinsic.Control.If(V.Args.Setting.Trim, =, "")
	GUI.FormImportMaintenance.txtDelimiter.Text("-")
F.Intrinsic.Control.Else
	GUI.FormImportMaintenance.txtDelimiter.Text(V.Args.Setting.Trim)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "IMPORT_OPTION", "SETTING", "UNATTENDED_IMPORT", "PROFILE", V.Global.sProfile)
F.Intrinsic.Control.If(V.Args.Setting.Trim, =, "")
	GUI.FormImportMaintenance.chkUnattendedImport.Value(False)
F.Intrinsic.Control.Else
	GUI.FormImportMaintenance.chkUnattendedImport.Value(V.Args.Setting.Trim)
F.Intrinsic.Control.EndIf
F.Intrinsic.Control.CallSub(chkUnattendedImport_Click)

F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "IMPORT_OPTION", "SETTING", "IMPORT_FREQUENCY", "PROFILE", V.Global.sProfile)
F.Intrinsic.Control.If(V.Args.Setting.Trim, =, "")
	GUI.FormImportMaintenance.ddlImportFrequency.Text("5 Minutes")
F.Intrinsic.Control.Else
	GUI.FormImportMaintenance.ddlImportFrequency.Text(V.Args.Setting.Trim)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "IMPORT_OPTION", "SETTING", "APPEND", "PROFILE", V.Global.sProfile)
F.Intrinsic.Control.If(V.Args.Setting.Trim, =, "")
	GUI.FormImportMaintenance.chkAppend.Value(False)
F.Intrinsic.Control.Else
	GUI.FormImportMaintenance.chkAppend.Value(V.Args.Setting.Trim)
F.Intrinsic.Control.EndIf

'this option is profile independent
F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "IMPORT_OPTION", "SETTING", "LAUNCH_FROM_GUI", "PROFILE", "")
F.Intrinsic.Control.If(V.Args.Setting.Trim, =, "")
	GUI.FormImportMaintenance.ddlScriptButton.ListIndex(0)
F.Intrinsic.Control.Else
	GUI.FormImportMaintenance.ddlScriptButton.Text(V.Args.Setting.Trim)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "IMPORT_OPTION", "SETTING", "CLOSE_LABOR_SEQUENCE", "PROFILE", V.Global.sProfile)
F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
	GUI.FormImportMaintenance.ddlCloseLaborSequence.Text(V.Dictionary.dictCloseTypes![V.Args.Setting.Trim])
F.Intrinsic.Control.Else
	GUI.FormImportMaintenance.ddlCloseLaborSequence.Text("Close When Run Quantity Is Met")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "IMPORT_OPTION", "SETTING", "CLOSE_MAT_SEQUENCE", "PROFILE", V.Global.sProfile)
F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
	GUI.FormImportMaintenance.ddlCloseMaterialSequence.Text(V.Dictionary.dictCloseTypes![V.Args.Setting.Trim])
F.Intrinsic.Control.Else
	GUI.FormImportMaintenance.ddlCloseMaterialSequence.Text("Always Close")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "IMPORT_OPTION", "SETTING", "BYSOFT_CUMULATIVE", "PROFILE", V.Global.sProfile)
F.Intrinsic.Control.If(V.Args.Setting.Trim, =, "")
	GUI.FormImportMaintenance.chkBysoftCumulativeImport.Value(False)
F.Intrinsic.Control.Else
	GUI.FormImportMaintenance.chkBysoftCumulativeImport.Value(V.Args.Setting.Trim)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "IMPORT_OPTION", "SETTING", "CREATE_FLEX_SCHEDULE", "PROFILE", V.Global.sProfile)
F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
	GUI.FormImportMaintenance.chkFlexSchedule.Value(V.Args.Setting)
F.Intrinsic.Control.Else
	GUI.FormImportMaintenance.chkFlexSchedule.Value(False)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "IMPORT_OPTION", "SETTING", "USE_PART_WEIGHT_SUM", "PROFILE", V.Global.sProfile)
F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
	GUI.FormImportMaintenance.chkSheetWeightNestSummary.Value(V.Args.Setting)
F.Intrinsic.Control.Else
	GUI.FormImportMaintenance.chkSheetWeightNestSummary.Value(False)
F.Intrinsic.Control.EndIf
F.Intrinsic.Control.CallSub(chkSheetWeightNestSummary_Click)

F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "IMPORT_OPTION", "SETTING", "USE_PART_AREA_SUM", "PROFILE", V.Global.sProfile)
F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
	GUI.FormImportMaintenance.chkSheetAreaNestSummary.Value(V.Args.Setting)
F.Intrinsic.Control.Else
	GUI.FormImportMaintenance.chkSheetAreaNestSummary.Value(False)
F.Intrinsic.Control.EndIf
F.Intrinsic.Control.CallSub(chkSheetAreaNestSummary_Click)

F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "IMPORT_OPTION", "SETTING", "GROUP_NESTS_BY_FILE", "PROFILE", V.Global.sProfile)
F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
	GUI.FormImportMaintenance.chkGroupNestsByFile.Value(V.Args.Setting)
F.Intrinsic.Control.Else
	GUI.FormImportMaintenance.chkGroupNestsByFile.Value(False)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "IMPORT_OPTION", "SETTING", "THRESHOLD", "PROFILE", V.Global.sProfile)
F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
	GUI.FormImportMaintenance.txtThreshold.Text(V.Args.Setting.Long)
F.Intrinsic.Control.Else
	GUI.FormImportMaintenance.txtThreshold.Text(0)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "IMPORT_OPTION", "SETTING", "ISSUE_DECIMALS", "PROFILE", V.Global.sProfile)
F.Intrinsic.Control.If(V.Args.Setting.Trim, =, "")
	GUI.FormImportMaintenance.ddlIssueDecimals.Text("4")
F.Intrinsic.Control.Else
	GUI.FormImportMaintenance.ddlIssueDecimals.Text(V.Args.Setting)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "IMPORT_OPTION", "SETTING", "RELEASE_WORK_ORDERS", "PROFILE", V.Global.sProfile)
F.Intrinsic.Control.If(V.Args.Setting.Trim, =, "")
	GUI.FormImportMaintenance.chkReleaseWOs.Value(False)
F.Intrinsic.Control.Else
	GUI.FormImportMaintenance.chkReleaseWOs.Value(V.Args.Setting.Trim)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "IMPORT_OPTION", "SETTING", "ALLOW_ZERO_MATERIAL", "PROFILE", V.Global.sProfile)
F.Intrinsic.Control.If(V.Args.Setting.Trim, =, "")
	GUI.FormImportMaintenance.chkAllowZeroMaterial.Value(False)
F.Intrinsic.Control.Else
	GUI.FormImportMaintenance.chkAllowZeroMaterial.Value(V.Args.Setting)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "IMPORT_OPTION", "SETTING", "USE_990000_SEQUENCE", "PROFILE", V.Global.sProfile)
F.Intrinsic.Control.If(V.Args.Setting.Trim, =, "")
	GUI.FormImportMaintenance.chkUse99Sequence.Value(False)
F.Intrinsic.Control.Else
	GUI.FormImportMaintenance.chkUse99Sequence.Value(V.Args.Setting)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "IMPORT_OPTION", "SETTING", "NCELL_STATION_FILE", "PROFILE", V.Global.sProfile)
F.Intrinsic.Control.If(V.Args.Setting.Trim, =, "")
	GUI.FormImportMaintenance.chkNCellStationFiles.Value(False)
F.Intrinsic.Control.Else
	GUI.FormImportMaintenance.chkNCellStationFiles.Value(V.Args.Setting)
F.Intrinsic.Control.EndIf

'remnant options
F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "REMNANT_OPTION", "SETTING", "STORE_SIZE_IN_SERIAL", "PROFILE", V.Global.sProfile)
F.Intrinsic.Control.If(V.Args.Setting.Trim, =, "")
	GUI.FormImportMaintenance.chkUseSerialInsteadOfDropSize.Value(False)
F.Intrinsic.Control.Else
	GUI.FormImportMaintenance.chkUseSerialInsteadOfDropSize.Value(V.Args.Setting.Trim)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "REMNANT_OPTION", "SETTING", "DROP_SUFFIX", "PROFILE", V.Global.sProfile)
GUI.FormImportMaintenance.txtDropSuffix.Text(V.Args.Setting.Trim)

'part separation options
F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "PART_SEPARATION", "SETTING", "ENABLED", "PROFILE", V.Global.sProfile)
F.Intrinsic.Control.If(V.Args.Setting.Trim, =, "")
	GUI.FormImportMaintenance.chkPartSeparation.Value(False)
F.Intrinsic.Control.Else
	GUI.FormImportMaintenance.chkPartSeparation.Value(V.Args.Setting.Trim)
F.Intrinsic.Control.EndIf
F.Intrinsic.Control.CallSub(chkPartSeparation_Click)

F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "PART_SEPARATION", "SETTING", "IMPORT_PATH", "PROFILE", V.Global.sProfile)
F.Intrinsic.Control.If(V.Args.Setting.Trim, =, "")
	GUI.FormImportMaintenance.txtPartSeparationPath.Text("")
F.Intrinsic.Control.Else
	GUI.FormImportMaintenance.txtPartSeparationPath.Text(V.Args.Setting.Trim)
F.Intrinsic.Control.EndIf
F.Intrinsic.Control.CallSub(txtPartSeparationPath_LostFocus)

F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "PART_SEPARATION", "SETTING", "WORKCENTERS", "PROFILE", V.Global.sProfile)
F.Intrinsic.Control.If(V.Args.Setting.Trim, =, "")
	GUI.FormImportMaintenance.txtPartSeparationWorkcenters.Text("")
F.Intrinsic.Control.Else
	GUI.FormImportMaintenance.txtPartSeparationWorkcenters.Text(V.Args.Setting.Trim)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "PART_SEPARATION", "SETTING", "CLOSE", "PROFILE", V.Global.sProfile)
F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
	GUI.FormImportMaintenance.ddlPartSeparationCloseType.Text(V.Dictionary.dictCloseTypes![V.Args.Setting.Trim])
F.Intrinsic.Control.Else
	GUI.FormImportMaintenance.ddlPartSeparationCloseType.Text("Close When Run Quantity Is Met")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "PART_SEPARATION", "SETTING", "DEFAULT_EMPLOYEE", "PROFILE", V.Global.sProfile)
F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
	GUI.FormImportMaintenance.txtPartSeparationDefaultEmployee.Text(V.Args.Setting.Trim)
F.Intrinsic.Control.Else
	GUI.FormImportMaintenance.txtPartSeparationDefaultEmployee.Text("")
F.Intrinsic.Control.EndIf
F.Intrinsic.Control.CallSub(txtPartSeparationDefaultEmployee_LostFocus)

F.Intrinsic.Control.CallSub(GetSetting, "TYPE", "PART_SEPARATION", "SETTING", "BOOST_FILE", "PROFILE", V.Global.sProfile)
F.Intrinsic.Control.If(V.Args.Setting.Trim, =, "ProdOperationExp")
	GUI.FormImportMaintenance.chkUseProdOperationExp.Value(True)
	F.Intrinsic.Control.CallSub(chkUseProdOperationExp_Click)
F.Intrinsic.Control.ElseIf(V.Args.Setting.Trim, =, "PdaExp")
	GUI.FormImportMaintenance.chkUsePdaExp.Value(True)
	F.Intrinsic.Control.CallSub(chkUsePdaExp_Click)
F.Intrinsic.Control.Else
	GUI.FormImportMaintenance.chkUseProdOperationExp.Value(False)
	GUI.FormImportMaintenance.chkUsePdaExp.Value(False)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.UnBlockEvents

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.LoadExtraSettings.End

Program.Sub.FormProfiles_UnLoad.Start
F.Intrinsic.Control.Try

GUI.FormProfiles..Visible(false)
GUI.FormProfiles.txtProfile.Text("")
GUI.FormExportMaintenance..Enabled(true)
GUI.FormExportMaintenance..SetFocus

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.FormProfiles_UnLoad.End

Program.Sub.cmdSaveProfile_Click.Start
F.Intrinsic.Control.Try

V.Local.sType.Declare
V.Local.sFilter.Declare
V.Local.sSQL.Declare
V.Local.sProfile.Declare

GUI.FormProfiles.cmdSaveProfile.Enabled(false)
f.Intrinsic.Control.If(V.Screen.FormProfiles!txtProfile.Text.trim,=,"")
	f.Intrinsic.UI.Msgbox("You need to enter a profile name before saving.")
	GUI.FormProfiles.cmdSaveProfile.Enabled(True)
	f.Intrinsic.Control.ExitSub
f.Intrinsic.Control.EndIf

f.Intrinsic.String.Build("PROFILE = '{0}'",V.Screen.FormProfiles!txtProfile.Text.trim,V.Local.sFilter)
f.Data.Dataview.Create("dtProfiles","CheckVw",22,V.Local.sFilter,"")
f.Intrinsic.Control.If(V.DataView.dtProfiles!CheckVw.RowCount,>,0)
	f.Intrinsic.UI.Msgbox("Profile already exists in the database.")
	f.Data.DataView.Close("dtProfiles","CheckVw")
	GUI.FormProfiles.cmdSaveProfile.Enabled(True)
	f.Intrinsic.Control.ExitSub
f.Intrinsic.Control.EndIf
f.Data.DataView.Close("dtProfiles","CheckVw")

f.Intrinsic.Control.BlockEvents

f.Intrinsic.Control.If(V.DataTable.dtProfiles.RowCount,=,0)
	V.Local.sProfile.Set(V.Screen.FormProfiles!txtProfile.Text)
	f.Intrinsic.String.RPad(V.Local.sProfile," ",10,V.Local.sProfile)
	f.Intrinsic.String.Build("Insert Into GCG_4980_NESTPROFILE (PROFILE,DEFAULT_PROFILE,CUSTOM_EXPORT,CUSTOM_IMPORT,XP_ON_GENWO,FULL_PART_FLAG) Values  ('{0}',1,0,0,0,0)",V.Local.sProfile,V.Local.sSql)
	f.ODBC.Connection!Con.Execute(V.Local.sSql)
	f.Data.DataTable.Close("dtProfiles")
	f.Data.DataTable.CreateFromSQL("dtProfiles","Con","select RTRIM(PROFILE) as PROFILE, DEFAULT_PROFILE, RTRIM(EXPORT_FOLDER) as EXPORT_FOLDER, RTRIM(IMPORT_FOLDER) as IMPORT_FOLDER, RTRIM(XPTYPE) as XPTYPE, CUSTOM_EXPORT, CUSTOM_IMPORT, XP_ON_GENWO, IMP_FMAP, IMP_REMNT, CREATE_FLEX_NEXT, BACK_FLUSH_MAT, BACK_FLUSH_LAB, RTRIM(DEFAULT_EMP) as DEFAULT_EMP, WCWG, WC, WG, ISSUE_FROM_INV, DEFAULT_BIN_INV, MANUAL_BIN, RTRIM(MANUAL_BIN_ENTRY) as MANUAL_BIN_ENTRY, RTRIM(NEST_ID) as NEST_ID, RTRIM(WO_NUMBER) as WO_NUMBER, RTRIM(RAW_MAT) as RAW_MAT, RTRIM(QTY) as QTY, RTRIM(AREA_P_PART) as AREA_P_PART, RTRIM(DATE_PROCESSED) as DATE_PROCESSED, RTRIM(TIME_PER_PART) as TIME_PER_PART, RTRIM(WORKCG) as WORKCG, RTRIM(LABOR_WC) as LABOR_WC, USE_INTERFACE, RTRIM(GOOD_PC) as GOOD_PC, RTRIM(BAD_PC) as BAD_PC, REMNANT, RTRIM(REM_FOLDER) as REM_FOLDER, REM_FMAP, RTRIM(REM_NESTID) as REM_NESTID, RTRIM(REM_RAWMAT) as REM_RAWMAT, RTRIM(REM_LENGTH) as REM_LENGTH, RTRIM(REM_BREADTH) as REM_BREADTH, RTRIM(REM_WEIGHT) as REM_WEIGHT, RTRIM(MAT_WEIGHT) as MAT_WEIGHT, RTRIM(REM_BIN_ENTRY) as REM_BIN_ENTRY, BACKFLUSH_MISC_MAT, RTRIM(MAT_LOCATION) as MAT_LOCATION, ONLINE_IMP, OFFLINE_IMP, WC_XREF, FULL_PART_FLAG, RTRIM(FULL_PART_PATH) as FULL_PART_PATH, INDIRECT_ISSUE, RTRIM(ISSUE_WO) as ISSUE_WO from GCG_4980_NESTPROFILE",true)

	f.Data.DataTable.AddColumn("dtProfiles","DELETE","String")
		f.Intrinsic.Control.CallSub(FormatProfile)
	GUI.FormProfiles.txtProfile.Text("")
	GUI.FormExportMaintenance.ddlProfile.ClearItems
	GUI.FormExportMaintenance.ddlProfile.AddItems("DataTable","dtProfiles","PROFILE","PROFILE")

f.Intrinsic.Control.Else
	V.Local.sProfile.Set(V.Screen.FormExportMaintenance!ddlProfile.Text)
	f.Intrinsic.String.Build("Insert Into GCG_4980_NESTPROFILE (PROFILE,DEFAULT_PROFILE,CUSTOM_EXPORT,CUSTOM_IMPORT,XP_ON_GENWO,FULL_PART_FLAG) Values  ('{0}',0,0,0,0,0)",V.Screen.FormProfiles!txtProfile.Text.trim,V.Local.sSql)
	f.ODBC.Connection!Con.Execute(V.Local.sSql)
	f.Data.DataTable.Close("dtProfiles")
	f.Data.DataTable.CreateFromSQL("dtProfiles","Con","select RTRIM(PROFILE) as PROFILE, DEFAULT_PROFILE, RTRIM(EXPORT_FOLDER) as EXPORT_FOLDER, RTRIM(IMPORT_FOLDER) as IMPORT_FOLDER, RTRIM(XPTYPE) as XPTYPE, CUSTOM_EXPORT, CUSTOM_IMPORT, XP_ON_GENWO, IMP_FMAP, IMP_REMNT, CREATE_FLEX_NEXT, BACK_FLUSH_MAT, BACK_FLUSH_LAB, RTRIM(DEFAULT_EMP) as DEFAULT_EMP, WCWG, WC, WG, ISSUE_FROM_INV, DEFAULT_BIN_INV, MANUAL_BIN, RTRIM(MANUAL_BIN_ENTRY) as MANUAL_BIN_ENTRY, RTRIM(NEST_ID) as NEST_ID, RTRIM(WO_NUMBER) as WO_NUMBER, RTRIM(RAW_MAT) as RAW_MAT, RTRIM(QTY) as QTY, RTRIM(AREA_P_PART) as AREA_P_PART, RTRIM(DATE_PROCESSED) as DATE_PROCESSED, RTRIM(TIME_PER_PART) as TIME_PER_PART, RTRIM(WORKCG) as WORKCG, RTRIM(LABOR_WC) as LABOR_WC, USE_INTERFACE, RTRIM(GOOD_PC) as GOOD_PC, RTRIM(BAD_PC) as BAD_PC, REMNANT, RTRIM(REM_FOLDER) as REM_FOLDER, REM_FMAP, RTRIM(REM_NESTID) as REM_NESTID, RTRIM(REM_RAWMAT) as REM_RAWMAT, RTRIM(REM_LENGTH) as REM_LENGTH, RTRIM(REM_BREADTH) as REM_BREADTH, RTRIM(REM_WEIGHT) as REM_WEIGHT, RTRIM(MAT_WEIGHT) as MAT_WEIGHT, RTRIM(REM_BIN_ENTRY) as REM_BIN_ENTRY, BACKFLUSH_MISC_MAT, RTRIM(MAT_LOCATION) as MAT_LOCATION, ONLINE_IMP, OFFLINE_IMP, WC_XREF, FULL_PART_FLAG, IF(FULL_PART_PATH = '0', '', RTRIM(FULL_PART_PATH)) as FULL_PART_PATH, INDIRECT_ISSUE, RTRIM(ISSUE_WO) as ISSUE_WO from GCG_4980_NESTPROFILE",true)
	f.Data.DataTable.AddColumn("dtProfiles","DELETE","String")
	f.Intrinsic.Control.CallSub(FormatProfile)
	GUI.FormProfiles.txtProfile.Text("")
	GUI.FormExportMaintenance.ddlProfile.ClearItems
	GUI.FormExportMaintenance.ddlProfile.AddItems("DataTable","dtProfiles","PROFILE","PROFILE")
	GUI.FormExportMaintenance.ddlProfile.Text(V.Local.sProfile)
f.Intrinsic.Control.EndIf

f.Intrinsic.Control.CallSub(YesProfile)
GUI.FormProfiles.cmdSaveProfile.Enabled(True)
f.Intrinsic.Control.UnBlockEvents

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.cmdSaveProfile_Click.End

Program.Sub.cmdProfileMaint_Click.Start
F.Intrinsic.Control.Try

GUI.FormExportMaintenance..Enabled(false)
GUI.FormProfiles..Enabled(True)
GUI.FormProfiles..Visible(True)
GUI.FormProfiles..SetFocus

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.cmdProfileMaint_Click.End

Program.Sub.cmdImportMaint_Click.Start
F.Intrinsic.Control.Try

F.Intrinsic.Control.If(V.Global.sXPtype.Trim, =, "")
	F.Intrinsic.UI.Msgbox("Please select a Nesting Software first.")
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Global.sXPtype, =, "A")
	F.Intrinsic.UI.Msgbox("Importing is not currently supported for this Nesting Software.")
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

GUI.FormExportMaintenance..Enabled(False)
GUI.FormImportMaintenance.tabImportSettings.SetTab(0)
GUI.FormImportMaintenance..Visible(True)
GUI.FormImportMaintenance..Show

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.cmdImportMaint_Click.End

Program.Sub.GsGCProfile_RowCellClick.Start
F.Intrinsic.Control.Try

V.Local.iRet.Declare
V.Local.sFilter.Declare
V.Local.sSQL.Declare(String)
V.Local.sProfile.Declare(String, "")
V.Local.iIndex.Declare(Long)

f.Intrinsic.Control.if(V.Args.column.Ucase,=,"DELETE")
	
	GUI.FormProfiles..Enabled(false)
	f.Intrinsic.Control.If(V.DataTable.dtProfiles(V.Args.rowindex).DEFAULT_PROFILE!fieldval)
		f.Intrinsic.ui.Msgbox("You cannot delete the default profile. Please make sure that you set another profile as default before deleting this profile.")
		GUI.FormProfiles..Enabled(True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.ui.Msgbox("Are you sure you want to delete this record? All associated mapping data will be deleted as well.","Delete Record?",4,V.Local.iRet)
	f.Intrinsic.Control.if(V.Local.iRet,=,7)
		GUI.FormProfiles..Enabled(True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	GUI.FormProfiles..Enabled(True)
	
	f.Intrinsic.Control.BlockEvents
	f.Intrinsic.String.Build("Delete from GCG_4980_NESTPROFILE where PROFILE = '{0}'",V.DataTable.dtProfiles(V.Args.rowindex).PROFILE!fieldvalTrim,V.Local.sSql)
	f.ODBC.Connection!Con.Execute(V.Local.sSql)
	
	f.Intrinsic.String.Build("Delete from GCG_4980_IMPMAINT where PROFILE = '{0}'",V.DataTable.dtProfiles(V.Args.rowindex).PROFILE!fieldvalTrim,V.Local.sSql)
	f.ODBC.Connection!Con.Execute(V.Local.sSql)
	
	f.Intrinsic.String.Build("Delete from GCG_4980_NESTMAINT where PROFILE = '{0}'",V.DataTable.dtProfiles(V.Args.rowindex).PROFILE!fieldvalTrim,V.Local.sSql)
	f.ODBC.Connection!Con.Execute(V.Local.sSql)
	
	f.Intrinsic.String.Build("Delete from GCG_4980_REMMAINT where PROFILE = '{0}'",V.DataTable.dtProfiles(V.Args.rowindex).PROFILE!fieldvalTrim,V.Local.sSql)
	f.ODBC.Connection!Con.Execute(V.Local.sSql)
	
	f.Intrinsic.String.Build("Delete from GCG_4980_SETTINGS where PROFILE = '{0}'",V.DataTable.dtProfiles(V.Args.rowindex).PROFILE!fieldvalTrim,V.Local.sSql)
	f.ODBC.Connection!Con.Execute(V.Local.sSql)
	
	f.Intrinsic.String.Build("Delete from GCG_4980_WCXREF where PROFILE = '{0}'",V.DataTable.dtProfiles(V.Args.rowindex).PROFILE!fieldvalTrim,V.Local.sSql)
	f.ODBC.Connection!Con.Execute(V.Local.sSql)
	
	f.Intrinsic.Control.If(V.Screen.FormExportMaintenance!ddlProfile.Text.trim,=,V.DataTable.dtProfiles(V.Args.rowindex).PROFILE!fieldvalTrim)
		GUI.FormExportMaintenance.ddlProfile.ListIndex(-1)
		f.Intrinsic.Control.CallSub(ddlProfile_Click)
		F.Intrinsic.Control.CallSub(NoProfile)
	F.Intrinsic.Control.Else
		V.Local.sProfile.Set(V.Screen.FormExportMaintenance!ddlProfile.Text.trim)
	f.Intrinsic.Control.EndIf
	
	f.Data.DataTable.DeleteRow("dtProfiles",V.Args.rowindex)
	F.Data.DataTable.AcceptChanges("dtProfiles")
	
	GUI.FormExportMaintenance.ddlProfile.ClearItems
	GUI.FormExportMaintenance.ddlProfile.AddItems("DataTable","dtProfiles","PROFILE","PROFILE")
	GUI.FormExportMaintenance.ddlProfile.FindItem(V.Local.sProfile, False, V.Local.iIndex)
	GUI.FormExportMaintenance.ddlProfile.ListIndex(V.Local.iIndex.--)
	f.Intrinsic.Control.UnBlockEvents
	
f.Intrinsic.Control.ElseIf(V.Args.column.Ucase,=,"DEFAULT_PROFILE")

	GUI.FormProfiles.GsGCProfile.SuspendLayout
	f.Intrinsic.Control.If(V.DataTable.dtProfiles(V.Args.RowIndex).DEFAULT_PROFILE!FieldVal,=,false)
		f.Data.DataTable.SetValue("dtProfiles",-1,"DEFAULT_PROFILE",False)
		f.Data.DataTable.SetValue("dtProfiles",V.Args.RowIndex,"DEFAULT_PROFILE",True)
		f.Data.DataTable.SaveToDB("dtProfiles","Con","GCG_4980_NESTPROFILE","PROFILE",256,"PROFILE@!@PROFILE*!*DEFAULT_PROFILE@!@DEFAULT_PROFILE")
	f.Intrinsic.Control.EndIf

	GUI.FormProfiles.GsGCProfile.ResumeLayout
	
f.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.GsGCProfile_RowCellClick.End

Program.Sub.FormImportMaintenance_UnLoad.Start
F.Intrinsic.Control.Try

GUI.FormImportMaintenance..visible(False)
GUI.FormExportMaintenance..Visible(True)
GUI.FormExportMaintenance..Enabled(True)
GUI.FormExportMaintenance..SetFocus

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.FormImportMaintenance_UnLoad.End

Program.Sub.cmdImpRemList_Click.Start
F.Intrinsic.Control.Try

V.Local.sFieldList.Declare
V.Local.sFieldListRaw.Declare
V.Local.iCount.Declare
V.Local.iret.Declare
V.Local.bExists.Declare
V.Local.sCount.Declare
V.Local.sSQL.Declare

V.Local.sFieldList.Set(V.Screen.FormImportMaintenance!txtImpRemList.text.trim)
f.Intrinsic.String.Replace(V.Local.sFieldList," ","",V.Local.sFieldList)
f.Intrinsic.String.Replace(V.Local.sFieldList,V.Ambient.NewLine,"",V.Local.sFieldList)
f.Intrinsic.Control.If(V.Local.sFieldList.Trim,=,"")
	f.Intrinsic.UI.Msgbox("You need have the field list typed in as a comma separated string in the text box in order to import the remnant field list!")
	f.Intrinsic.Control.ExitSub
f.Intrinsic.Control.EndIf
V.Local.sFieldListRaw.Set(V.Local.sFieldList)
f.Intrinsic.String.Split(V.Local.sFieldList,",",V.Local.sFieldList)
f.Intrinsic.Control.If(V.Local.sFieldList.UBound,<,1)
	f.Intrinsic.UI.Msgbox("You need have the field list typed in as a comma separated string in the text box in order to import the remnant field list!")
	f.Intrinsic.Control.ExitSub
f.Intrinsic.Control.EndIf
GUI.FormImportMaintenance..Enabled(False)
f.Intrinsic.Control.If(V.DataTable.fRemDT.RowCount,>,0)
	f.Intrinsic.UI.Msgbox("You have an existing field list, do you want to overwrite it by importing a new list?","Overwrite Field List?",4,V.Local.iRet)
	f.Intrinsic.Control.If(V.Local.iRet,=,7)
		GUI.FormImportMaintenance..Enabled(True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
f.Intrinsic.Control.EndIf
f.Intrinsic.String.Build("UPDATE GCG_4980_NESTPROFILE SET REM_FMAP = '{0}' where PROFILE = '{1}'",V.Local.sFieldListRaw.Trim,V.Global.sProfile,V.Local.sSQL )

f.ODBC.Connection!Con.execute(V.Local.sSQL)

f.Data.DataTable.DeleteRow("FRemDT")

f.Data.DataTable.AcceptChanges("FRemDT")
f.Intrinsic.Control.For(V.Local.iCount,0,V.Local.sFieldList.UBound,1)
	f.Intrinsic.Control.If(V.Local.sFieldList(V.Local.iCount).trim,<>,"")
		f.Data.DataTable.AddRow("FRemDT","IMPFIELD",V.Local.sFieldList(V.Local.iCount),"INDX",V.Local.icount,"PROFILE",V.Global.sProfile)
	f.Intrinsic.Control.EndIf
f.Intrinsic.Control.Next(V.Local.iCount)
V.Local.sFieldList.Redim(0,0)
f.Intrinsic.String.Build("Delete from GCG_4980_REMMAINT where profile = '{0}'",V.Global.sProfile,V.Local.sSql)
f.ODBC.Connection!Con.execute(V.Local.sSQL)
f.Data.DataTable.SaveToDB("FRemDT","Con","GCG_4980_REMMAINT","PROFILE*!*IMPFIELD",256,"PROFILE@!@PROFILE*!*IMPFIELD@!@IMPFIELD*!*INDX@!@INDX")
f.Intrinsic.Control.BlockEvents

f.Intrinsic.String.Build("select RTRIM(IMPFIELD) as IMPFIELD, INDX, RTRIM(PROFILE) as PROFILE from GCG_4980_REMMAINT where profile = '{0}' order by INDX ASC",V.Global.sProfile,V.Local.sSql)

f.Data.Dictionary.Exists("RNIDDICT",V.Local.bExists)
f.Intrinsic.Control.If(V.Local.bExists)
	f.Data.Dictionary.Close("RNIDDICT")
f.Intrinsic.Control.EndIf
f.Data.Dictionary.CreateFromDatatable("RNIDDICT","FRemDT","INDX","IMPFIELD")
GUI.FormImportMaintenance.ddlRemNestID.ClearItems
GUI.FormImportMaintenance.ddlRemNestID.additem("")
GUI.FormImportMaintenance.ddlRemNestID.additems("Dictionary","RNIDDICT")

f.Data.Dictionary.Exists("RLDICT",V.Local.bExists)
f.Intrinsic.Control.If(V.Local.bExists)
	f.Data.Dictionary.Close("RLDICT")
f.Intrinsic.Control.EndIf
f.Data.Dictionary.CreateFromDatatable("RLDICT","FRemDT","INDX","IMPFIELD")
GUI.FormImportMaintenance.ddlRemLength.ClearItems
GUI.FormImportMaintenance.ddlRemLength.additem("")
GUI.FormImportMaintenance.ddlRemLength.additems("Dictionary","RLDICT")

f.Data.Dictionary.Exists("RBDICT",V.Local.bExists)
f.Intrinsic.Control.If(V.Local.bExists)
	f.Data.Dictionary.Close("RBDICT")
f.Intrinsic.Control.EndIf
f.Data.Dictionary.CreateFromDatatable("RBDICT","FRemDT","INDX","IMPFIELD")
GUI.FormImportMaintenance.ddlRemBreadth.ClearItems
GUI.FormImportMaintenance.ddlRemBreadth.additem("")
GUI.FormImportMaintenance.ddlRemBreadth.additems("Dictionary","RBDICT")

f.Data.Dictionary.Exists("RWDICT",V.Local.bExists)
f.Intrinsic.Control.If(V.Local.bExists)
	f.Data.Dictionary.Close("RWDICT")
f.Intrinsic.Control.EndIf
f.Data.Dictionary.CreateFromDatatable("RWDICT","FRemDT","INDX","IMPFIELD")
GUI.FormImportMaintenance.ddlRemWeight.ClearItems
GUI.FormImportMaintenance.ddlRemWeight.additem("")
GUI.FormImportMaintenance.ddlRemWeight.additems("Dictionary","RWDICT")

GUI.FormImportMaintenance.ddlDropID.ClearItems
GUI.FormImportMaintenance.ddlDropID.additem("")
GUI.FormImportMaintenance.ddlDropID.AddItems("DataTable", "FRemDT", "INDX", "IMPFIELD")

GUI.FormImportMaintenance..Enabled(True)
f.Intrinsic.Control.UnBlockEvents

GUI.FormImportMaintenance..SetFocus

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.cmdImpRemList_Click.End

Program.Sub.cmdImpFieldList_Click.Start
F.Intrinsic.Control.Try

V.Local.sFieldList.Declare
V.Local.sFieldListRaw.Declare
V.Local.iCount.Declare
V.Local.iret.Declare
V.Local.bExists.Declare
V.Local.sCount.Declare
V.Local.sSQL.Declare

V.Local.sFieldList.Set(V.Screen.FormImportMaintenance!txtImpFieldList.text)
f.Intrinsic.String.Replace(V.Local.sFieldList," ","",V.Local.sFieldList)
f.Intrinsic.Control.If(V.Local.sFieldList.Trim,=,"")
	f.Intrinsic.UI.Msgbox("You need have the field list typed in as a comma separated string in the text box in order to import the field list!")
	f.Intrinsic.Control.ExitSub
f.Intrinsic.Control.EndIf
V.Local.sFieldListRaw.Set(V.Local.sFieldList)
f.Intrinsic.String.Split(V.Local.sFieldList,",",V.Local.sFieldList)
f.Intrinsic.Control.If(V.Local.sFieldList.UBound,<,1)
	f.Intrinsic.UI.Msgbox("You need have the field list typed in as a comma separated string in the text box in order to import the field list!")
	f.Intrinsic.Control.ExitSub
f.Intrinsic.Control.EndIf
GUI.FormImportMaintenance..Enabled(False)
f.Intrinsic.Control.If(V.DataTable.FImpDT.RowCount,>,0)
	f.Intrinsic.UI.Msgbox("You have an existing field list, do you want to overwrite it by importing a new list?","Overwrite Field List?",4,V.Local.iRet)
	f.Intrinsic.Control.If(V.Local.iRet,=,7)
		GUI.FormImportMaintenance..Enabled(True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
f.Intrinsic.Control.EndIf
f.Intrinsic.String.Build("UPDATE GCG_4980_NESTPROFILE SET IMP_FMAP = '{0}', NEST_ID = '', WO_NUMBER = '', RAW_MAT = '', QTY = '', AREA_P_PART = '', DATE_PROCESSED = '' , TIME_PER_PART = '', LABOR_WC = '', GOOD_PC = '', BAD_PC = '' where PROFILE = '{1}'",V.Local.sFieldListRaw.Trim,V.Global.sProfile,V.Local.sSQL )

f.ODBC.Connection!Con.execute(V.Local.sSQL)

f.Data.DataTable.DeleteRow("FImpDT")

f.Data.DataTable.AcceptChanges("FImpDT")
f.Intrinsic.Control.For(V.Local.iCount,0,V.Local.sFieldList.UBound,1)
	f.Intrinsic.Control.If(V.Local.sFieldList(V.Local.iCount).trim,<>,"")
		f.Data.DataTable.AddRow("FImpDT","IMPFIELD",V.Local.sFieldList(V.Local.iCount),"INDX",V.Local.icount,"PROFILE",V.Global.sProfile)

	f.Intrinsic.Control.EndIf

f.Intrinsic.Control.Next(V.Local.iCount)
V.Local.sFieldList.Redim(0,0)
f.Intrinsic.String.Build("Delete from GCG_4980_IMPMAINT where profile = '{0}'",V.Global.sProfile,V.Local.sSql)
f.ODBC.Connection!Con.execute(V.Local.sSQL)
f.Data.DataTable.SaveToDB("FImpDT","Con","GCG_4980_IMPMAINT","PROFILE*!*IMPFIELD",256,"PROFILE@!@PROFILE*!*IMPFIELD@!@IMPFIELD*!*INDX@!@INDX")
f.Intrinsic.Control.BlockEvents

f.Intrinsic.String.Build("select RTRIM(IMPFIELD) as IMPFIELD, INDX, RTRIM(PROFILE) as PROFILE from GCG_4980_IMPMAINT where profile = '{0}' order by INDX ASC",V.Global.sProfile,V.Local.sSql)

'add expression / static columns

f.Data.Dictionary.Exists("NIDDICT",V.Local.bExists)
f.Intrinsic.Control.If(V.Local.bExists)
	f.Data.Dictionary.Close("NIDDICT")
f.Intrinsic.Control.EndIf
f.Data.Dictionary.CreateFromDatatable("NIDDICT","FImpDT","INDX","IMPFIELD")
GUI.FormImportMaintenance.ddlNestID.ClearItems
GUI.FormImportMaintenance.ddlNestID.AddItem("", 0)
GUI.FormImportMaintenance.ddlNestID.additems("Dictionary","NIDDICT")

f.Data.Dictionary.Exists("WODICT",V.Local.bExists)
f.Intrinsic.Control.If(V.Local.bExists)
	f.Data.Dictionary.Close("WODICT")
f.Intrinsic.Control.EndIf
f.Data.Dictionary.CreateFromDatatable("WODICT","FImpDT","INDX","IMPFIELD")
GUI.FormImportMaintenance.ddlWO.ClearItems
GUI.FormImportMaintenance.ddlWO.AddItem("", 0)
GUI.FormImportMaintenance.ddlWO.additems("Dictionary","WODICT")

f.Data.Dictionary.Exists("RMDDICT",V.Local.bExists)
f.Intrinsic.Control.If(V.Local.bExists)
	f.Data.Dictionary.Close("RMDDICT")
f.Intrinsic.Control.EndIf
f.Data.Dictionary.CreateFromDatatable("RMDDICT","FImpDT","INDX","IMPFIELD")
GUI.FormImportMaintenance.ddlRawMat.ClearItems
GUI.FormImportMaintenance.ddlRawMat.AddItem("", 0)
GUI.FormImportMaintenance.ddlRawMat.additems("Dictionary","RMDDICT")

f.Data.Dictionary.Exists("LOCDICT",V.Local.bExists)
f.Intrinsic.Control.If(V.Local.bExists)
	f.Data.Dictionary.Close("LOCDICT")
f.Intrinsic.Control.EndIf
f.Data.Dictionary.CreateFromDatatable("LOCDICT","FImpDT","INDX","IMPFIELD")
GUI.FormImportMaintenance.ddlLocation.ClearItems
GUI.FormImportMaintenance.ddlLocation.AddItem("", 0)
GUI.FormImportMaintenance.ddlLocation.additems("Dictionary","LOCDICT")

'f.Data.Dictionary.Exists("QTYDICT",V.Local.bExists)
'f.Intrinsic.Control.If(V.Local.bExists)
'	f.Data.Dictionary.Close("QTYDICT")
'f.Intrinsic.Control.EndIf
'f.Data.Dictionary.CreateFromDatatable("QTYDICT","FImpDT","INDX","IMPFIELD")
'GUI.FormImportMaintenance.ddlQty.ClearItems
'GUI.FormImportMaintenance.ddlQty.AddItem("", 0)
'GUI.FormImportMaintenance.ddlQty.additems("Dictionary","QTYDICT")

f.Data.Dictionary.Exists("APPDICT",V.Local.bExists)
f.Intrinsic.Control.If(V.Local.bExists)
	f.Data.Dictionary.Close("APPDICT")
f.Intrinsic.Control.EndIf
f.Data.Dictionary.CreateFromDatatable("APPDICT","FImpDT","INDX","IMPFIELD")
GUI.FormImportMaintenance.ddlAreaPerPart.ClearItems
GUI.FormImportMaintenance.ddlAreaPerPart.AddItem("", 0)
GUI.FormImportMaintenance.ddlAreaPerPart.additems("Dictionary","APPDICT")

f.Data.Dictionary.Exists("TPPDICT",V.Local.bExists)
f.Intrinsic.Control.If(V.Local.bExists)
	f.Data.Dictionary.Close("TPPDICT")
f.Intrinsic.Control.EndIf
f.Data.Dictionary.CreateFromDatatable("TPPDICT","FImpDT","INDX","IMPFIELD")
GUI.FormImportMaintenance.ddlTimePerPart.ClearItems
GUI.FormImportMaintenance.ddlTimePerPart.AddItem("", 0)
GUI.FormImportMaintenance.ddlTimePerPart.additems("Dictionary","TPPDICT")
f.Data.Dictionary.Exists("LWCDICT",V.Local.bExists)
f.Intrinsic.Control.If(V.Local.bExists)
	f.Data.Dictionary.Close("LWCDICT")
f.Intrinsic.Control.EndIf
f.Data.Dictionary.CreateFromDatatable("LWCDICT","FImpDT","INDX","IMPFIELD")
GUI.FormImportMaintenance.ddlLaborWc.ClearItems
GUI.FormImportMaintenance.ddlLaborWc.AddItem("", 0)
GUI.FormImportMaintenance.ddlLaborWc.additems("Dictionary","LWCDICT")

f.Data.Dictionary.Exists("GPCDICT",V.Local.bExists)
f.Intrinsic.Control.If(V.Local.bExists)
	f.Data.Dictionary.Close("GPCDICT")
f.Intrinsic.Control.EndIf
f.Data.Dictionary.CreateFromDatatable("GPCDICT","FImpDT","INDX","IMPFIELD")
GUI.FormImportMaintenance.ddlGoodPc.ClearItems
GUI.FormImportMaintenance.ddlGoodPc.AddItem("", 0)
GUI.FormImportMaintenance.ddlGoodPc.additems("Dictionary","GPCDICT")

f.Data.Dictionary.Exists("WTDICT",V.Local.bExists)
f.Intrinsic.Control.If(V.Local.bExists)
	f.Data.Dictionary.Close("WTDICT")
f.Intrinsic.Control.EndIf
f.Data.Dictionary.CreateFromDatatable("WTDICT","FImpDT","INDX","IMPFIELD")
GUI.FormImportMaintenance.ddlWeight.ClearItems
GUI.FormImportMaintenance.ddlWeight.AddItem("", 0)
GUI.FormImportMaintenance.ddlWeight.additems("Dictionary","WTDICT")

'*****************************************************************************************************************************************
f.Data.Dictionary.Exists("JADICT",V.Local.bExists)
f.Intrinsic.Control.If(V.Local.bExists)
	f.Data.Dictionary.Close("JADICT")
f.Intrinsic.Control.EndIf
f.Data.Dictionary.CreateFromDatatable("JADICT","FImpDT","INDX","IMPFIELD")
GUI.FormImportMaintenance.ddlJobArea.ClearItems
GUI.FormImportMaintenance.ddlJobArea.AddItem("", 0)
GUI.FormImportMaintenance.ddlJobArea.additems("Dictionary","JADICT")
'*****************************************************************************************************************************************

f.Data.Dictionary.Exists("BPCDICT",V.Local.bExists)
f.Intrinsic.Control.If(V.Local.bExists)
	f.Data.Dictionary.Close("BPCDICT")
f.Intrinsic.Control.EndIf
f.Data.Dictionary.CreateFromDatatable("BPCDICT","FImpDT","INDX","IMPFIELD")
GUI.FormImportMaintenance.ddlBadPc.ClearItems
GUI.FormImportMaintenance.ddlBadPc.additem("")
GUI.FormImportMaintenance.ddlBadPc.additems("Dictionary","BPCDICT")

f.Data.Dictionary.Exists("dictPartWeight",V.Local.bExists)
f.Intrinsic.Control.If(V.Local.bExists)
	f.Data.Dictionary.Close("dictPartWeight")
f.Intrinsic.Control.EndIf
f.Data.Dictionary.CreateFromDatatable("dictPartWeight","FImpDT","INDX","IMPFIELD")
GUI.FormImportMaintenance.ddlPartWeight.ClearItems
GUI.FormImportMaintenance.ddlPartWeight.additem("")
GUI.FormImportMaintenance.ddlPartWeight.additems("Dictionary","dictPartWeight")

GUI.FormImportMaintenance.ddlSheetArea.ClearItems
GUI.FormImportMaintenance.ddlEmployee.ClearItems
GUI.FormImportMaintenance.ddlSheetArea.additem("")
GUI.FormImportMaintenance.ddlEmployee.additem("")
GUI.FormImportMaintenance.ddlSheetArea.AddItems("DataTable", "FImpDT", "INDX", "IMPFIELD")
GUI.FormImportMaintenance.ddlEmployee.AddItems("DataTable", "FImpDT", "INDX", "IMPFIELD")

GUI.FormImportMaintenance.frameImpStd.Enabled(True)
GUI.FormImportMaintenance..Enabled(True)
f.Intrinsic.Control.UnBlockEvents

GUI.FormImportMaintenance..SetFocus

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.cmdImpFieldList_Click.End

Program.Sub.optIssuInv_Click.Start
F.Intrinsic.Control.Try

GUI.FormImportMaintenance.txtLotBin.Enabled(False)
GUI.FormImportMaintenance.cmdBrwLotBin.Enabled(False)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.optIssuInv_Click.End

Program.Sub.optIssuDefBin_Click.Start
F.Intrinsic.Control.Try

GUI.FormImportMaintenance.txtLotBin.Enabled(False)
GUI.FormImportMaintenance.cmdBrwLotBin.Enabled(False)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.optIssuDefBin_Click.End

Program.Sub.chkBackFlushMat_Click.Start
F.Intrinsic.Control.Try

f.Intrinsic.Control.If(V.Screen.FormImportMaintenance!chkBackFlushMat.CheckedAsBoolean)
	GUI.FormImportMaintenance.frameMatOptions.Enabled(True)
	GUI.FormImportMaintenance.chkRemnant.Enabled(True)
f.Intrinsic.Control.Else
	GUI.FormImportMaintenance.frameMatOptions.Enabled(False)
	GUI.FormImportMaintenance.chkRemnant.Value(False)
	GUI.FormImportMaintenance.chkRemnant.Enabled(False)
f.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.chkBackFlushMat_Click.End

Program.Sub.chkBackFlushLab_Click.Start
F.Intrinsic.Control.Try

F.Intrinsic.Control.If(V.Screen.FormImportMaintenance!chkBackFlushLab.CheckedAsBoolean)
	GUI.FormImportMaintenance.frameLaborOptions.Enabled(True)
	GUI.FormImportMaintenance.chkFlexSchedule.Value(False)
F.Intrinsic.Control.Else
	GUI.FormImportMaintenance.frameLaborOptions.Enabled(False)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.chkBackFlushLab_Click.End

Program.Sub.cmdBrwEmp_Click.Start
F.Intrinsic.Control.Try

V.Local.sSql.Declare
V.local.sTitles.Declare
V.Local.iWidths.Declare
V.Local.sRet.Declare
V.Local.sDisp.Declare

'create browser
V.Local.sSql.Set("select EMPLOYEE, NAME from V_EMPLOYEE_MSTR where DATE_TERMINATION = '1900-01-01'")
F.Intrinsic.String.Split("Employee ID*!*Name","*!*",V.Local.sTitles)
F.Intrinsic.String.Split("300*!*600","*!*",V.Local.iWidths)
F.Intrinsic.UI.SetBrowserHotTypeAhead(True)
f.Intrinsic.UI.Browser("Select Employee","Con",V.Local.sSql,V.Local.sTitles,V.Local.iWidths,V.Local.sRet)

'handle return
F.Intrinsic.Control.If(V.Local.sRet,=,V.Ambient.Cancel)
	f.Intrinsic.Control.ExitSub
f.Intrinsic.Control.else
	f.Intrinsic.String.Split(V.Local.sRet,"*!*",V.local.sRet)
	GUI.FormImportMaintenance.txtDefEmp.Text(V.Local.sRet(0))
f.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.cmdBrwEmp_Click.End

Program.Sub.cmdBrwWCWG_Click.Start
F.Intrinsic.Control.Try

V.Local.sSql.Declare
V.local.sTitles.Declare
V.Local.iWidths.Declare
V.Local.sRet.Declare
V.Local.sDisp.Declare

'create browser
F.Intrinsic.String.Split("300*!*600","*!*",V.Local.iWidths)
F.Intrinsic.UI.SetBrowserHotTypeAhead(True)

f.Intrinsic.Control.If(V.Screen.FormImportMaintenance!optWG.Value)	
	V.Local.sSql.Set("select WORK_GROUP, DESCR from WORKGROUP_HEAD")
	F.Intrinsic.String.Split("Work Group*!*Description","*!*",V.Local.sTitles)
	f.Intrinsic.UI.Browser("Select Work Group","Con",V.Local.sSql,V.Local.sTitles,V.Local.iWidths,V.Local.sRet)
	V.Global.bWG.Set(True)
	V.Global.bWC.Set(False)
f.Intrinsic.Control.ElseIf(V.Screen.FormImportMaintenance!optWC.Value)
	
	V.Local.sSql.Set("select Machine, WC_NAME from WORKCENTERS")
	F.Intrinsic.String.Split("Work Center*!*Description","*!*",V.Local.sTitles)
	f.Intrinsic.UI.Browser("Select Work Center","Con",V.Local.sSql,V.Local.sTitles,V.Local.iWidths,V.Local.sRet)
	V.Global.bWC.Set(True)
	V.Global.bWG.Set(False)
f.Intrinsic.Control.Else
	f.Intrinsic.Control.ExitSub
f.Intrinsic.Control.EndIf
'handle return
F.Intrinsic.Control.If(V.Local.sRet,=,V.Ambient.Cancel)
	f.Intrinsic.Control.ExitSub
f.Intrinsic.Control.else
	f.Intrinsic.String.Split(V.Local.sRet,"*!*",V.local.sRet)
	GUI.FormImportMaintenance.txtWCWG.Text(V.Local.sRet(0))	
f.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.cmdBrwWCWG_Click.End

Program.Sub.optWC_Click.Start
F.Intrinsic.Control.Try

GUI.FormImportMaintenance.txtWCWG.Enabled(True)
GUI.FormImportMaintenance.cmdBrwWCWG.Enabled(True)
f.Intrinsic.control.If(V.Global.bWG)
	GUI.FormImportMaintenance.txtWCWG.Text("")
	V.Global.bWC.Set(True)
	V.Global.bWG.Set(False)
f.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.optWC_Click.End

Program.Sub.optWG_Click.Start
F.Intrinsic.Control.Try

GUI.FormImportMaintenance.txtWCWG.Enabled(True)
GUI.FormImportMaintenance.cmdBrwWCWG.Enabled(True)
f.Intrinsic.control.If(V.Global.bWC)
	GUI.FormImportMaintenance.txtWCWG.Text("")
	
	V.Global.bWG.Set(True)
	V.Global.bWC.Set(False)
f.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.optWG_Click.End

Program.Sub.cmdSaveImpConf_Click.Start
F.Intrinsic.Control.Try

V.Local.sImpPath.Declare
V.Local.bBackFlushMat.Declare
V.Local.bOptIssuInV.Declare
V.Local.boptIssuDefBin.Declare
V.Local.boptManBin.Declare
V.Local.sLocation.Declare
V.Local.sBin.Declare
V.Local.bBackFlushLabor.Declare
V.Local.sEmp.Declare
V.Local.bWCWG.Declare
V.Local.bWC.Declare
V.Local.bWG.Declare
V.Local.bRem.Declare
V.Local.bOffline.Declare
V.Local.bOnline.Declare
V.Local.bWCXref.Declare
V.Local.sWCWG.Declare
V.Local.bExists.Declare
V.Local.sNestID.Declare
V.Local.sWO.Declare
V.Local.sRawMat.Declare
V.Local.bMiscMat.Declare
V.Local.sGPc.Declare
V.Local.sBPc.Declare
V.Local.sJob.Declare(String)
V.Local.sQty.Declare
V.Local.sAreaPPart.Declare
V.Local.sDateProessed.Declare
V.Local.sTimePerPart.Declare
V.Local.sSQL.Declare
V.Local.sFilter.Declare
V.Local.sLaborWC.Declare
V.Local.sRemPath.Declare
V.Local.sWeight.Declare
V.Local.sRemNestID.Declare
V.Local.sRemRawMat.Declare
V.Local.sRemLength.Declare
V.Local.sRemBreadth.Declare
V.Local.sRemWeight.Declare
V.Local.bOptRem.Declare
V.Local.sRemBin.Declare
V.Local.bIndirectIssue.Declare(Boolean)
V.Local.sIssueWO.Declare(String)

GUI.FormImportMaintenance..Enabled(False)

f.Intrinsic.String.Build("IMPORT_FOLDER = '{0}' AND XPTYPE <> '{1}'",V.Local.sImpPath,V.Global.sXPType,V.Local.sFilter)
f.Data.DataView.Create("dtProfiles","CheckVw",22,V.Local.sFilter,"")
f.Intrinsic.Control.If(V.DataView.dtProfiles!CheckVw.RowCount,>,0)
	f.Intrinsic.UI.Msgbox("The import path needs to be distinct unless it is for the same nesting program.")
	f.Data.DataView.Close("dtProfiles","CheckVw")
	GUI.FormImportMaintenance..Enabled(True)
	f.Intrinsic.Control.ExitSub
f.Intrinsic.Control.EndIf
f.Data.DataView.Close("dtProfiles","CheckVw")
	
V.Local.bBackFlushMat.Set(V.Screen.FormImportMaintenance!chkBackFlushMat.checkedasboolean)
V.Local.bOffline.Set(V.Screen.FormImportMaintenance!optBOffline.value)
V.Local.bOnline.Set(V.Screen.FormImportMaintenance!optBOnline.value)
V.Local.bWCXref.Set(V.Screen.FormImportMaintenance!chkWCCrossRef.checkedasboolean)
V.Local.bWCWG.Set(V.Screen.FormImportMaintenance!chkWCWG.checkedasboolean)
V.Local.sLaborWC.Set(V.Screen.FormImportMaintenance!ddlLaborWc.text.trim)
V.Local.sLocation.Set(V.Screen.FormImportMaintenance!ddlLocation.text.trim)
	
f.Intrinsic.Control.if(V.Local.bBackFlushMat)
	V.Local.bOptIssuInV.Set(V.Screen.FormImportMaintenance!optIssuInV.value)
	V.Local.boptIssuDefBin.Set(V.Screen.FormImportMaintenance!optIssuDefBin.value)
	V.Local.boptManBin.Set(V.Screen.FormImportMaintenance!optManualBin.value)
	V.Local.bMiscMat.Set(V.Screen.FormImportMaintenance!chkMatMisc.value)

	f.Intrinsic.Control.If(V.Local.boptManBin)
		V.Local.sBin.Set(V.Screen.FormImportMaintenance!txtLotBin.text.trim)
		f.Intrinsic.Control.If(V.Screen.FormImportMaintenance!txtLotBin.text.trim,=,"")
			f.Intrinsic.UI.Msgbox("You need specify a Bin if you select the corresponding option")
			GUI.FormImportMaintenance..Enabled(True)
			f.Intrinsic.Control.ExitSub
		f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf
f.Intrinsic.Control.EndIf

V.Local.bBackFlushLabor.Set(V.Screen.FormImportMaintenance!chkBackFlushLab.checkedasboolean)
f.Intrinsic.Control.If(V.Local.bBackFlushLabor)		
	V.Local.sEmp.Set(V.Screen.FormImportMaintenance!txtDefEmp.text.trim)
	f.Intrinsic.Control.If(V.Screen.FormImportMaintenance!txtDefEmp.text.trim,=,"")
		f.Intrinsic.UI.Msgbox("You need specify an Employee if you want to back flush labor")
		GUI.FormImportMaintenance..Enabled(True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
f.Intrinsic.Control.Else
	V.Local.sBPc.set("")
	V.Local.sTimePerPart.set("")
f.Intrinsic.Control.EndIf

f.Intrinsic.control.If(V.Local.bWCWG)
	V.Local.bWC.Set(V.Screen.FormImportMaintenance!optWC.value)
	V.Local.bWG.Set(V.Screen.FormImportMaintenance!optWG.value)
	V.Local.sWCWG.Set(V.Screen.FormImportMaintenance!txtWCWG.text.trim)
	f.Intrinsic.Control.If(V.Screen.FormImportMaintenance!txtWCWG.text.trim,=,"")
		f.Intrinsic.UI.Msgbox("You need specify work center or work group if you want to create a flex schedule for the corresponding subsequent sequence")
		GUI.FormImportMaintenance..Enabled(True)
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
f.Intrinsic.Control.EndIf

V.Local.bRem.Set(V.Screen.FormImportMaintenance!chkRemnant.checkedasboolean)
f.Intrinsic.Control.If(V.Local.bRem)
	V.Local.sRemPath.Set(V.Screen.FormImportMaintenance!txtRemPath.text.trim)
	V.Local.sRemBin.Set(V.Screen.FormImportMaintenance!txtRemLotBin.text.trim)
	F.Intrinsic.Control.If(V.Global.sXPtype, !=, "N", AND, V.Global.sXPtype, !=, "B")
		F.Intrinsic.Control.If(V.Screen.FormImportMaintenance!ddlDropID.Text.Trim, =, "")
			F.Intrinsic.UI.Msgbox("Drop ID mapping is required for remnant importing.")
			GUI.FormImportMaintenance..Enabled(True)
			f.Intrinsic.Control.ExitSub
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
f.Intrinsic.Control.EndIf

f.Intrinsic.Control.If(V.Screen.FormImportMaintenance!chkIndirectIssue.CheckedAsBoolean)
	F.Intrinsic.Control.If(V.Screen.FormImportMaintenance!txtIndirectIssue.Text.Trim, =, "")
		f.Intrinsic.UI.Msgbox("Issue waste to indirect Work Order is selected but no work order is set.")
		GUI.FormImportMaintenance..Enabled(True)
		f.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.Else
	
		F.Intrinsic.String.Split(V.Screen.FormImportMaintenance!txtIndirectIssue.Text.Trim, "-", V.Local.sJob)
		F.Intrinsic.String.Build("select JOB from V_JOB_OPERATIONS where LMO = 'M' and JOB = '{0}' and SUFFIX = '{1}' and SEQ = '{2}'", V.Local.sJob(0).Trim, V.Local.sJob(1).Trim, V.Local.sJob(2).Trim, V.Local.sSQL)
		F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sSQL)
		F.Intrinsic.Control.If(V.Ambient.ExecuteAndReturnEOF)
			f.Intrinsic.UI.Msgbox("Issue waste to indirect Work Order is selected but the work order set is not valid.")
			GUI.FormImportMaintenance..Enabled(True)
			f.Intrinsic.Control.ExitSub
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
f.Intrinsic.Control.EndIf

V.Local.sRemNestID.Set(V.Screen.FormImportMaintenance!ddlRemNestID.text.trim)
V.Local.sRemLength.Set(V.Screen.FormImportMaintenance!ddlRemLength.text.trim)
V.Local.sRemBreadth.Set(V.Screen.FormImportMaintenance!ddlRemBreadth.text.trim)
V.Local.sRemWeight.Set(V.Screen.FormImportMaintenance!ddlRemWeight.text.trim)
V.Local.sNestID.set(V.Screen.FormImportMaintenance!ddlNestID.text.trim)
V.Local.sWO.set(V.Screen.FormImportMaintenance!ddlWO.text.trim)
V.Local.sRawMat.set(V.Screen.FormImportMaintenance!ddlRawMat.text.trim)
V.Local.sAreaPPart.set(V.Screen.FormImportMaintenance!ddlAreaPerPart.text.trim)	
V.Local.sWeight.set(V.Screen.FormImportMaintenance!ddlWeight.text.trim)
V.Local.sGPc.set(V.Screen.FormImportMaintenance!ddlGoodPc.text.trim)
V.Local.sGPc.set(V.Screen.FormImportMaintenance!ddlGoodPc.text.trim)
V.Local.sBPc.set(V.Screen.FormImportMaintenance!ddlBadPc.text.trim)
V.Local.sTimePerPart.set(V.Screen.FormImportMaintenance!ddlTimePerPart.text.trim)
V.Local.bIndirectIssue.Set(V.Screen.FormImportMaintenance!chkIndirectIssue.CheckedAsBoolean)
V.Local.sIssueWO.Set(V.Screen.FormImportMaintenance!txtIndirectIssue.Text.Trim)
V.Local.sEmp.Set(V.Screen.FormImportMaintenance!txtDefEmp.text.trim)

f.Intrinsic.String.Build("UPDATE GCG_4980_NESTPROFILE SET BACK_FLUSH_MAT = {0}, ISSUE_FROM_INV = {1}, DEFAULT_BIN_INV = {2}, MANUAL_BIN = {3} , MANUAL_BIN_ENTRY = '{4}' , BACK_FLUSH_LAB = {5} , DEFAULT_EMP = '{6}' , WCWG = {7} , WC = {8} , WG = {9}  , NEST_ID = '{10}' , WO_NUMBER = '{11}' , RAW_MAT = '{12}' , QTY = '{13}' , AREA_P_PART = '{14}' , DATE_PROCESSED = '{15}' , TIME_PER_PART = '{16}' , WORKCG = '{17}', IMPORT_FOLDER = '{18}',LABOR_WC = '{19}',USE_INTERFACE = {20},GOOD_PC = '{21}',MAT_WEIGHT = '{22}',BAD_PC = '{23}',REMNANT = {24} ,REM_FOLDER = '{25}',REM_NESTID = '{26}',REM_RAWMAT = '{27}',REM_LENGTH = '{28}',REM_BREADTH = '{29}',REM_WEIGHT = '{30}',REM_BIN_ENTRY = '{31}', BACKFLUSH_MISC_MAT = '{32}', MAT_LOCATION = '{33}',WC_XREF = {34},OffLINE_IMP = {35},ONLINE_IMP = {36}, INDIRECT_ISSUE = '{37}', ISSUE_WO = '{38}' where PROFILE = '{39}'",V.Local.bBackFlushMat.long,V.Local.bOptIssuInV.long,V.Local.boptIssuDefBin.long,V.Local.boptManBin.long,V.Local.sBin.Trim,V.Local.bBackFlushLabor.long,V.Local.sEmp.Trim,V.Local.bWCWG.long,V.Local.bWC.long,V.Local.bWG.long,V.Local.sNestID.Trim,V.Local.sWO.Trim,V.Local.sRawMat.Trim,V.Local.sQty.Trim,V.Local.sAreaPPart.Trim,V.Local.sDateProessed.Trim,V.Local.sTimePerPart.Trim,V.Local.sWCWG.Trim,V.Local.sImpPath.Trim,V.Local.sLaborWC.Trim, 0, V.Local.sGPc.Trim,V.Local.sWeight.Trim,V.Local.sBPc.Trim,V.Local.bRem.long,V.Local.sRemPath.Trim,V.Local.sRemNestID.Trim,"",V.Local.sRemLength.Trim,V.Local.sRemBreadth.Trim,V.Local.sRemWeight.Trim,V.Local.sRemBin.Trim,V.Local.bMiscMat.Long,V.Local.sLocation.Trim,V.Local.bWCXref.Long,V.Local.bOffline.Long,V.Local.bOnline.Long, V.Local.bIndirectIssue.Long, V.Local.sIssueWO.Trim, V.Global.sProfile.Trim, V.Local.sSQL)

f.ODBC.Connection!Con.execute(V.Local.sSQL)

F.Intrinsic.Control.If(V.DataTable.dtProfiles.Exists)
	F.Data.DataTable.Close("dtProfiles")
	F.Data.DataTable.CreateFromSQL("dtProfiles", "Con", "select RTRIM(PROFILE) as PROFILE, DEFAULT_PROFILE, RTRIM(EXPORT_FOLDER) as EXPORT_FOLDER, RTRIM(IMPORT_FOLDER) as IMPORT_FOLDER, RTRIM(XPTYPE) as XPTYPE, CUSTOM_EXPORT, CUSTOM_IMPORT, XP_ON_GENWO, IMP_FMAP, IMP_REMNT, CREATE_FLEX_NEXT, BACK_FLUSH_MAT, BACK_FLUSH_LAB, RTRIM(DEFAULT_EMP) as DEFAULT_EMP, WCWG, WC, WG, ISSUE_FROM_INV, DEFAULT_BIN_INV, MANUAL_BIN, RTRIM(MANUAL_BIN_ENTRY) as MANUAL_BIN_ENTRY, RTRIM(NEST_ID) as NEST_ID, RTRIM(WO_NUMBER) as WO_NUMBER, RTRIM(RAW_MAT) as RAW_MAT, RTRIM(QTY) as QTY, RTRIM(AREA_P_PART) as AREA_P_PART, RTRIM(DATE_PROCESSED) as DATE_PROCESSED, RTRIM(TIME_PER_PART) as TIME_PER_PART, RTRIM(WORKCG) as WORKCG, RTRIM(LABOR_WC) as LABOR_WC, USE_INTERFACE, RTRIM(GOOD_PC) as GOOD_PC, RTRIM(BAD_PC) as BAD_PC, REMNANT, RTRIM(REM_FOLDER) as REM_FOLDER, REM_FMAP, RTRIM(REM_NESTID) as REM_NESTID, RTRIM(REM_RAWMAT) as REM_RAWMAT, RTRIM(REM_LENGTH) as REM_LENGTH, RTRIM(REM_BREADTH) as REM_BREADTH, RTRIM(REM_WEIGHT) as REM_WEIGHT, RTRIM(MAT_WEIGHT) as MAT_WEIGHT, RTRIM(REM_BIN_ENTRY) as REM_BIN_ENTRY, BACKFLUSH_MISC_MAT, RTRIM(MAT_LOCATION) as MAT_LOCATION, ONLINE_IMP, OFFLINE_IMP, WC_XREF, FULL_PART_FLAG, IF(FULL_PART_PATH = '0', '', RTRIM(FULL_PART_PATH)) as FULL_PART_PATH, INDIRECT_ISSUE, RTRIM(ISSUE_WO) as ISSUE_WO from GCG_4980_NESTPROFILE", True)
F.Intrinsic.Control.EndIf

'save new settings in GCG_4980_SETTINGS table
F.Intrinsic.Control.CallSub(SaveExtraImportSettings)
F.Intrinsic.Control.CallSub(SetHooks)

GUI.FormImportMaintenance..Enabled(True)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.cmdSaveImpConf_Click.End

Program.Sub.SetHooks.Start
F.Intrinsic.Control.Try

'15710 - GUI Populate
'15760 - Script 1
'15770 - Script 2
'15780 - Script 3

V.Local.sScriptName.Declare(String)

'check GUI script hooks
V.Local.sScriptName.Set("GCG_4980_NEST_IMP.g2u")
F.Intrinsic.Control.SelectCase(V.Screen.FormImportMaintenance!ddlScriptButton.Text.Trim)
	F.Intrinsic.Control.Case("Script 1")
		F.Intrinsic.Control.CallSub(RemoveHookAssociation, "HOOK", 15770, "SCRIPT", V.Local.sScriptName)
		F.Intrinsic.Control.CallSub(RemoveHookAssociation, "HOOK", 15780, "SCRIPT", V.Local.sScriptName)
		
		F.Intrinsic.Control.CallSub(AddHookAssociation, "HOOK", 15710, "SCRIPT", V.Local.sScriptName, "ASYNCHRONOUS", False)
		F.Intrinsic.Control.CallSub(AddHookAssociation, "HOOK", 15760, "SCRIPT", V.Local.sScriptName, "ASYNCHRONOUS", False)
		
	F.Intrinsic.Control.Case("Script 2")
		F.Intrinsic.Control.CallSub(RemoveHookAssociation, "HOOK", 15760, "SCRIPT", V.Local.sScriptName)
		F.Intrinsic.Control.CallSub(RemoveHookAssociation, "HOOK", 15780, "SCRIPT", V.Local.sScriptName)
		
		F.Intrinsic.Control.CallSub(AddHookAssociation, "HOOK", 15710, "SCRIPT", V.Local.sScriptName, "ASYNCHRONOUS", False)
		F.Intrinsic.Control.CallSub(AddHookAssociation, "HOOK", 15770, "SCRIPT", V.Local.sScriptName, "ASYNCHRONOUS", False)
	
	F.Intrinsic.Control.Case("Script 3")
		F.Intrinsic.Control.CallSub(RemoveHookAssociation, "HOOK", 15770, "SCRIPT", V.Local.sScriptName)
		F.Intrinsic.Control.CallSub(RemoveHookAssociation, "HOOK", 15760, "SCRIPT", V.Local.sScriptName)
		
		F.Intrinsic.Control.CallSub(AddHookAssociation, "HOOK", 15710, "SCRIPT", V.Local.sScriptName, "ASYNCHRONOUS", False)
		F.Intrinsic.Control.CallSub(AddHookAssociation, "HOOK", 15780, "SCRIPT", V.Local.sScriptName, "ASYNCHRONOUS", False)
	
	F.Intrinsic.Control.CaseAny("Do Not Launch from GUI", "")
		F.Intrinsic.Control.CallSub(RemoveHookAssociation, "HOOK", 15710, "SCRIPT", V.Local.sScriptName)
		F.Intrinsic.Control.CallSub(RemoveHookAssociation, "HOOK", 15760, "SCRIPT", V.Local.sScriptName)
		F.Intrinsic.Control.CallSub(RemoveHookAssociation, "HOOK", 15770, "SCRIPT", V.Local.sScriptName)
		F.Intrinsic.Control.CallSub(RemoveHookAssociation, "HOOK", 15780, "SCRIPT", V.Local.sScriptName)

F.Intrinsic.Control.EndSelect

'set unattended hooks
V.Local.sScriptName.Set("GCG_4980_UnattendedImport.g2u")
F.Intrinsic.Control.If(V.Screen.FormImportMaintenance!chkUnattendedImport.CheckedAsBoolean)
	F.Intrinsic.Control.CallSub(AddHookAssociation, "HOOK", 38130, "SCRIPT", V.Local.sScriptName, "ASYNCHRONOUS", True)
F.Intrinsic.Control.Else
	F.Intrinsic.Control.CallSub(RemoveHookAssociation, "HOOK", 38130, "SCRIPT", V.Local.sScriptName)
F.Intrinsic.Control.EndIf

V.Local.sScriptName.Set("GCG_4980_NEST_XP.g2u")
F.Intrinsic.Control.If(V.Screen.FormExportMaintenance!chkUnattendedExport.CheckedAsBoolean)
	F.Intrinsic.Control.CallSub(AddHookAssociation, "HOOK", 38130, "SCRIPT", V.Local.sScriptName, "ASYNCHRONOUS", True)
F.Intrinsic.Control.Else
	F.Intrinsic.Control.CallSub(RemoveHookAssociation, "HOOK", 38130, "SCRIPT", V.Local.sScriptName)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.SetHooks.End

Program.Sub.AddHookAssociation.Start
'add hook sequence
'pass HOOK, SCRIPT, ASYNCHRONOUS

F.Intrinsic.Control.Try

V.Local.sSQL.Declare(String)
V.Local.sHook.Declare(String)
V.Local.sRet.Declare(String)
V.Local.sSeq.Declare(String)
V.Local.sSync.Declare(String)
V.Local.sVersion.Declare(String)
V.Local.sExtension.Declare(String)

F.Intrinsic.Control.If(V.Args.ASYNCHRONOUS)
	V.Local.sSync.Set("A")
F.Intrinsic.Control.Else
	V.Local.sSync.Set("S")
F.Intrinsic.Control.EndIf

F.Intrinsic.File.GetExtensionComponent(V.Args.Script, V.Local.sExtension)
F.Intrinsic.Control.If(V.Local.sExtension.UCase, =, "GAS")
	V.Local.sVersion.Set("1.00")
F.Intrinsic.Control.Else
	V.Local.sVersion.Set("2.00")
F.Intrinsic.Control.EndIf

'first check if the script is already on the hook
F.Intrinsic.String.LPad(V.Args.HOOK, "0", 9, V.Local.sHook)
F.Intrinsic.String.Build("select RTRIM(SEQ) SEQ from V_HOOK_ASSOCIATION where ID = '{0}' and UPPER(SCRIPT_NAME) = '{1}'", V.Local.sHook, V.Args.Script.UCase, V.Local.sSQL)

F.Intrinsic.Control.CallSub(Connection, "CONNECT", True)

F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
F.Intrinsic.Control.If(V.Ambient.ExecuteAndReturnEOF)
	'grab top sequence
	F.Intrinsic.String.Build("select top 1 RTRIM(SEQ) from V_HOOK_ASSOCIATION where ID = '{0}'", V.Local.sHook, V.Local.sSQL)
	F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
	F.Intrinsic.Control.If(V.Ambient.ExecuteAndReturnEOF)
		V.Local.sSeq.Set("000100")
	F.Intrinsic.Control.Else
		F.Intrinsic.Math.Add(V.Local.sRet.Long, 100, V.Local.sSeq)
		F.Intrinsic.String.LPad(V.Local.sSeq, "0", 6, V.Local.sSeq)
	F.Intrinsic.Control.EndIf
	
	'add sequence
	'add hook sequence association does not work for some hooks for some reason
	F.Intrinsic.String.Build("insert into HOOK_ASSOCIATION (ID, SEQ, ACTIVE_FLAG, SYNC_FLAG, SCRIPT_PATH, SCRIPT_NAME, TRACE_FLAG, SCRIPT_TYPE, RUNTIME_VER) Values ('{0}', '{1}', 'A', '{2}', '#SCRIPT-PATH#', '{3}', 'N', 'G', '{4}')", V.Local.sHook, V.Local.sSeq, V.Local.sSync, V.Args.Script, V.Local.sVersion, V.Local.sSQL)
F.Intrinsic.Control.Else
	V.Local.sSeq.Set(V.Local.sRet)
	
	'sequence already exists, make sure it's active
	'UpdateHookAssociation causes problems as well.
	F.Intrinsic.String.Build("update HOOK_ASSOCIATION set ACTIVE_FLAG = 'A' where ID = '{0}' and SEQ = '{1}'", V.Local.sHook, V.Local.sSeq, V.Local.sSQL)
F.Intrinsic.Control.EndIf

F.ODBC.Connection!Con.Execute(V.Local.sSQL)

'make sure header is active
F.Intrinsic.String.Build("select HOOK from V_HOOK_HEADER where HOOK = '{0}'", V.Local.sHook, V.Local.sSQL)
F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
F.Intrinsic.Control.If(V.Ambient.ExecuteAndReturnEOF)
	F.Intrinsic.String.Build("insert into HOOK_HEADER (HOOK, ACTIVE_FLAG, TRACE_FLAG) values ('{0}', 'A', 'N')", V.Local.sHook, V.Local.sSQL)
F.Intrinsic.Control.Else
	F.Intrinsic.String.Build("update HOOK_HEADER set ACTIVE_FLAG = 'A' where HOOK = '{0}'", V.Local.sHook, V.Local.sSQL)
F.Intrinsic.Control.EndIf
F.ODBC.Connection!Con.Execute(V.Local.sSQL)

F.Intrinsic.Control.CallSub(Connection, "CONNECT", False)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.AddHookAssociation.End

Program.Sub.RemoveHookAssociation.Start
'pass HOOK, SCRIPT

F.Intrinsic.Control.Try

V.Local.sSQL.Declare(String)
V.Local.sHook.Declare(String)
V.Local.sRet.Declare(String)

'first delete from Hook association
F.Intrinsic.String.LPad(V.Args.HOOK, "0", 9, V.Local.sHook)
F.Intrinsic.String.Build("delete from HOOK_ASSOCIATION where ID = '{0}' and UPPER(SCRIPT_NAME) = '{1}'", V.Local.sHook, V.Args.Script.UCase, V.Local.sSQL)

F.Intrinsic.Control.CallSub(Connection, "CONNECT", True)
F.ODBC.Connection!Con.Execute(V.Local.sSQL)

'now deactivate hook if necessary
F.Intrinsic.String.Build("select SEQ from V_HOOK_ASSOCIATION where ID = '{0}' and ACTIVE_FLAG = 'A'", V.Local.sHook, V.Local.sSQL)
F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
F.Intrinsic.Control.If(V.Ambient.ExecuteAndReturnEOF)
	F.Intrinsic.String.Build("update HOOK_HEADER set ACTIVE_FLAG = 'N' where HOOK = '{0}'", V.Local.sHook, V.Local.sSQL)
	F.ODBC.Connection!Con.Execute(V.Local.sSQL)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(Connection, "CONNECT", False)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.RemoveHookAssociation.End

Program.Sub.SaveExtraImportSettings.Start
'save new settings in GCG_4980_SETTINGS table

F.Intrinsic.Control.Try

V.Local.sProgramNumber.Declare(String)
V.Local.sRemnantDropID.Declare(String)
V.Local.sSheetArea.Declare(String)
V.Local.bUseMetric.Declare(Boolean)
V.Local.sJobArea.Declare(String)
V.Local.sMoveTicket.Declare(String)
V.Local.sCustomLabel.Declare(String)
V.Local.sLaborSequenceClose.Declare(String)
V.Local.sMaterialSequenceClose.Declare(String)
V.Local.sPartSeparationSequenceClose.Declare(String)
V.Local.sFile.Declare(String, "")
V.Local.sPartWeight.Declare(String)
V.Local.sEmployeeID.Declare(string)

V.Local.sSheetArea.Set(V.Screen.FormImportMaintenance!ddlSheetArea.Text.Trim)
V.Local.bUseMetric.Set(V.Screen.FormImportMaintenance!chkMetric.CheckedAsBoolean)
V.Local.sRemnantDropID.Set(V.Screen.FormImportMaintenance!ddlDropID.Text.Trim)
V.Local.sJobArea.Set(V.Screen.FormImportMaintenance!ddlJobArea.Text.Trim)
V.Local.sCustomLabel.Set(V.Screen.FormImportMaintenance!txtCustomLabel.Text.Trim)
V.Local.sPartWeight.Set(V.Screen.FormImportMaintenance!ddlPartWeight.Text.Trim)
V.Local.sEmployeeID.Set(V.Screen.FormImportMaintenance!ddlEmployee.Text.Trim)

'get move ticket option
F.Intrinsic.Control.If(V.Screen.FormImportMaintenance!chkMoveTicketCodesoft.CheckedAsBoolean)
	V.Local.sMoveTicket.Set("CODESOFT")
F.Intrinsic.Control.ElseIf(V.Screen.FormImportMaintenance!chkMoveTicketCrystal.CheckedAsBoolean)
	V.Local.sMoveTicket.Set("CRYSTAL")
F.Intrinsic.Control.ElseIf(V.Screen.FormImportMaintenance!chkMoveTicketATG.CheckedAsBoolean)
	V.Local.sMoveTicket.Set("ATG")
F.Intrinsic.Control.Else
	V.Local.sMoveTicket.Set("NONE")
F.Intrinsic.Control.EndIf

'get labor sequence close option
F.Intrinsic.Control.If(V.Screen.FormImportMaintenance!ddlCloseLaborSequence.Text.Trim, =, "")
	V.Local.sLaborSequenceClose.Set("RUN_QUANTITY")
F.Intrinsic.Control.Else
	F.Data.Dictionary.ReturnKeyFromValue("dictCloseTypes", V.Screen.FormImportMaintenance!ddlCloseLaborSequence.Text.Trim, V.Local.sLaborSequenceClose)
F.Intrinsic.Control.EndIf

'get material sequence close option
F.Intrinsic.Control.If(V.Screen.FormImportMaintenance!ddlCloseMaterialSequence.Text.Trim, =, "")
	V.Local.sMaterialSequenceClose.Set("ALWAYS")
F.Intrinsic.Control.Else
	F.Data.Dictionary.ReturnKeyFromValue("dictCloseTypes", V.Screen.FormImportMaintenance!ddlCloseMaterialSequence.Text.Trim, V.Local.sMaterialSequenceClose)
F.Intrinsic.Control.EndIf

'get part separation close option
F.Intrinsic.Control.If(V.Screen.FormImportMaintenance!ddlPartSeparationCloseType.Text.Trim, =, "")
	V.Local.sPartSeparationSequenceClose.Set("RUN_QUANTITY")
F.Intrinsic.Control.Else
	F.Data.Dictionary.ReturnKeyFromValue("dictCloseTypes", V.Screen.FormImportMaintenance!ddlPartSeparationCloseType.Text.Trim, V.Local.sPartSeparationSequenceClose)
F.Intrinsic.Control.EndIf

'get part separation boost file
F.Intrinsic.Control.If(V.Screen.FormImportMaintenance!chkUseProdOperationExp.CheckedAsBoolean)
	V.Local.sFile.Set("ProdOperationExp")
F.Intrinsic.Control.ElseIf(V.Screen.FormImportMaintenance!chkUsePdaExp.CheckedAsBoolean)
	V.Local.sFile.Set("PdaExp")
F.Intrinsic.Control.EndIf

F.Data.DataTable.Create("dtSave")
F.Data.DataTable.AddColumn("dtSave", "PROFILE", "STRING")
F.Data.DataTable.AddColumn("dtSave", "TYPE", "STRING")
F.Data.DataTable.AddColumn("dtSave", "SETTING", "STRING")
F.Data.DataTable.AddColumn("dtSave", "VALUE", "STRING")

'import mappings
F.Data.DataTable.AddRow("dtSave", "PROFILE", V.Global.sProfile, "TYPE", "IMPORT_MAP", "SETTING", "SHEET_AREA", "VALUE", V.Local.sSheetArea)
F.Data.DataTable.AddRow("dtSave", "PROFILE", V.Global.sProfile, "TYPE", "IMPORT_MAP", "SETTING", "JOB_AREA", "VALUE", V.Local.sJobArea)
F.Data.DataTable.AddRow("dtSave", "PROFILE", V.Global.sProfile, "TYPE", "IMPORT_MAP", "SETTING", "PART_WEIGHT", "VALUE", V.Local.sPartWeight)
F.Data.DataTable.AddRow("dtSave", "PROFILE", V.Global.sProfile, "TYPE", "IMPORT_MAP", "SETTING", "EMPLOYEE_ID", "VALUE", V.Local.sEmployeeID)

'remnant mappings
F.Data.DataTable.AddRow("dtSave", "PROFILE", V.Global.sProfile, "TYPE", "REMNANT_MAP", "SETTING", "DROP_ID", "VALUE", V.Local.sRemnantDropID)

'import options
F.Data.DataTable.AddRow("dtSave", "PROFILE", V.Global.sProfile, "TYPE", "IMPORT_OPTION", "SETTING", "USE_METRIC", "VALUE", V.Local.bUseMetric)
F.Data.DataTable.AddRow("dtSave", "PROFILE", V.Global.sProfile, "TYPE", "IMPORT_OPTION", "SETTING", "CUSTOM_LABEL", "VALUE", V.Local.sCustomLabel)
F.Data.DataTable.AddRow("dtSave", "PROFILE", V.Global.sProfile, "TYPE", "IMPORT_OPTION", "SETTING", "MOVE_TICKET", "VALUE", V.Local.sMoveTicket)
F.Data.DataTable.AddRow("dtSave", "PROFILE", V.Global.sProfile, "TYPE", "IMPORT_OPTION", "SETTING", "MULTIPLE_BINS", "VALUE", V.Screen.FormImportMaintenance!chkMultipleBinIssue.CheckedAsBoolean)
F.Data.DataTable.AddRow("dtSave", "PROFILE", V.Global.sProfile, "TYPE", "IMPORT_OPTION", "SETTING", "CHECK_MATERIAL", "VALUE", V.Screen.FormImportMaintenance!chkCheckMaterial.CheckedAsBoolean)
F.Data.DataTable.AddRow("dtSave", "PROFILE", V.Global.sProfile, "TYPE", "IMPORT_OPTION", "SETTING", "OVERWRITE_OPERATION", "VALUE", V.Screen.FormImportMaintenance!chkOverwriteOpCode.CheckedAsBoolean)
F.Data.DataTable.AddRow("dtSave", "PROFILE", V.Global.sProfile, "TYPE", "IMPORT_OPTION", "SETTING", "SPLIT_MATERIAL", "VALUE", V.Screen.FormImportMaintenance!chkSplitMaterial.CheckedAsBoolean)
F.Data.DataTable.AddRow("dtSave", "PROFILE", V.Global.sProfile, "TYPE", "IMPORT_OPTION", "SETTING", "SPLIT_DELIMITER", "VALUE", V.Screen.FormImportMaintenance!txtDelimiter.Text.Trim)
F.Data.DataTable.AddRow("dtSave", "PROFILE", V.Global.sProfile, "TYPE", "IMPORT_OPTION", "SETTING", "UNATTENDED_IMPORT", "VALUE", V.Screen.FormImportMaintenance!chkUnattendedImport.CheckedAsBoolean)
F.Data.DataTable.AddRow("dtSave", "PROFILE", V.Global.sProfile, "TYPE", "IMPORT_OPTION", "SETTING", "IMPORT_FREQUENCY", "VALUE", V.Screen.FormImportMaintenance!ddlImportFrequency.Text.Trim)
F.Data.DataTable.AddRow("dtSave", "PROFILE", V.Global.sProfile, "TYPE", "IMPORT_OPTION", "SETTING", "CREATE_FLEX_SCHEDULE", "VALUE", V.Screen.FormImportMaintenance!chkFlexSchedule.CheckedAsBoolean)
F.Data.DataTable.AddRow("dtSave", "PROFILE", V.Global.sProfile, "TYPE", "IMPORT_OPTION", "SETTING", "CLOSE_LABOR_SEQUENCE", "VALUE", V.Local.sLaborSequenceClose)
F.Data.DataTable.AddRow("dtSave", "PROFILE", V.Global.sProfile, "TYPE", "IMPORT_OPTION", "SETTING", "CLOSE_MAT_SEQUENCE", "VALUE", V.Local.sMaterialSequenceClose)
F.Data.DataTable.AddRow("dtSave", "PROFILE", V.Global.sProfile, "TYPE", "IMPORT_OPTION", "SETTING", "APPEND", "VALUE", V.Screen.FormImportMaintenance!chkAppend.CheckedAsBoolean)
F.Data.DataTable.AddRow("dtSave", "PROFILE", V.Global.sProfile, "TYPE", "IMPORT_OPTION", "SETTING", "BYSOFT_CUMULATIVE", "VALUE", V.Screen.FormImportMaintenance!chkBysoftCumulativeImport.CheckedAsBoolean)
F.Data.DataTable.AddRow("dtSave", "PROFILE", V.Global.sProfile, "TYPE", "IMPORT_OPTION", "SETTING", "USE_PART_WEIGHT_SUM", "VALUE", V.Screen.FormImportMaintenance!chkSheetWeightNestSummary.CheckedAsBoolean)
F.Data.DataTable.AddRow("dtSave", "PROFILE", V.Global.sProfile, "TYPE", "IMPORT_OPTION", "SETTING", "USE_PART_AREA_SUM", "VALUE", V.Screen.FormImportMaintenance!chkSheetAreaNestSummary.CheckedAsBoolean)
F.Data.DataTable.AddRow("dtSave", "PROFILE", V.Global.sProfile, "TYPE", "IMPORT_OPTION", "SETTING", "GROUP_NESTS_BY_FILE", "VALUE", V.Screen.FormImportMaintenance!chkGroupNestsByFile.CheckedAsBoolean)
F.Data.DataTable.AddRow("dtSave", "PROFILE", V.Global.sProfile, "TYPE", "IMPORT_OPTION", "SETTING", "THRESHOLD", "VALUE", V.Screen.FormImportMaintenance!txtThreshold.Text.Trim)
F.Data.DataTable.AddRow("dtSave", "PROFILE", V.Global.sProfile, "TYPE", "IMPORT_OPTION", "SETTING", "ISSUE_DECIMALS", "VALUE", V.Screen.FormImportMaintenance!ddlIssueDecimals.Text.Trim)
F.Data.DataTable.AddRow("dtSave", "PROFILE", V.Global.sProfile, "TYPE", "IMPORT_OPTION", "SETTING", "RELEASE_WORK_ORDERS", "VALUE", V.Screen.FormImportMaintenance!chkReleaseWOs.CheckedAsBoolean)
F.Data.DataTable.AddRow("dtSave", "PROFILE", V.Global.sProfile, "TYPE", "IMPORT_OPTION", "SETTING", "ALLOW_ZERO_MATERIAL", "VALUE", V.Screen.FormImportMaintenance!chkAllowZeroMaterial.CheckedAsBoolean)
F.Data.DataTable.AddRow("dtSave", "PROFILE", V.Global.sProfile, "TYPE", "IMPORT_OPTION", "SETTING", "USE_990000_SEQUENCE", "VALUE", V.Screen.FormImportMaintenance!chkUse99Sequence.CheckedAsBoolean)
F.Data.DataTable.AddRow("dtSave", "PROFILE", V.Global.sProfile, "TYPE", "IMPORT_OPTION", "SETTING", "NCELL_STATION_FILE", "VALUE", V.Screen.FormImportMaintenance!chkNCellStationFiles.CheckedAsBoolean)

'part separation options
F.Data.DataTable.AddRow("dtSave", "PROFILE", V.Global.sProfile, "TYPE", "PART_SEPARATION", "SETTING", "ENABLED", "VALUE", V.Screen.FormImportMaintenance!chkPartSeparation.CheckedAsBoolean)
F.Data.DataTable.AddRow("dtSave", "PROFILE", V.Global.sProfile, "TYPE", "PART_SEPARATION", "SETTING", "IMPORT_PATH", "VALUE", V.Screen.FormImportMaintenance!txtPartSeparationPath.Text.Trim)
F.Data.DataTable.AddRow("dtSave", "PROFILE", V.Global.sProfile, "TYPE", "PART_SEPARATION", "SETTING", "WORKCENTERS", "VALUE", V.Screen.FormImportMaintenance!txtPartSeparationWorkcenters.Text.Trim)
F.Data.DataTable.AddRow("dtSave", "PROFILE", V.Global.sProfile, "TYPE", "PART_SEPARATION", "SETTING", "CLOSE", "VALUE", V.Local.sPartSeparationSequenceClose)
F.Data.DataTable.AddRow("dtSave", "PROFILE", V.Global.sProfile, "TYPE", "PART_SEPARATION", "SETTING", "DEFAULT_EMPLOYEE", "VALUE", V.Screen.FormImportMaintenance!txtPartSeparationDefaultEmployee.Text.Trim)
F.Data.DataTable.AddRow("dtSave", "PROFILE", V.Global.sProfile, "TYPE", "PART_SEPARATION", "SETTING", "BOOST_FILE", "VALUE", V.Local.sFile)

'remnant options
F.Data.DataTable.AddRow("dtSave", "PROFILE", V.Global.sProfile, "TYPE", "REMNANT_OPTION", "SETTING", "STORE_SIZE_IN_SERIAL", "VALUE", V.Screen.FormImportMaintenance!chkUseSerialInsteadOfDropSize.CheckedAsBoolean)
F.Data.DataTable.AddRow("dtSave", "PROFILE", V.Global.sProfile, "TYPE", "REMNANT_OPTION", "SETTING", "DROP_SUFFIX", "VALUE", V.Screen.FormImportMaintenance!txtDropSuffix.Text.Trim)

'this option is profile independent
F.Data.DataTable.AddRow("dtSave", "PROFILE", "", "TYPE", "IMPORT_OPTION", "SETTING", "LAUNCH_FROM_GUI", "VALUE", V.Screen.FormImportMaintenance!ddlScriptButton.Text.Trim)

F.Data.DataTable.SaveToDB("dtSave", "Con", "GCG_4980_SETTINGS", "PROFILE*!*TYPE*!*SETTING", 256)
F.Data.DataTable.Close("dtSave")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.SaveExtraImportSettings.End

Program.Sub.cmdImpBrw_Click.Start
F.Intrinsic.Control.Try

V.local.sFolder.Declare

f.Intrinsic.UI.FolderBrowser("Select a Destination Folder", V.Local.sFolder)
f.Intrinsic.Control.If(V.Local.sFolder.IsNotCancel)
	GUI.FormImportMaintenance.txtImpPath.Text(V.Local.sFolder)
f.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(txtImpPath_LostFocus)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.cmdImpBrw_Click.End

Program.Sub.cmdBrwLotBin_Click.Start
F.Intrinsic.Control.Try

V.Local.sSql.Declare
V.local.sTitles.Declare
V.Local.iWidths.Declare
V.Local.sRet.Declare
V.Local.sDisp.Declare

'create browser
V.Local.sSql.Set("SELECT BIN, LOCATION , BIN_DESCRIPTION FROM BIN_MASTER ORDER BY BIN,LOCATION")
F.Intrinsic.String.Split("BIN*!*Location*!*Description","*!*",V.Local.sTitles)
F.Intrinsic.String.Split("300*!*300*!*400","*!*",V.Local.iWidths)
F.Intrinsic.UI.SetBrowserHotTypeAhead(True)
f.Intrinsic.UI.Browser("Select Bin","Con",V.Local.sSql,V.Local.sTitles,V.Local.iWidths,V.Local.sRet)

'handle return
F.Intrinsic.Control.If(V.Local.sRet,=,V.Ambient.Cancel)
	f.Intrinsic.Control.ExitSub
f.Intrinsic.Control.else
	f.Intrinsic.String.Split(V.Local.sRet,"*!*",V.local.sRet)
	GUI.FormImportMaintenance.txtLotBin.Text(V.Local.sRet(0))
f.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.cmdBrwLotBin_Click.End

Program.Sub.chkWCWG_Click.Start
F.Intrinsic.Control.Try

f.Intrinsic.Control.If(V.Screen.FormImportMaintenance!chkWCWG.checkedasboolean)
	GUI.FormImportMaintenance.frameWCWG.Enabled(true)
f.Intrinsic.Control.Else
	GUI.FormImportMaintenance.frameWCWG.Enabled(False)
f.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.chkWCWG_Click.End

Program.Sub.optManualBin_Click.Start
F.Intrinsic.Control.Try

GUI.FormImportMaintenance.txtLotBin.Enabled(True)
GUI.FormImportMaintenance.cmdBrwLotBin.Enabled(True)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.optManualBin_Click.End

Program.Sub.cmdRemBrw_Click.Start
F.Intrinsic.Control.Try

V.local.sFolder.Declare

f.Intrinsic.UI.FolderBrowser("Select a Destination Folder", V.Local.sFolder)
f.Intrinsic.Control.If(V.Local.sFolder.IsNotCancel)
	GUI.FormImportMaintenance.txtRemPath.Text(V.Local.sFolder)
f.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(txtRemPath_LostFocus)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.cmdRemBrw_Click.End

Program.Sub.chkRemnant_Click.Start
F.Intrinsic.Control.Try

'allow option if NCELL or Boost, but no mapping
F.Intrinsic.Control.If(V.Global.sXPType.Trim, =, "N", or, V.Global.sXPtype.Trim, =,"B")
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

f.Intrinsic.Control.If(V.Screen.FormImportMaintenance!chkRemnant.checkedasboolean)
	GUI.FormImportMaintenance.frameRemnant.Enabled(True)
	GUI.FormImportMaintenance.txtImpRemList.Enabled(True)
	GUI.FormImportMaintenance.GsGCImpRemList.Enabled(True)
	GUI.FormImportMaintenance.cmdImpRemList.Enabled(True)
f.Intrinsic.Control.Else
	GUI.FormImportMaintenance.frameRemnant.Enabled(False)
	GUI.FormImportMaintenance.txtImpRemList.Enabled(False)
	GUI.FormImportMaintenance.GsGCImpRemList.Enabled(False)
	GUI.FormImportMaintenance.cmdImpRemList.Enabled(False)
f.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.chkRemnant_Click.End

Program.Sub.cmdBrwRemLotBin_Click.Start
F.Intrinsic.Control.Try

V.Local.sSql.Declare
V.local.sTitles.Declare
V.Local.iWidths.Declare
V.Local.sRet.Declare
V.Local.sDisp.Declare

'create browser
V.Local.sSql.Set("SELECT BIN, LOCATION , BIN_DESCRIPTION FROM BIN_MASTER ORDER BY BIN,LOCATION")
F.Intrinsic.String.Split("BIN*!*Location*!*Description","*!*",V.Local.sTitles)
F.Intrinsic.String.Split("300*!*300*!*400","*!*",V.Local.iWidths)
F.Intrinsic.UI.SetBrowserHotTypeAhead(True)
f.Intrinsic.UI.Browser("Select Bin","Con",V.Local.sSql,V.Local.sTitles,V.Local.iWidths,V.Local.sRet)

'handle return
F.Intrinsic.Control.If(V.Local.sRet,=,V.Ambient.Cancel)
	f.Intrinsic.Control.ExitSub
f.Intrinsic.Control.else
	f.Intrinsic.String.Split(V.Local.sRet,"*!*",V.local.sRet)
	GUI.FormImportMaintenance.txtRemLotBin.Text(V.Local.sRet(0))
f.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.cmdBrwRemLotBin_Click.End

Program.Sub.ddlXPType_Click.Start
F.Intrinsic.Control.Try

V.Local.sXPtypeExist.Declare
V.Local.sXPtype.Declare
V.Local.sXPtypeDesc.Declare
V.Local.ssql.Declare
V.Local.iRet.Declare
V.Local.sXPtypeDesc.set(V.Screen.FormExportMaintenance!ddlXPType.text)

f.Data.Dictionary.ReturnKeyFromValue("XPTypeDict",V.Local.sXPtypeDesc,true,V.Local.sXPType)
f.Intrinsic.Control.If(V.Global.sXPtype,=,V.Local.sXPtype.Trim)
	f.Intrinsic.Control.ExitSub
f.Intrinsic.Control.EndIf

f.Intrinsic.String.Build("Select distinct RTRIM(XPTYPE) XPTYPE from GCG_4980_NESTPROFILE where profile = '{0}'",V.Global.sProfile,V.Local.ssql)

f.odbc.Connection!Con.executeandreturn(V.Local.ssql,V.Local.sXPtypeExist)
f.Intrinsic.Control.If(V.Local.sXPtypeExist,<>,V.Local.sXPType,"AND",V.Local.sXPtypeExist.Trim,<>,"")
	f.Intrinsic.UI.Msgbox("You have a Field Map for this profile already set for another nesting program saved in the database. Do you want to overwrite this the nesting program association for this profile with the newly selected profile.","Overwrite Field Map?",4,V.Local.iRet)
	f.Intrinsic.Control.If(V.Local.iRet,=,7)
		f.Intrinsic.control.BlockEvents
		GUI.FormExportMaintenance.ddlXPType.Text(V.Dictionary.XPTypeDict![V.Local.sXPtypeExist.Trim])
		V.Global.sXPtype.Set(V.Local.sXPtypeExist.Trim)
		f.Intrinsic.control.UnBlockEvents
		GUI.FormExportMaintenance..Enabled(True)
		GUI.FormExportMaintenance..SetFocus
		
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.Else
		f.Intrinsic.String.Build("Delete from GCG_4980_NESTMAINT where profile = '{0}'",V.Global.sProfile,V.Local.ssql)
		f.odbc.Connection!Con.execute(V.Local.ssql)
		f.Intrinsic.String.Build("Delete from GCG_4980_IMPMAINT where profile = '{0}'",V.Global.sProfile,V.Local.ssql)
		f.odbc.Connection!Con.execute(V.Local.ssql)
	f.Intrinsic.Control.EndIf
f.Intrinsic.Control.EndIf

GUI.FormExportMaintenance.txtImportFields.Text("")
V.Global.sXPtype.Set(V.Local.sXPtype.Trim)
f.Intrinsic.String.Build("Update GCG_4980_NESTPROFILE set XPTYPE = '{0}' where profile = '{1}'",V.Global.sXPtype.Trim,V.Global.sProfile,V.Local.ssql)
f.odbc.Connection!Con.execute(V.Local.ssql)

F.Intrinsic.Control.CallSub(LoadMap,"XPTYPE",V.Global.sXPtype.trim)
F.Intrinsic.Control.CallSub(LoadImp)
F.Intrinsic.Control.CallSub(LoadMaintenanceScreen)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.ddlXPType_Click.End

Program.Sub.chkWCCrossRef_Click.Start
F.Intrinsic.Control.Try

f.Intrinsic.Control.If(V.Screen.FormImportMaintenance!chkWCCrossRef.CheckedAsBoolean)
	GUI.FormImportMaintenance.cmdMaintWCXRef.Enabled(True)
f.Intrinsic.Control.Else
	GUI.FormImportMaintenance.cmdMaintWCXRef.Enabled(False)
f.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.chkWCCrossRef_Click.End

Program.Sub.cmdMaintWCXRef_Click.Start
F.Intrinsic.Control.Try

GUI.FormImportMaintenance..enabled(False)
GUI.FormWCXref..Visible(True)
GUI.FormWCXref..SetFocus

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.cmdMaintWCXRef_Click.End

Program.Sub.gsgcWCXref_CellValueChanged.Start
F.Intrinsic.Control.Try

f.Data.DataTable.SaveToDB("dtWCXref","Con","GCG_4980_WCXREF","Profile*!*WC*!*XREF",256, "PROFILE@!@PROFILE*!*WC@!@WC*!*XREF@!@XREF*!*OSEON_OPERATION@!@OSEON_OPERATION")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.gsgcWCXref_CellValueChanged.End

Program.Sub.FormWCXref_UnLoad.Start
F.Intrinsic.Control.Try

GUI.FormWCXref.txtGSWorkCenter.Text("")
GUI.FormWCXref.txtXREF.Text("")

GUI.FormImportMaintenance..enabled(True)
GUI.FormWCXref..Visible(False)
GUI.FormImportMaintenance..SetFocus

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.FormWCXref_UnLoad.End

Program.Sub.chkFullPartPath_Click.Start
F.Intrinsic.Control.Try

f.Intrinsic.Control.If(V.Screen.FormExportMaintenance!chkFullPartPath.CheckedAsBoolean)
	GUI.FormExportMaintenance.txtFullPartPath.Enabled(True)
f.Intrinsic.Control.Else
	GUI.FormExportMaintenance.txtFullPartPath.Enabled(False)
f.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.chkFullPartPath_Click.End

Program.Sub.optBOnline_Click.Start
F.Intrinsic.Control.Try

GUI.FormImportMaintenance.chkRemnant.Value(0)
GUI.FormImportMaintenance.chkRemnant.Enabled(False)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.optBOnline_Click.End

Program.Sub.optBOffline_Click.Start
F.Intrinsic.Control.Try

GUI.FormImportMaintenance.chkRemnant.Enabled(True)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.optBOffline_Click.End

Program.Sub.chkIndirectIssue_Click.Start
F.Intrinsic.Control.Try

GUI.FormImportMaintenance.txtIndirectIssue.Enabled(V.Screen.FormImportMaintenance!chkIndirectIssue.CheckedAsBoolean)
GUI.FormImportMaintenance.cmdIndirectWOBrowser.Enabled(V.Screen.FormImportMaintenance!chkIndirectIssue.CheckedAsBoolean)

F.Intrinsic.Control.If(V.Screen.FormImportMaintenance!chkIndirectIssue.CheckedAsBoolean, =, False)
	GUI.FormImportMaintenance.txtIndirectIssue.Text("")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.chkIndirectIssue_Click.End

Program.Sub.cmdIndirectWOBrowser_Click.Start
F.Intrinsic.Control.Try

V.Local.sSQL.Declare(String)
V.Local.sSizes.Declare(String)
V.Local.sTitles.Declare(String)
V.Local.sRet.Declare(String)

V.Local.sSQL.Set("Select RTRIM(JOB) as JOB, RTRIM(SUFFIX) as SUFFIX, RTRIM(SEQ) as SEQ from V_JOB_OPERATIONS where JOB in (select RTRIM(JOB) as JOB from V_IND_LBR_ACCTS) and LMO = 'M' order by JOB, SUFFIX, SEQ")
V.Local.sTitles.Set("Job*!*Suffix*!*Seq")
F.Intrinsic.String.Split(V.Local.sTitles, "*!*", V.Local.sTitles)
V.Local.sSizes.Set("60*!*30*!*60")
F.Intrinsic.String.Split(V.Local.sSizes, "*!*", V.Local.sSizes)

F.Intrinsic.UI.Browser("Indirect WOs", "Con", V.Local.sSQL, V.Local.sTitles, V.Local.sSizes, V.Local.sRet)
F.Intrinsic.Control.If(V.Local.sRet.IsNotCancel)
	F.Intrinsic.String.Split(V.Local.sRet, "*!*", V.Local.sRet)
	F.Intrinsic.String.Join(V.Local.sRet, "-", V.Local.sRet)
	GUI.FormImportMaintenance.txtIndirectIssue.Text(V.Local.sRet)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.cmdIndirectWOBrowser_Click.End

Program.Sub.chkUnattendedExport_Click.Start
F.Intrinsic.Control.Try

V.Local.sProfile.Declare(String)
V.Local.sFilter.Declare(String)
V.Local.bDefault.Declare(Boolean)

F.Intrinsic.Control.If(V.Screen.FormExportMaintenance!chkUnattendedExport.checkedAsBoolean.Not)
	GUI.FormExportMaintenance.chkUnattendedExported.Enabled(False)
	GUI.FormExportMaintenance.txtUnattendedFilter.Enabled(False)
	GUI.FormExportMaintenance.chkUnattendedExported.Value(0)		
	GUI.FormExportMaintenance.chkOnlyIncludeRescheduled.Value(0)
	F.Intrinsic.Control.ExitSub
f.Intrinsic.Control.Else
	GUI.FormExportMaintenance.chkUnattendedExported.Enabled(True)
	GUI.FormExportMaintenance.txtUnattendedFilter.Enabled(True)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Screen.FormExportMaintenance!chkUnattendedExport.checkedAsBoolean.Not)
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

V.Local.sProfile.Set(V.Screen.FormExportMaintenance!ddlProfile.Text.Trim)
F.Intrinsic.Control.If(V.Local.sProfile.Trim, =, "")
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

F.Intrinsic.String.Build("[PROFILE] = '{0}'", V.Local.sProfile, V.Local.sFilter)
F.Data.DataView.Create("dtProfiles", "dvProfileCheck", 22, V.Local.sFilter, "")

F.Intrinsic.Control.If(V.DataView.dtProfiles!dvProfileCheck.RowCount, =, 0)
	F.Intrinsic.UI.Msgbox("Error: Profile details not found.")
	F.Data.DataView.Close("dtProfiles", "dvProfileCheck")
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

V.Local.bDefault.Set(V.DataView.dtProfiles!dvProfileCheck(0).Default_Profile!FieldVal)

F.Intrinsic.Control.If(V.Local.bDefault.Not)
	F.Intrinsic.UI.Msgbox("Unattended Export can only be used with the default profile.")
	GUI.FormExportMaintenance.chkUnattendedExport.Value(0)
F.Intrinsic.Control.EndIf

F.Data.DataView.Close("dtProfiles", "dvProfileCheck")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.chkUnattendedExport_Click.End

Program.Sub.chkStaticFile_Click.Start
F.Intrinsic.Control.Try

F.Intrinsic.Control.If(V.Screen.FormExportMaintenance!chkStaticFile.checkedAsBoolean)
	GUI.FormExportMaintenance.txtStaticFile.Enabled(True)
F.Intrinsic.Control.Else
	GUI.FormExportMaintenance.txtStaticFile.Enabled(False)
	GUI.FormExportMaintenance.txtStaticFile.Text("")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.chkStaticFile_Click.End

Program.Sub.chkUnattendedExported_Click.Start
F.Intrinsic.Control.Try

GUI.FormExportMaintenance.chkOnlyIncludeRescheduled.Enabled(V.Screen.FormExportMaintenance!chkUnattendedExported.CheckedAsBoolean)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.chkUnattendedExported_Click.End

Program.Sub.cmdLoadFieldList_Click.Start
F.Intrinsic.Control.Try

V.Local.sFieldList.Declare
V.Local.iCount.Declare
V.Local.iRet.Declare(Long)

F.Intrinsic.Control.If(V.DataTable.dtMapping.Exists)
	F.Intrinsic.Control.If(V.DataTable.dtMapping.RowCount, >, 0)
		F.Intrinsic.UI.Msgbox("Are you sure you want to overwrite the current mapping?", "Overwrite", 4, V.Local.iRet)
		F.Intrinsic.Control.If(V.Local.iRet, !=, 6)
			F.Intrinsic.Control.ExitSub
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

V.Local.sFieldList.Set(V.Screen.FormExportMaintenance!txtImportFields.Text.Trim)
f.Intrinsic.String.Replace(V.Local.sFieldList," ","",V.Local.sFieldList)
f.Intrinsic.Control.If(V.Local.sFieldList.Trim,=,"")
	f.Intrinsic.UI.Msgbox("You need have the field list typed in as a comma separated string in the text box in order to import the field list!")
	f.Intrinsic.Control.ExitSub
f.Intrinsic.Control.EndIf

f.Intrinsic.String.Split(V.Local.sFieldList,",",V.Local.sFieldList)
f.Intrinsic.Control.If(V.Local.sFieldList.UBound,<,1)
	f.Intrinsic.UI.Msgbox("You need have the field list typed in as a comma separated string in the text box in order to import the field list!")
	f.Intrinsic.Control.ExitSub
f.Intrinsic.Control.EndIf

f.Data.DataTable.DeleteRow("dtMapping")
f.Data.DataTable.AcceptChanges("dtMapping")

f.Intrinsic.Control.For(V.Local.iCount,0,V.Local.sFieldList.UBound,1)
	f.Intrinsic.Control.If(V.Local.sFieldList(V.Local.iCount).trim,<>,"")
		f.Data.DataTable.AddRow("dtMapping","Enabled",True,"XPField",V.Local.sFieldList(V.Local.iCount),"INDX",V.Local.icount, "XML_PATH", "", "XPTYPE", V.Global.sXPtype)
	f.Intrinsic.Control.EndIf

f.Intrinsic.Control.Next(V.Local.iCount)

V.Local.sFieldList.Redim(0,0)

GUI.FormExportMaintenance..Enabled(True)
GUI.FormExportMaintenance..SetFocus

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.cmdLoadFieldList_Click.End

Program.Sub.LoadFieldList.Start
F.Intrinsic.Control.Try

V.Local.sFields.Declare(String)

F.Data.DataView.Create("dtMapping", "dvFields", 22)
F.Data.DataView.ToString("dtMapping", "dvFields", "XPFIELD", "&#*@$", ",", V.Local.sFields)
F.Data.DataView.Close("dtMapping", "dvFields")

F.Intrinsic.String.Replace(V.Local.sFields, " ", "", V.Local.sFields)

GUI.FormExportMaintenance.txtImportFields.Text(V.Local.sFields)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.LoadFieldList.End

Program.Sub.cmdCustomLabelBrowser_Click.Start
F.Intrinsic.Control.Try

V.Local.sRet.Declare(String)
V.Local.sSQL.Declare(String)
V.Local.sColumns.Declare(String)
V.Local.sSizes.Declare(String)

V.Local.sColumns.Set("Report ID*!*Description*!*File")
F.Intrinsic.String.Split(V.Local.sColumns, "*!*", V.Local.sColumns)
V.Local.sSizes.Set("70*!*120*!*120")
F.Intrinsic.String.Split(V.Local.sSizes, "*!*", V.Local.sSizes)
F.Intrinsic.String.Build("select RTRIM(REPORT_ID), RTRIM(DESCRIPTION), RTRIM(REPORT_FILE) from BIR_USER_SEQ where REPORT_FILE like '%.lab' and COMPANY = '{0}' and RTRIM(REPORT_ID) + RTRIM(REPORT_SEQUENCE) in (select RTRIM(REPORT_ID) + RTRIM(REPORT_SEQUENCE) from BIR_ACTIVE_SEQ where ACTIVE = 1 and COMPANY = '{0}')", V.Caller.CompanyCode, V.Local.sSQL)

F.Intrinsic.Control.CallSub(CommonConnection, "CONNECT", True)
F.Intrinsic.UI.Browser("Select Label", "Comm", V.Local.sSQL, V.Local.sColumns, V.Local.sSizes, V.Local.sRet)
F.Intrinsic.Control.CallSub(CommonConnection, "CONNECT", False)

F.Intrinsic.Control.If(V.Local.sRet.IsNotCancel)
	F.Intrinsic.String.Split(V.Local.sRet, "*!*", V.Local.sRet)
	GUI.FormImportMaintenance.txtCustomLabel.Text(V.Local.sRet(2).Trim)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.cmdCustomLabelBrowser_Click.End

Program.Sub.CheckMoveTicketButtons.Start
F.Intrinsic.Control.Try

V.Local.bValue.Declare(Boolean)

V.Local.bValue.Set(V.Screen.FormImportMaintenance![V.Args.CONTROLNAME].CheckedAsBoolean)

F.Intrinsic.Control.BlockEvents
GUI.FormImportMaintenance.chkMoveTicketCrystal.Value(False)
GUI.FormImportMaintenance.chkMoveTicketCodesoft.Value(False)
GUI.FormImportMaintenance.chkMoveTicketNone.Value(False)
GUI.FormImportMaintenance.chkMoveTicketATG.Value(False)
GUI.FormImportMaintenance.[V.Args.CONTROLNAME].Value(V.Local.bValue)
F.Intrinsic.Control.UnBlockEvents

GUI.FormImportMaintenance.chkCustomLabel.Enabled(V.Screen.FormImportMaintenance!chkMoveTicketCodesoft.Value)
F.Intrinsic.Control.If(V.Screen.FormImportMaintenance!chkMoveTicketCodesoft.Value, =, 0)
	GUI.FormImportMaintenance.chkCustomLabel.Value(0)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.CheckMoveTicketButtons.End

Program.Sub.chkCustomLabel_Click.Start
F.Intrinsic.Control.Try

GUI.FormImportMaintenance.txtCustomLabel.Enabled(V.Screen.FormImportMaintenance!chkCustomLabel.CheckedAsBoolean)
GUI.FormImportMaintenance.cmdCustomLabelBrowser.Enabled(V.Screen.FormImportMaintenance!chkCustomLabel.CheckedAsBoolean)
F.Intrinsic.Control.If(V.Screen.FormImportMaintenance!chkCustomLabel.CheckedAsBoolean, =, False)
	GUI.FormImportMaintenance.txtCustomLabel.Text("")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.chkCustomLabel_Click.End

Program.Sub.CheckMoveticketProjects.Start
'check if the 3144 or 5455 Move ticket projects are installed

F.Intrinsic.Control.Try

V.Local.b3144Exists.Declare(Boolean)
V.Local.b5455Exists.Declare(Boolean)
V.Local.bATGExists.Declare(Boolean)

F.ODBC.Connection!Con.TableExists("GCG_3144_MVE_TKT_SU", V.Local.b3144Exists)
F.Intrinsic.Control.If(V.Local.b3144Exists)
	F.ODBC.Connection!Con.TableExists("GCG_3144_WIP_OP_LABL", V.Local.b3144Exists)
F.Intrinsic.Control.EndIf
GUI.FormImportMaintenance.chkMoveTicketCrystal.Enabled(V.Local.b3144Exists)

F.ODBC.Connection!Con.TableExists("GAB_5455_MVE_TKT_SU", V.Local.b5455Exists)
F.Intrinsic.Control.If(V.Local.b5455Exists)
	F.ODBC.Connection!Con.TableExists("GAB_5455_WIP_OP_LABL", V.Local.b5455Exists)
F.Intrinsic.Control.EndIf
GUI.FormImportMaintenance.chkMoveTicketCodesoft.Enabled(V.Local.b5455Exists)

F.ODBC.Connection!Con.TableExists("ATG_MOVE_TCKT_SETUP", V.Local.bATGExists)
F.Intrinsic.Control.If(V.Local.bATGExists)
	F.ODBC.Connection!Con.TableExists("ATG_WIP_OPER_LABEL", V.Local.bATGExists)
F.Intrinsic.Control.EndIf
GUI.FormImportMaintenance.chkMoveTicketATG.Enabled(V.Local.bATGExists)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.CheckMoveticketProjects.End

Program.Sub.ClearExportScreen.Start
F.Intrinsic.Control.Try

GUI.FormExportMaintenance.ddlXPType.ListIndex(-1)
GUI.FormExportMaintenance.txtWorkOrder.Text("")
GUI.FormExportMaintenance.txtFullPartPath.Text("")
GUI.FormExportMaintenance.txtImportFields.Text("")
GUI.FormExportMaintenance.txtStaticFile.Text("")
GUI.FormExportMaintenance.txtXPPath.Text("")
F.Intrinsic.Control.CallSub(txtXPPath_LostFocus)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.ClearExportScreen.End

Program.Sub.cmdAdd_Click.Start
'add a WC XREF record

F.Intrinsic.Control.Try

V.Local.sFilter.Declare(String)

F.Intrinsic.Control.If(V.Screen.FormWCXref!txtGSWorkCenter.Text.Trim, =, "", or, V.Screen.FormWCXref!txtXREF.Text.Trim, =, "")
	F.Intrinsic.UI.Msgbox("Both fields need to be entered before adding.")
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

F.Intrinsic.String.Build("[PROFILE] = '{0}' and [WC] = '{1}' and [XREF] = '{2}'", V.Global.sProfile, V.Screen.FormWCXref!txtGSWorkCenter.Text.Trim, V.Screen.FormWCXref!txtXREF.Text.Trim, V.Local.sFilter)
F.Data.DataView.Create("dtWCXref", "dvCheck", 22, V.Local.sFilter, "")
F.Intrinsic.Control.If(V.DataView.dtWCXref!dvCheck.RowCount, >, 0)
	F.Intrinsic.UI.Msgbox("This record already exists.")
F.Intrinsic.Control.Else
	F.Data.DataTable.AddRow("dtWCXref", "WC", V.Screen.FormWCXref!txtGSWorkCenter.Text.Trim, "XREF", V.Screen.FormWCXref!txtXREF.Text.Trim, "PROFILE", V.Global.sProfile)

	GUI.FormWCXref.txtGSWorkCenter.Text("")
	GUI.FormWCXref.txtXREF.Text("")
	
	F.Intrinsic.Control.CallSub(gsgcWCXref_CellValueChanged)
F.Intrinsic.Control.EndIf

F.Data.DataView.Close("dtWCXref", "dvCheck")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.cmdAdd_Click.End

Program.Sub.cmdExpression_Click.Start
F.Intrinsic.Control.Try

GUI.FormImportMaintenance..Enabled(False)
V.Global.bExpressionTypeImport.Set(True)
F.Intrinsic.Control.CallSub(LoadExtraFields)

GUI.FormExtraFields..Caption("Extra Import Fields")
GUI.FormExtraFields..Show
GUI.FormExtraFields..SetFocus

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.cmdExpression_Click.End

Program.Sub.FormExtraFields_UnLoad.Start
F.Intrinsic.Control.Try

GUI.FormExtraFields..Visible(False)

F.Intrinsic.Control.CallSub(SaveExtraFields)

GUI.FormExtraFields.ddlType.ListIndex(-1)
GUI.FormExtraFields.txtValue.Text("")

F.Intrinsic.Control.If(V.Global.bExpressionTypeImport)
	F.Intrinsic.Control.CallSub(LoadImp)
	
	GUI.FormImportMaintenance..Enabled(True)
	GUI.FormImportMaintenance..SetFocus
F.Intrinsic.Control.Else
	F.Intrinsic.Control.CallSub(LoadExportFieldDropDown)
	F.Intrinsic.Control.CallSub(LoadExportFieldDictionary)
	f.Data.DataTable.FillFromDictionary("dtMapping","dictFieldDescriptions","MAPID","DESCR")

	GUI.FormExportMaintenance..Enabled(True)
	GUI.FormExportMaintenance..SetFocus
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.FormExtraFields_UnLoad.End

Program.Sub.LoadExtraFieldsScreen.Start
F.Intrinsic.Control.Try

F.Data.DataTable.Create("dtExtraFields", True)
F.Data.DataTable.AddColumn("dtExtraFields", "FIELD", "String", "")
F.Data.DataTable.AddColumn("dtExtraFields", "COLUMN_TYPE", "String", "")
F.Data.DataTable.AddColumn("dtExtraFields", "VALUE", "String", "")
F.Data.DataTable.AddColumn("dtExtraFields", "DESCRIPTION", "String", "")
F.Data.DataTable.AddColumn("dtExtraFields", "DELETE", "String", "")
F.Data.DataTable.AddExpressionColumn("dtExtraFields", "TYPE_INDEX", "Long", "IIF([FIELD] like 'STATIC%' or [FIELD] like 'EXPRESSION%', IIF([FIELD] like 'STATIC%', Convert(Substring([FIELD], 8, LEN([FIELD])), 'System.Int32'), Convert(Substring([FIELD], 12, LEN([FIELD])), 'System.Int32')), Convert(Substring([FIELD], 3, LEN([FIELD])), 'System.Int32'))")
F.Data.DataTable.AddExpressionColumn("dtExtraFields", "TRUE_VALUE", "String", "TRIM([VALUE]) + '@*!*@' + TRIM([DESCRIPTION])")

GUI.FormExtraFields.ddlType.AddItem("")
GUI.FormExtraFields.ddlType.AddItem("STATIC")
GUI.FormExtraFields.ddlType.AddItem("EXPRESSION")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.LoadExtraFieldsScreen.End

Program.Sub.LoadExtraFieldsGrid.Start
F.Intrinsic.Control.Try

GUI.FormExtraFields.gsgcExtraImportFields.AddGridviewFromDatatable("gvExtraImportFields", "dtExtraFields")

GUI.FormExtraFields.gsgcExtraImportFields.SetGridviewProperty("gvExtraImportFields", "EnableAppearanceOddRow", True)

GUI.FormExtraFields.gsgcExtraImportFields.SetColumnProperty("gvExtraImportFields", "FIELD", "HeaderFontBold", True)
GUI.FormExtraFields.gsgcExtraImportFields.SetColumnProperty("gvExtraImportFields", "COLUMN_TYPE", "HeaderFontBold", True)
GUI.FormExtraFields.gsgcExtraImportFields.SetColumnProperty("gvExtraImportFields", "VALUE", "HeaderFontBold", True)
GUI.FormExtraFields.gsgcExtraImportFields.SetColumnProperty("gvExtraImportFields", "DESCRIPTION", "HeaderFontBold", True)
GUI.FormExtraFields.gsgcExtraImportFields.SetColumnProperty("gvExtraImportFields", "DELETE", "HeaderFontBold", True)

GUI.FormExtraFields.gsgcExtraImportFields.SetColumnProperty("gvExtraImportFields", "FIELD", "MinWidth", 80)
GUI.FormExtraFields.gsgcExtraImportFields.SetColumnProperty("gvExtraImportFields", "COLUMN_TYPE", "MinWidth", 60)
GUI.FormExtraFields.gsgcExtraImportFields.SetColumnProperty("gvExtraImportFields", "VALUE", "MinWidth", 200)
GUI.FormExtraFields.gsgcExtraImportFields.SetColumnProperty("gvExtraImportFields", "DELETE", "MinWidth", 40)
GUI.FormExtraFields.gsgcExtraImportFields.SetColumnProperty("gvExtraImportFields", "DESCRIPTION", "MinWidth", 100)

GUI.FormExtraFields.gsgcExtraImportFields.SetColumnProperty("gvExtraImportFields", "FIELD", "Caption", "Field")
GUI.FormExtraFields.gsgcExtraImportFields.SetColumnProperty("gvExtraImportFields", "COLUMN_TYPE", "Caption", "Type")
GUI.FormExtraFields.gsgcExtraImportFields.SetColumnProperty("gvExtraImportFields", "VALUE", "Caption", "Value")
GUI.FormExtraFields.gsgcExtraImportFields.SetColumnProperty("gvExtraImportFields", "DESCRIPTION", "Caption", "Description")

GUI.FormExtraFields.gsgcExtraImportFields.SetColumnProperty("gvExtraImportFields", "FIELD", "AllowEdit", False)
GUI.FormExtraFields.gsgcExtraImportFields.SetColumnProperty("gvExtraImportFields", "COLUMN_TYPE", "AllowEdit", False)
GUI.FormExtraFields.gsgcExtraImportFields.SetColumnProperty("gvExtraImportFields", "VALUE", "AllowEdit", True)
GUI.FormExtraFields.gsgcExtraImportFields.SetColumnProperty("gvExtraImportFields", "DELETE", "AllowEdit", False)
GUI.FormExtraFields.gsgcExtraImportFields.SetColumnProperty("gvExtraImportFields", "DESCRIPTION", "AllowEdit", True)

GUI.FormExtraFields.gsgcExtraImportFields.SetColumnProperty("gvExtraImportFields", "FIELD", "ReadOnly", True)
GUI.FormExtraFields.gsgcExtraImportFields.SetColumnProperty("gvExtraImportFields", "COLUMN_TYPE", "ReadOnly", True)
GUI.FormExtraFields.gsgcExtraImportFields.SetColumnProperty("gvExtraImportFields", "VALUE", "ReadOnly", False)
GUI.FormExtraFields.gsgcExtraImportFields.SetColumnProperty("gvExtraImportFields", "DELETE", "ReadOnly", True)
GUI.FormExtraFields.gsgcExtraImportFields.SetColumnProperty("gvExtraImportFields", "DESCRIPTION", "ReadOnly", False)

GUI.FormExtraFields.gsgcExtraImportFields.SetColumnProperty("gvExtraImportFields", "TYPE_INDEX", "Visible", False)
GUI.FormExtraFields.gsgcExtraImportFields.SetColumnProperty("gvExtraImportFields", "TYPE_INDEX", "AllowShowHide", False)
GUI.FormExtraFields.gsgcExtraImportFields.SetColumnProperty("gvExtraImportFields", "TRUE_VALUE", "Visible", False)
GUI.FormExtraFields.gsgcExtraImportFields.SetColumnProperty("gvExtraImportFields", "TRUE_VALUE", "AllowShowHide", False)

GUI.FormExtraFields.gsgcExtraImportFields.SetColumnProperty("gvExtraImportFields", "DELETE", "ShowCaption", False)

GUI.FormExtraFields.gsgcExtraImportFields.SetColumnProperty("gvExtraImportFields", "COLUMN_TYPE", "SortOrder", "Ascending")
GUI.FormExtraFields.gsgcExtraImportFields.SetColumnProperty("gvExtraImportFields", "TYPE_INDEX", "SortOrder", "Ascending")

GUI.FormExtraFields.gsgcExtraImportFields.ColumnEdit("gvExtraImportFields", "DELETE", "EditorButton", "Delete")

GUI.FormExtraFields.gsgcExtraImportFields.MainView("gvExtraImportFields")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.LoadExtraFieldsGrid.End

Program.Sub.cmdAddExtraField_Click.Start
F.Intrinsic.Control.Try

V.Local.sFilter.Declare(String)
V.Local.sName.Declare(String)
V.Local.sValue.Declare(String)
V.Local.iNumber.Declare(Long)

V.Local.sValue.Set(V.Screen.FormExtraFields!txtValue.Text.Trim)

F.Intrinsic.Control.If(V.Screen.FormExtraFields!ddlType.Text.Trim, =, "")
	F.Intrinsic.UI.Msgbox("A type must be selected before adding.")
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Local.sValue, =, "")
	F.Intrinsic.UI.Msgbox("A value must be entered before adding.")
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

'check for duplicates
F.Intrinsic.String.Build("[VALUE] = '{0}' and [COLUMN_TYPE] = '{1}'", V.Local.sValue.PSQLFriendly, V.Screen.FormExtraFields!ddlType.Text.Trim, V.Local.sFilter)
F.Data.DataView.Create("dtExtraFields", "dvExtraFields", 22, V.Local.sFilter, "TYPE_INDEX")
F.Intrinsic.Control.If(V.DataView.dtExtraFields!dvExtraFields.RowCount, >, 0)
	F.Intrinsic.UI.Msgbox("A column with this type and value already exists.")
F.Intrinsic.Control.Else
	
	'build name STATIC_#, EXPRESSION_# (for import)
	'build name ST#, EX# (for export)
	F.Intrinsic.String.Build("[COLUMN_TYPE] = '{0}'", V.Screen.FormExtraFields!ddlType.Text.Trim, V.Local.sFilter)
	F.Data.DataView.SetFilter("dtExtraFields", "dvExtraFields", V.Local.sFilter)
	F.Intrinsic.Control.If(V.DataView.dtExtraFields!dvExtraFields.RowCount, >, 0)
	
		V.Local.sName.Set(V.DataView.dtExtraFields!dvExtraFields(V.DataView.dtExtraFields!dvExtraFields.RowCount--).FIELD!FieldValTrim)
		V.Local.iNumber.Set(V.DataView.dtExtraFields!dvExtraFields(V.DataView.dtExtraFields!dvExtraFields.RowCount--).TYPE_INDEX!FieldValLong)
		F.Intrinsic.Control.If(V.Global.bExpressionTypeImport)
			F.Intrinsic.String.Split(V.Local.sName, "_", V.Local.sName)
			F.Intrinsic.Math.Add(V.Local.iNumber, 1, V.Local.sName(1))
			F.Intrinsic.String.Join(V.Local.sName, "_", V.Local.sName)
			V.Local.sName.RedimPreserve(0, 0)
		F.Intrinsic.Control.Else
			F.Intrinsic.Math.Add(V.Local.iNumber, 1, V.Local.iNumber)
			F.Intrinsic.String.Build("{0}{1}", V.Local.sName.Left2, V.Local.iNumber, V.Local.sName)
		F.Intrinsic.Control.EndIf
		
	F.Intrinsic.Control.Else
		F.Intrinsic.Control.If(V.Global.bExpressionTypeImport)
			F.Intrinsic.String.Build("{0}_1", V.Screen.FormExtraFields!ddlType.Text.Trim, V.Local.sName)
		F.Intrinsic.Control.Else
			F.Intrinsic.Control.If(V.Screen.FormExtraFields!ddlType.Text.Trim, =, "STATIC")
				V.Local.sName.Set("ST1")
			F.Intrinsic.Control.Else
				V.Local.sName.Set("EX1")
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
	F.Data.DataTable.AddRow("dtExtraFields", "FIELD", V.Local.sName, "COLUMN_TYPE", V.Screen.FormExtraFields!ddlType.Text.Trim, "VALUE", V.Local.sValue, "DESCRIPTION", V.Screen.FormExtraFields!txtDescription.Text.Trim)
F.Intrinsic.Control.EndIf
F.Data.DataView.Close("dtExtraFields", "dvExtraFields")

GUI.FormExtraFields.txtValue.Text("")
GUI.FormExtraFields.txtDescription.Text("")
GUI.FormExtraFields.ddlType.ListIndex(-1)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.cmdAddExtraField_Click.End

Program.Sub.MoveExtraFieldsOverToSettingsTable.Start
'moves static fields from GCG_4980_NESTMAINT to GCG_4980_SETTINGS
'total conversion for all profiles

F.Intrinsic.Control.Try

V.Local.bConverted.Declare(Boolean, False)

F.Global.Registry.ReadValue(-1, V.Caller.CompanyCode, "Static Field Conversion", 4980, 0, 0, False, V.Local.bConverted)
F.Intrinsic.Control.If(V.Local.bConverted.Not)
	F.Data.DataTable.CreateFromSQL("dtOldStaticFields", "Con", "select RTRIM(MAPID) MAPID, RTRIM(HARDCODE_VALUE) HARDCODE_VALUE, RTRIM(PROFILE) PROFILE from GCG_4980_NESTMAINT where MAPID in ('ST1', 'ST2', 'ST3', 'ST4', 'ST5', 'ST6') and HARDCODE_VALUE <> ''")
	F.Intrinsic.Control.If(V.DataTable.dtOldStaticFields.RowCount, >, 0)
		F.Data.DataTable.AddColumn("dtOldStaticFields", "TYPE", "String", "EXPORT_FIELD")
		F.Data.DataTable.SaveToDB("dtOldStaticFields", "Con", "GCG_4980_SETTINGS", "PROFILE*!*TYPE*!*SETTING", 128, "PROFILE@!@PROFILE*!*TYPE@!@TYPE*!*MAPID@!@SETTING*!*HARDCODE_VALUE@!@VALUE")
	F.Intrinsic.Control.EndIf
	F.Data.DataTable.Close("dtOldStaticFields")
	F.Global.Registry.AddValue(-1, V.Caller.CompanyCode, "Static Field Conversion", 4980, 0, False, "", True, -1, -1, V.Ambient.Date, V.Ambient.Time)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.MoveExtraFieldsOverToSettingsTable.End

Program.Sub.SaveExtraFields.Start
F.Intrinsic.Control.Try

'build save to db datatable
F.Data.DataTable.AddColumn("dtExtraFields", "PROFILE", "String", V.Global.sProfile)

F.Intrinsic.Control.If(V.Global.bExpressionTypeImport)
	F.Data.DataTable.AddColumn("dtExtraFields", "TYPE", "String", "IMPORT_FIELD")
F.Intrinsic.Control.Else
	F.Data.DataTable.AddColumn("dtExtraFields", "TYPE", "String", "EXPORT_FIELD")
F.Intrinsic.Control.EndIf

F.Data.DataTable.SaveToDB("dtExtraFields", "Con", "GCG_4980_SETTINGS", "PROFILE*!*TYPE*!*FIELD", 256, "PROFILE@!@PROFILE*!*TYPE@!@TYPE*!*FIELD@!@SETTING*!*TRUE_VALUE@!@VALUE")

F.Data.DataTable.RemoveColumn("dtExtraFields", "PROFILE")
F.Data.DataTable.RemoveColumn("dtExtraFields", "TYPE")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.SaveExtraFields.End

Program.Sub.gsgcExtraImportFields_RowCellClick.Start
F.Intrinsic.Control.Try

V.Local.sSQL.Declare(String)
V.Local.sField.Declare(String)
V.Local.sType.Declare(String)

'delete the extra import field if they click the delete button
F.Intrinsic.Control.If(V.Args.Column.UCase, =, "DELETE")
	F.Intrinsic.Control.If(V.Global.bExpressionTypeImport)
		V.Local.sType.Set("IMPORT_FIELD")
	F.Intrinsic.Control.Else
		V.Local.sType.Set("EXPORT_FIELD")
	F.Intrinsic.Control.EndIf
	
	GUI.FormExtraFields.gsgcExtraImportFields.GetCellValueByColumnName("gvExtraImportFields", "FIELD", V.Args.RowIndex, V.Local.sField)
	F.Intrinsic.String.Build("delete from GCG_4980_SETTINGS where PROFILE = '{0}' and TYPE = '{1}' and SETTING = '{2}'", V.Global.sProfile, V.Local.sType, V.Local.sField, V.Local.sSQL)
	F.ODBC.Connection!Con.Execute(V.Local.sSQL)
	
	F.Data.DataTable.DeleteRow("dtExtraFields", V.Args.RowIndex)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.gsgcExtraImportFields_RowCellClick.End

Program.Sub.LoadExtraFields.Start
F.Intrinsic.Control.Try

V.Local.sSQL.Declare(String)
V.Local.sType.Declare(String)
V.Local.iCounter.Declare(Long)
V.Local.sValue.Declare(String)

F.Intrinsic.Control.If(V.Global.bExpressionTypeImport)
	GUI.FormExtraFields.txtExpressionType.Text("Import Fields")
	V.Local.sType.Set("IMPORT_FIELD")
F.Intrinsic.Control.Else
	GUI.FormExtraFields.txtExpressionType.Text("Export Fields")
	V.Local.sType.Set("EXPORT_FIELD")
F.Intrinsic.Control.EndIf

F.Intrinsic.String.Build("select RTRIM(SETTING) FIELD, RTRIM(VALUE) VALUE, IF(SUBSTRING(SETTING, 1, 2) = 'ST', 'STATIC', 'EXPRESSION') COLUMN_TYPE from GCG_4980_SETTINGS A where PROFILE = '{0}' and A.TYPE = '{1}'", V.Global.sProfile, V.Local.sType, V.Local.sSQL)

F.Data.DataTable.CreateFromSQL("dtExtraFieldsTemp", "Con", V.Local.sSQL)
F.Data.DataTable.AddColumn("dtExtraFieldsTemp", "DESCRIPTION", "String", "")

F.Intrinsic.Control.For(V.Local.iCounter, 0, V.DataTable.dtExtraFieldsTemp.RowCount--, 1)
	F.Intrinsic.String.Split(V.DataTable.dtExtraFieldsTemp(V.Local.iCounter).Value!FieldValTrim, "@*!*@", V.Local.sValue)
	V.Local.sValue.RedimPreserve(0, 1)
	F.Data.DataTable.SetValue("dtExtraFieldsTemp", V.Local.iCounter, "VALUE", V.Local.sValue(0).Trim, "DESCRIPTION", V.Local.sValue(1).Trim)
F.Intrinsic.Control.Next(V.Local.iCounter)
V.Local.sValue.Redim(0, 0)

F.Data.DataTable.DeleteRow("dtExtraFields")
F.Data.DataTable.Merge("dtExtraFieldsTemp", "dtExtraFields", False, 2)
F.Data.DataTable.AcceptChanges("dtExtraFields")
F.Data.DataTable.Close("dtExtraFieldsTemp")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.LoadExtraFields.End

Program.Sub.chkUnattendedImport_Click.Start
F.Intrinsic.Control.Try

GUI.FormImportMaintenance.ddlImportFrequency.Enabled(V.Screen.FormImportMaintenance!chkUnattendedImport.CheckedAsBoolean)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.chkUnattendedImport_Click.End

Program.Sub.LoadAutomatedImportDropDown.Start
F.Intrinsic.Control.Try

GUI.FormImportMaintenance.ddlImportFrequency.AddItem("Online")
GUI.FormImportMaintenance.ddlImportFrequency.AddItem("5 Minutes")
GUI.FormImportMaintenance.ddlImportFrequency.AddItem("10 Minutes")
GUI.FormImportMaintenance.ddlImportFrequency.AddItem("15 Minutes")
GUI.FormImportMaintenance.ddlImportFrequency.AddItem("30 Minutes")
GUI.FormImportMaintenance.ddlImportFrequency.AddItem("Hourly")
GUI.FormImportMaintenance.ddlImportFrequency.AddItem("Daily")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.LoadAutomatedImportDropDown.End

Program.Sub.LoadScriptButtonDropDown.Start
F.Intrinsic.Control.Try

GUI.FormImportMaintenance.ddlScriptButton.AddItem("Do Not Launch from GUI")
GUI.FormImportMaintenance.ddlScriptButton.AddItem("Script 1")
GUI.FormImportMaintenance.ddlScriptButton.AddItem("Script 2")
GUI.FormImportMaintenance.ddlScriptButton.AddItem("Script 3")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.LoadScriptButtonDropDown.End

Program.Sub.LoadLaborSequenceDropDown.Start
F.Intrinsic.Control.Try

GUI.FormImportMaintenance.ddlCloseLaborSequence.AddItem("Never Close")
GUI.FormImportMaintenance.ddlCloseLaborSequence.AddItem("Always Close")
GUI.FormImportMaintenance.ddlCloseLaborSequence.AddItem("Close When Run Quantity Is Met")
GUI.FormImportMaintenance.ddlCloseLaborSequence.AddItem("Close When Customer Quantity Is Met")
GUI.FormImportMaintenance.ddlCloseLaborSequence.AddItem("Close When Material Sequence Is Closed")
GUI.FormImportMaintenance.ddlCloseLaborSequence.AddItem("Manually Close")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.LoadLaborSequenceDropDown.End

Program.Sub.LoadMaterialSequenceDropDown.Start
F.Intrinsic.Control.Try

GUI.FormImportMaintenance.ddlCloseMaterialSequence.AddItem("Never Close")
GUI.FormImportMaintenance.ddlCloseMaterialSequence.AddItem("Always Close")
GUI.FormImportMaintenance.ddlCloseMaterialSequence.AddItem("Close When Estimated Quantity Is Met")
GUI.FormImportMaintenance.ddlCloseMaterialSequence.AddItem("Close When Labor Sequence Is Closed")
GUI.FormImportMaintenance.ddlCloseMaterialSequence.AddItem("Manually Close")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.LoadMaterialSequenceDropDown.End

Program.Sub.LoadPartSeparationCloseTypeDropDown.Start
F.Intrinsic.Control.Try

GUI.FormImportMaintenance.ddlPartSeparationCloseType.AddItem("Never Close")
GUI.FormImportMaintenance.ddlPartSeparationCloseType.AddItem("Always Close")
GUI.FormImportMaintenance.ddlPartSeparationCloseType.AddItem("Close When Run Quantity Is Met")
GUI.FormImportMaintenance.ddlPartSeparationCloseType.AddItem("Close When Customer Quantity Is Met")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.LoadPartSeparationCloseTypeDropDown.End

Program.Sub.cmdExportExpressionColumns_Click.Start
F.Intrinsic.Control.Try

GUI.FormExportMaintenance..Enabled(False)

V.Global.bExpressionTypeImport.Set(False)
F.Intrinsic.Control.CallSub(LoadExtraFields)

GUI.FormExtraFields..Caption("Extra Export Fields")
GUI.FormExtraFields..Show
GUI.FormExtraFields..SetFocus

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.cmdExportExpressionColumns_Click.End

Program.Sub.gsgcWCXref_RowCellClick.Start
F.Intrinsic.Control.Try

'delete the selected WC Xref row

V.Local.sSQL.Declare(String)

F.Intrinsic.Control.If(V.Args.Column.UCase, =, "DELETE")
	F.Intrinsic.String.Build("delete from GCG_4980_WCXREF where PROFILE = '{0}' and WC = '{1}' and XREF = '{2}'", V.Global.sProfile, V.DataTable.dtWCXref(V.Args.RowIndex).WC!FieldValTrim, V.DataTable.dtWCXref(V.Args.RowIndex).XREF!FieldValTrim, V.Local.sSQL)
	F.ODBC.Connection!Con.Execute(V.Local.sSQL)

	F.Data.DataTable.DeleteRow("dtWCXref", V.Args.RowIndex)
	F.Data.DataTable.AcceptChanges("dtWCXref")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.gsgcWCXref_RowCellClick.End

Program.Sub.cmdWorkcenterBrowser_Click.Start
F.Intrinsic.Control.Try

V.Local.sRet.Declare(String)
V.Local.sColumns.Declare(String)
V.Local.sSizes.Declare(String)

V.Local.sColumns.Set("WC*!*Description")
F.Intrinsic.String.Split(V.Local.sColumns, "*!*", V.Local.sColumns)

V.Local.sSizes.Set("60*!*180")
F.Intrinsic.String.Split(V.Local.sSizes, "*!*", V.Local.sSizes)

F.Intrinsic.UI.Browser("Nesting Workcenters", "Con", "select RTRIM(MACHINE), RTRIM(WC_NAME) from V_WORKCENTERS where NESTING_INTRFC = 'Y'", V.Local.sColumns, V.Local.sSizes, V.Local.sRet)
'F.Intrinsic.UI.Browser(400, "", V.Local.sRet)
F.Intrinsic.Control.If(V.Local.sRet.IsNotCancel)
	F.Intrinsic.String.Split(V.Local.sRet, "*!*", V.Local.sRet)
	GUI.FormWCXref.txtGSWorkCenter.Text(V.Local.sRet(0).Trim)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.cmdWorkcenterBrowser_Click.End

Program.Sub.txtDateFormat_LostFocus.Start
'check if the entered date format is valid

F.Intrinsic.Control.Try

V.Local.sFormat.Declare(String)

F.Intrinsic.Control.If(V.Screen.FormExportMaintenance!txtDateFormat.Text.Trim, =, "")
	GUI.FormExportMaintenance.txtDateFormat.Text("mm/dd/yy")
F.Intrinsic.Control.Else
	V.Local.sFormat.Set(V.Screen.FormExportMaintenance!txtDateFormat.Text.Trim)
	V.Local.sFormat.Set(V.Local.sFormat.UCase)
	
	F.Intrinsic.String.Replace(V.Local.sFormat, "D", "", V.Local.sFormat)
	F.Intrinsic.String.Replace(V.Local.sFormat, "M", "", V.Local.sFormat)
	F.Intrinsic.String.Replace(V.Local.sFormat, "Y", "", V.Local.sFormat)
	F.Intrinsic.String.Replace(V.Local.sFormat, "-", "", V.Local.sFormat)
	F.Intrinsic.String.Replace(V.Local.sFormat, "/", "", V.Local.sFormat)
	F.Intrinsic.String.Replace(V.Local.sFormat, ":", "", V.Local.sFormat)
	F.Intrinsic.String.Replace(V.Local.sFormat, "H", "", V.Local.sFormat)
	F.Intrinsic.String.Replace(V.Local.sFormat, "N", "", V.Local.sFormat)
	F.Intrinsic.String.Replace(V.Local.sFormat, "S", "", V.Local.sFormat)
	F.Intrinsic.String.Replace(V.Local.sFormat, "T", "", V.Local.sFormat)
	
	F.Intrinsic.Control.If(V.Local.sFormat.Trim, !=, "")
		F.Intrinsic.UI.Msgbox("Invalid date format. Valid characters are d, m, y, -, and /.")
		GUI.FormExportMaintenance.txtDateFormat.Text("mm/dd/yy")
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.txtDateFormat_LostFocus.End

Program.Sub.ddlProfile_Change.Start
F.Intrinsic.Control.Try

F.Intrinsic.Control.If(V.Caller.GSSVersion, >=, "2019.1")
	F.Intrinsic.Control.CallSub(ddlProfile_Click)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.ddlProfile_Change.End

Program.Sub.chkSplitMaterial_Click.Start
F.Intrinsic.Control.Try

GUI.FormImportMaintenance.txtDelimiter.Enabled(V.Screen.FormImportMaintenance!chkSplitMaterial.CheckedAsBoolean)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.chkSplitMaterial_Click.End

Program.Sub.txtDelimiter_LostFocus.Start
F.Intrinsic.Control.Try

F.Intrinsic.Control.If(V.Screen.FormImportMaintenance!txtDelimiter.Text.Trim, =, "")
	GUI.FormImportMaintenance.txtDelimiter.Text("-")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.txtDelimiter_LostFocus.End

Program.Sub.cmdLoadDefaultFieldList_Click.Start
V.Local.iRet.Declare(Long)
V.Local.iCounter.Declare(Long)
V.Local.sMap.Declare(String)
V.Local.sNumber.Declare(String)

F.Intrinsic.Control.Try

F.Intrinsic.UI.Msgbox("Are you sure you want to clear the existing mapping and load the default?", "Load Default", 4, V.Local.iRet)
F.Intrinsic.Control.If(V.Local.iRet, =, V.Ambient.MsgBoxYes)
	F.Data.DataTable.DeleteRow("dtMapping")
	F.Data.DataTable.AcceptChanges("dtMapping")
		
	'for custom type, just load all fields
	F.Intrinsic.Control.If(V.Global.sXPtype.Trim, =, "C")
		F.Intrinsic.Control.For(V.Local.iCounter, 0, V.DataTable.dtLegend.RowCount--, 1)
			F.Intrinsic.String.Build("C{0}", V.DataTable.dtLegend(V.Local.iCounter).INDEX!FieldValLong, V.Local.sMap)
			V.Local.sNumber.Set(V.DataTable.dtLegend(V.Local.iCounter).INDEX!FieldValLong)
			F.Intrinsic.Control.If(V.Local.sNumber.Length, <=, 1)
				F.Intrinsic.String.LPad(V.Local.sNumber, "0", 2, V.Local.sNumber)
			F.Intrinsic.Control.EndIf
			
			F.Data.DataTable.AddRow("dtMapping", "Enabled", True, "XPField", V.Local.sMap, "XPType", V.Global.sXPtype, "MapID", V.Local.sNumber, "INDX", V.Local.iCounter, "PROFILE", V.Global.sProfile, "XML_PATH", "")
		F.Intrinsic.Control.Next(V.Local.iCounter)
	F.Intrinsic.Control.ElseIf(V.Global.sXPtype.Trim, =, "B", "OR", V.Global.sXPtype.Trim, =, "Y")
		F.Intrinsic.Control.CallSub(LoadXMLFields)
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.CallSub(LoadFieldList)
	F.Data.DataTable.FillFromDictionary("dtMapping", "dictFieldDescriptions", "MAPID", "DESCR")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.cmdLoadDefaultFieldList_Click.End

Program.Sub.LoadXMLFields.Start
F.Intrinsic.Control.Try

V.Local.iIndex.Declare(Long, -1)
V.Local.bExists.Declare(Boolean, False)
V.Local.sFile.Declare(String)
V.Local.sContents.Declare(String)
V.Local.sLine.Declare(String)
V.Local.sFileName.Declare(String, "")

'load the file
F.Intrinsic.Control.SelectCase(V.Global.sXPtype.Trim)
	F.Intrinsic.Control.Case("B")
		V.Local.sFileName.Set("GCG_4980_BoostExportFields.dat")
	F.Intrinsic.Control.Case("Y")
		V.Local.sFileName.Set("GCG_4980_BysoftExportFields.dat")
	F.Intrinsic.Control.CaseElse
		'this one will just fail, that's fine, should never occur
		V.Local.sFileName.Set("GCG_4980_ErrorExportFields.dat")
F.Intrinsic.Control.EndSelect

F.Intrinsic.String.Build("{0}\{1}", V.Ambient.ScriptPath, V.Local.sFileName, V.Local.sFile)
F.Intrinsic.File.Exists(V.Local.sFile, V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists)
	F.Intrinsic.File.File2String(V.Local.sFile, V.Local.sContents)
	
	F.Intrinsic.String.Split(V.Local.sContents, V.Ambient.NewLine, V.Local.sContents)
	F.Intrinsic.Control.For(V.Local.iIndex, 0, V.Local.sContents.UBound, 1)
		F.Intrinsic.String.Split(V.Local.sContents(V.Local.iIndex), "*!*", V.Local.sLine)
		F.Data.DataTable.AddRow("dtMapping", "XPTYPE", V.Global.sXPtype, "Enabled", True, "XPField", V.Local.sLine(0), "XML_PATH", V.Local.sLine(1), "INDX", V.Local.iIndex, "PROFILE", V.Global.sProfile)
	F.Intrinsic.Control.Next(V.Local.iIndex)
	V.Local.sLine.Redim(0, 0)
	V.Local.sContents.Redim(0, 0)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.LoadXMLFields.End

Program.Sub.chkFlexSchedule_Click.Start
F.Intrinsic.Control.Try

F.Intrinsic.Control.If(V.Screen.FormImportMaintenance!chkFlexSchedule.CheckedAsBoolean)
	GUI.FormImportMaintenance.chkBackFlushLab.Value(False)
F.Intrinsic.Control.Else
	GUI.FormImportMaintenance.chkBackFlushLab.Enabled(True)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.chkFlexSchedule_Click.End

Program.Sub.ddlXPType_Change.Start
F.Intrinsic.Control.Try

F.Intrinsic.Control.If(V.Caller.GSSVersion, >=, "2019.1")
	F.Intrinsic.Control.CallSub(ddlXPType_Click)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.ddlXPType_Change.End

Program.Sub.txtImpRemList_Change.Start
F.Intrinsic.Control.Try

F.Intrinsic.Control.If(V.Screen.FormImportMaintenance!txtImpRemList.Text.Trim, !=, "")
	GUI.FormImportMaintenance.cmdImpRemList.Enabled(True)
F.Intrinsic.Control.Else
	GUI.FormImportMaintenance.cmdImpRemList.Enabled(False)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.txtImpRemList_Change.End

Program.Sub.CheckImportGrid.Start
'show XML path for XML exports
F.Intrinsic.Control.Try

F.Intrinsic.Control.If(V.Global.sXPtype, =, "B", "OR", V.Global.sXPtype, =, "Y")
	GUI.FormExportMaintenance.GsGCFieldMap.SetColumnProperty("gvExportMap", "XML_PATH", "Visible", True)
F.Intrinsic.Control.Else
	GUI.FormExportMaintenance.GsGCFieldMap.SetColumnProperty("gvExportMap", "XML_PATH", "Visible", False)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.CheckImportGrid.End

Program.Sub.cmdBendingWCBrowser_Click.Start
F.Intrinsic.Control.Try

V.Local.sTitles.Declare(String, "Name*!*Description*!*WG")
V.Local.sSizes.Declare(String, "60*!*180*!*40")
V.Local.sRet.Declare(String)
V.Local.sSQL.Declare(String, "select RTRIM(WORK_GROUP) NAME, RTRIM(DESCR) DESCRIPTION, Cast(1 as Bit) WG from V_WORKGROUP_HEAD union select RTRIM(MACHINE) NAME, RTRIM(WC_NAME) DESCRIPTION, CAST(0 as Bit) WG from V_WORKCENTERS order by NAME")
V.Local.sFinal.Declare(String)

F.Intrinsic.String.Split(V.Local.sTitles, "*!*", V.Local.sTitles)
F.Intrinsic.String.Split(V.Local.sSizes, "*!*", V.Local.sSizes)

F.Intrinsic.UI.SetBrowserMultiSelect(True)
F.Intrinsic.UI.Browser("Workcenters", "Con", V.Local.sSQL, V.Local.sTitles, V.Local.sSizes, V.Local.sRet)
F.Intrinsic.UI.SetBrowserMultiSelect(False)
V.Local.sSizes.Redim(0, 0)
V.Local.sTitles.Redim(0, 0)

F.Intrinsic.Control.If(V.Local.sRet.IsNotCancel)
	F.Data.DataTable.CreateFromString("dtWorkcenters", V.Local.sRet, "Name*!*Description*!*WG", "String*!*String*!*Boolean", "*!*", "!*!")
	F.Data.DataTable.ColumnToString("dtWorkcenters", "NAME", V.Local.sFinal)
	F.Data.DataTable.Close("dtWorkcenters")
	F.Intrinsic.String.Replace(V.Local.sFinal, "*!*", ",", V.Local.sFinal)
	GUI.FormExportMaintenance.txtBendingWorkcenters.Text(V.Local.sFinal)
F.Intrinsic.Control.Else
	GUI.FormExportMaintenance.txtBendingWorkcenters.Text("")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.cmdBendingWCBrowser_Click.End

Program.Sub.chkBendingStep_Click.Start
F.Intrinsic.Control.Try

GUI.FormExportMaintenance.cmdBendingWCBrowser.Enabled(V.Screen.FormExportMaintenance!chkBendingStep.CheckedAsBoolean)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.chkBendingStep_Click.End

Program.Sub.chkPartSeparation_Click.Start
F.Intrinsic.Control.Try

GUI.FormImportMaintenance.txtPartSeparationPath.Enabled(V.Screen.FormImportMaintenance!chkPartSeparation.CheckedAsBoolean)
GUI.FormImportMaintenance.cmdPartSeparationPathBrowser.Enabled(V.Screen.FormImportMaintenance!chkPartSeparation.CheckedAsBoolean)
GUI.FormImportMaintenance.cmdPartSeparationWCBrowser.Enabled(V.Screen.FormImportMaintenance!chkPartSeparation.CheckedAsBoolean)
GUI.FormImportMaintenance.ddlPartSeparationCloseType.Enabled(V.Screen.FormImportMaintenance!chkPartSeparation.CheckedAsBoolean)
GUI.FormImportMaintenance.cmdPartSeparationEmployeeBrowser.Enabled(V.Screen.FormImportMaintenance!chkPartSeparation.CheckedAsBoolean)
GUI.FormImportMaintenance.txtPartSeparationDefaultEmployee.Enabled(V.Screen.FormImportMaintenance!chkPartSeparation.CheckedAsBoolean)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.chkPartSeparation_Click.End

Program.Sub.cmdPartSeparationPathBrowser_Click.Start
F.Intrinsic.Control.Try

V.local.sPath.Declare(String)

F.Intrinsic.UI.FolderBrowser("Part Separation File Import Path", V.Local.sPath)

F.Intrinsic.Control.If(V.Local.sPath.IsNotCancel)
	GUI.FormImportMaintenance.txtPartSeparationPath.Text(V.Local.sPath)
F.Intrinsic.Control.EndIf
F.Intrinsic.Control.CallSub(txtPartSeparationPath_LostFocus)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.cmdPartSeparationPathBrowser_Click.End

Program.Sub.cmdPartSeparationWCBrowser_Click.Start
F.Intrinsic.Control.Try

V.Local.sTitles.Declare(String, "Name*!*Description*!*WG")
V.Local.sSizes.Declare(String, "60*!*180*!*40")
V.Local.sRet.Declare(String)
V.Local.sSQL.Declare(String, "select RTRIM(WORK_GROUP) NAME, RTRIM(DESCR) DESCRIPTION, Cast(1 as Bit) WG from V_WORKGROUP_HEAD union select RTRIM(MACHINE) NAME, RTRIM(WC_NAME) DESCRIPTION, CAST(0 as Bit) WG from V_WORKCENTERS order by NAME")
V.Local.sFinal.Declare(String)

F.Intrinsic.String.Split(V.Local.sTitles, "*!*", V.Local.sTitles)
F.Intrinsic.String.Split(V.Local.sSizes, "*!*", V.Local.sSizes)

F.Intrinsic.UI.SetBrowserMultiSelect(True)
F.Intrinsic.UI.Browser("Workcenters", "Con", V.Local.sSQL, V.Local.sTitles, V.Local.sSizes, V.Local.sRet)
F.Intrinsic.UI.SetBrowserMultiSelect(False)
V.Local.sSizes.Redim(0, 0)
V.Local.sTitles.Redim(0, 0)

F.Intrinsic.Control.If(V.Local.sRet.IsNotCancel)
	F.Data.DataTable.CreateFromString("dtWorkcenters", V.Local.sRet, "Name*!*Description*!*WG", "String*!*String*!*Boolean", "*!*", "!*!")
	F.Data.DataTable.ColumnToString("dtWorkcenters", "NAME", V.Local.sFinal)
	F.Data.DataTable.Close("dtWorkcenters")
	F.Intrinsic.String.Replace(V.Local.sFinal, "*!*", ",", V.Local.sFinal)
	GUI.FormImportMaintenance.txtPartSeparationWorkcenters.Text(V.Local.sFinal)
F.Intrinsic.Control.Else
	GUI.FormImportMaintenance.txtPartSeparationWorkcenters.Text("")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.cmdPartSeparationWCBrowser_Click.End

Program.Sub.txtPartSeparationDefaultEmployee_LostFocus.Start
F.Intrinsic.Control.Try

V.Local.sSQL.Declare(String)
V.Local.sRet.Declare(String)

F.Intrinsic.Control.If(V.Screen.FormImportMaintenance!txtPartSeparationDefaultEmployee.Text.Trim, !=, "")
	F.Intrinsic.String.Build("select RTRIM(EMPLOYEE), RTRIM(NAME) from V_EMPLOYEE_MSTR where DATE_TERMINATION = '1900-01-01' and PAY_TYPE <> 'S' and EMPLOYEE = '{0}'", V.Screen.FormImportMaintenance!txtPartSeparationDefaultEmployee.Text.Trim, V.Local.sSQL)
	F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
	F.Intrinsic.Control.If(V.Ambient.ExecuteAndReturnEOF)
		F.Intrinsic.UI.Msgbox("Invalid Employee Entered.")
		GUI.FormImportMaintenance.txtPartSeparationDefaultEmployee.Text("")
		GUI.FormImportMaintenance.txtPartSeparationDefaultEmployeeName.Text("")
	F.Intrinsic.Control.Else
		F.Intrinsic.String.Split(V.Local.sRet, "*!*", V.Local.sRet)
		GUI.FormImportMaintenance.txtPartSeparationDefaultEmployee.Text(V.Local.sRet(0).Trim)
		GUI.FormImportMaintenance.txtPartSeparationDefaultEmployeeName.Text(V.Local.sRet(1).Trim)
		V.Local.sRet.Redim(0, 0)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Else
	GUI.FormImportMaintenance.txtPartSeparationDefaultEmployee.Text("")
	GUI.FormImportMaintenance.txtPartSeparationDefaultEmployeeName.Text("")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.txtPartSeparationDefaultEmployee_LostFocus.End

Program.Sub.cmdPartSeparationEmployeeBrowser_Click.Start
F.Intrinsic.Control.Try

V.Local.sSQL.Declare(String)
V.local.sTitles.Declare(String)
V.Local.iWidths.Declare(String)
V.Local.sRet.Declare(String)

'create browser
V.Local.sSQL.Set("select RTRIM(EMPLOYEE), RTRIM(NAME) from V_EMPLOYEE_MSTR where DATE_TERMINATION = '1900-01-01' and PAY_TYPE <> 'S'")
F.Intrinsic.String.Split("Employee ID*!*Name", "*!*", V.Local.sTitles)
F.Intrinsic.String.Split("300*!*600", "*!*", V.Local.iWidths)
f.Intrinsic.UI.Browser("Employees", "Con", V.Local.sSQL, V.Local.sTitles, V.Local.iWidths, V.Local.sRet)

'handle return
F.Intrinsic.Control.If(V.Local.sRet.IsNotCancel)
	f.Intrinsic.String.Split(V.Local.sRet, "*!*", V.local.sRet)
	GUI.FormImportMaintenance.txtPartSeparationDefaultEmployee.Text(V.Local.sRet(0).Trim)
	GUI.FormImportMaintenance.txtPartSeparationDefaultEmployeeName.Text(V.Local.sRet(1).Trim)
	V.Local.sRet.Redim(0, 0)
f.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.cmdPartSeparationEmployeeBrowser_Click.End

Program.Sub.gsgcExtraImportFields_CellValueChanged.Start
F.Intrinsic.Control.Try

V.Local.sType.Declare(String)
V.Local.sField.Declare(String)
V.Local.sValue.Declare(String)
V.Local.sDescription.Declare(String)
V.Local.sSQL.Declare(String)

F.Intrinsic.Control.If(V.Args.Column.UCase, =, "VALUE", "OR", V.Args.Column.UCase, =, "DESCRIPTION")
	F.Intrinsic.Control.If(V.Global.bExpressionTypeImport)
		V.Local.sType.Set("IMPORT_FIELD")
	F.Intrinsic.Control.Else
		V.Local.sType.Set("EXPORT_FIELD")
	F.Intrinsic.Control.EndIf

	GUI.FormExtraFields.gsgcExtraImportFields.GetCellValueByColumnName("gvExtraImportFields", "FIELD", V.Args.RowIndex, V.Local.sField)
	GUI.FormExtraFields.gsgcExtraImportFields.GetCellValueByColumnName("gvExtraImportFields", "VALUE", V.Args.RowIndex, V.Local.sValue)
	GUI.FormExtraFields.gsgcExtraImportFields.GetCellValueByColumnName("gvExtraImportFields", "DESCRIPTION", V.Args.RowIndex, V.Local.sDescription)
	F.Intrinsic.String.Build("{0}@*!*@{1}", V.Local.sValue, V.Local.sDescription, V.Local.sValue)
	F.Intrinsic.String.Build("update GCG_4980_SETTINGS set VALUE = '{3}' where PROFILE = '{0}' and TYPE = '{1}' and SETTING = '{2}'", V.Global.sProfile, V.Local.sType, V.Local.sField, V.Local.sValue.PSQLFriendly, V.Local.sSQL)
	F.ODBC.Connection!Con.Execute(V.Local.sSQL)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.gsgcExtraImportFields_CellValueChanged.End

Program.Sub.FixExtraFieldsLabel.Start
F.Intrinsic.Control.Try

V.Local.sCaption.Declare(String)

F.Intrinsic.String.Build("Expression fields are evaluated expressions based off of other fields. Enter field names in square brackets. Valid expressions include{0}normal math, conversion, IIF, and string operations.", V.Ambient.NewLine, V.Local.sCaption)
GUI.FormExtraFields.lblInfoExpression.Caption(V.Local.sCaption)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.FixExtraFieldsLabel.End

Program.Sub.chkUseProdOperationExp_Click.Start
F.Intrinsic.Control.Try

F.Intrinsic.Control.If(V.Screen.FormImportMaintenance!chkUseProdOperationExp.CheckedAsBoolean)
	GUI.FormImportMaintenance.chkUsePdaExp.Value(False)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.chkUseProdOperationExp_Click.End

Program.Sub.chkUsePdaExp_Click.Start
F.Intrinsic.Control.Try

F.Intrinsic.Control.If(V.Screen.FormImportMaintenance!chkUsePdaExp.CheckedAsBoolean)
	GUI.FormImportMaintenance.chkUseProdOperationExp.Value(False)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.chkUsePdaExp_Click.End

Program.Sub.cmdExportProfile_Click.Start
'create an export file of the nesting settings for this profile.

F.Intrinsic.Control.Try

V.Local.sFile.Declare(String)
V.Local.sSQL.Declare(String)
V.Local.sTempFile.Declare(String)
V.Local.sTempPath.Declare(String)
V.Local.sDataTables.Declare(String, "dtExportNestProfile*!*dtExportImpMaint*!*dtExportNestMaint*!*dtExportRemMaint*!*dtExportSettings*!*dtExportWCXref")
V.Local.sTables.Declare(String, "GCG_4980_NESTPROFILE*!*GCG_4980_IMPMAINT*!*GCG_4980_NESTMAINT*!*GCG_4980_REMMAINT*!*GCG_4980_SETTINGS*!*GCG_4980_WCXREF")
V.Local.sFiles.Declare(String)
V.Local.iCounter.Declare(Long)
V.Local.sMessage.Declare(String)
V.Local.sCopyFile.Declare(String)
V.Local.iRet.Declare(Long)

F.Intrinsic.Control.If(V.Caller.GSSVersion, <, "2019.1")
	F.Intrinsic.UI.Msgbox("Profile export is only available for GSS 2019.1 and higher.")
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

F.Intrinsic.UI.Msgbox("Save before exporting?", "Profile Export", 4, V.Local.iRet)
F.Intrinsic.Control.If(V.Local.iRet, =, V.Ambient.MsgBoxYes)
	F.Intrinsic.Control.CallSub(cmdSaveMap_Click)
	F.Intrinsic.Control.CallSub(cmdSaveImpConf_Click)
F.Intrinsic.Control.EndIf

F.Intrinsic.UI.ShowSaveFileDialog("", "4980|*.4980", V.Local.sFile)

F.Intrinsic.Control.If(V.Local.sFile.IsNotCancel)
	F.Intrinsic.String.Split(V.Local.sDataTables, "*!*", V.Local.sDataTables)
	F.Intrinsic.String.Split(V.Local.sTables, "*!*", V.Local.sTables)
	V.Local.sFiles.Redim(0, V.Local.sDataTables.UBound)
	
	'build export temp directory
	F.Intrinsic.String.Build("{0}4980\Profile Export\{1}", V.Caller.LocalGSSTempDir, V.Ambient.Now.FormatYYYY-MM-DD-HH-NN-SS, V.Local.sTempPath)
	F.Intrinsic.Control.CallSub(CheckDirectories, "Directories", V.Local.sTempPath)
	
	'load in all nesting tables for this profile, export them
	F.Intrinsic.Control.For(V.Local.iCounter, 0, V.Local.sDataTables.UBound, 1)
		F.Intrinsic.String.Build("Select * from {1} where PROFILE = '{0}'", V.Global.sProfile.Trim, V.Local.sTables(V.Local.iCounter), V.Local.sSQL)
		F.Data.DataTable.CreateFromSQL(V.Local.sDataTables(V.Local.iCounter), "Con", V.Local.sSQL)
		
		F.Intrinsic.String.Build("{0}\{1}-{2}.xml", V.Local.sTempPath, V.Local.sDataTables(V.Local.iCounter), V.Local.sTables(V.Local.iCounter), V.Local.sTempFile)
		F.Data.DataTable.SaveToXML(V.Local.sDataTables(V.Local.iCounter), 0, True, V.Local.sTempFile)
		F.Data.DataTable.Close(V.Local.sDataTables(V.Local.iCounter))
		V.Local.sFiles(V.Local.iCounter).Set(V.Local.sTempFile)
	F.Intrinsic.Control.Next(V.Local.iCounter)
	
	'now zip these files
	F.Automation.ZIPPro.SetProperty("ArchiveFile", V.Local.sFile)
	F.Intrinsic.String.Join(V.Local.sFiles, "|", V.Local.sFiles)
	V.Local.sFiles.RedimPreserve(0, 0)
	F.Automation.ZIPPro.IncludeFiles(V.Local.sFiles)
	F.Automation.ZIPPro.Compress
	F.Intrinsic.Control.CallSub(ClearDirectory, "Path", V.Local.sTempPath)
	
	'create a copy in the Global\Custom\4980 Directory, just in case
	F.Intrinsic.String.Build("{0}\Custom\4980\{1}\Profile Exports\{2}", V.Caller.GlobalDir, V.Caller.CompanyCode, V.Global.sProfile, V.Local.sCopyFile)
	F.Intrinsic.Control.CallSub(CheckDirectories, "Directories", V.Local.sCopyFile)
	F.Intrinsic.String.Build("{0}\ProfileExport_{1}.4980", V.Local.sCopyFile, V.Ambient.Now.FormatYYYY-MM-DD-HH-NN-SS, V.Local.sCopyFile)
	F.Intrinsic.File.CopyFile(V.Local.sFile, V.Local.sCopyFile)
	
	F.Intrinsic.String.Build("Profile export file created successfully: [{0}]", V.Local.sFile, V.Local.sMessage)
	F.Intrinsic.UI.Msgbox(V.Local.sMessage)
	
	V.Local.sDataTables.Redim(0, 0)
	V.Local.sTables.Redim(0, 0)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.cmdExportProfile_Click.End

Program.Sub.cmdImportProfile_Click.Start
'import one of the files created in cmdExportProfile_Click into this profile

F.Intrinsic.Control.Try

V.Local.iRet.Declare(Long)
V.Local.sFile.Declare(String)
V.Local.sTempPath.Declare(String)
V.Local.sNewFile.Declare(String)
V.Local.sExtractPath.Declare(String)
V.Local.sFileList.Declare(String)
V.Local.iCounter.Declare(Long)
V.Local.sTableName.Declare(String)
V.Local.sDataTableName.Declare(String)
V.Local.sSQL.Declare(String)
V.Local.sFullPath.Declare(String)
V.Local.sProfile.Declare(String)
V.Local.sRet.Declare(String)

F.Intrinsic.Control.If(V.Caller.GSSVersion, <, "2019.1")
	F.Intrinsic.UI.Msgbox("Profile import is only available for GSS 2019.1 and higher.")
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

F.Intrinsic.UI.Msgbox("Are you sure you want to overwrite this profile with one from a file?", "Warning", 4, V.Local.iRet)
F.Intrinsic.Control.If(V.Local.iRet, =, V.Ambient.MsgBoxYes)
	F.Intrinsic.UI.ShowOpenFileDialog("", "4980|*.4980", V.Local.sFile)
	
	F.Intrinsic.Control.If(V.Local.sFile.IsNotCancel)
		'save selected profile
		V.Local.sProfile.Set(V.Global.sProfile)
		
		'make a temp directory to process this in
		F.Intrinsic.String.Build("{0}4980\Profile Import", V.Caller.LocalGSSTempDir, V.Local.sTempPath)
		F.Intrinsic.Control.CallSub(CheckDirectories, "Directories", V.Local.sTempPath)
		
		'copy file to temp directory
		F.Intrinsic.String.Build("{0}\Import_{1}.4980", V.Local.sTempPath, V.Ambient.Now.FormatYYYY-MM-DD-HH-NN-SS, V.Local.sNewFile)
		F.Intrinsic.File.CopyFile(V.Local.sFile, V.Local.sNewFile)
		
		'unzip file
		F.Intrinsic.String.Build("{0}\{1}\", V.Local.sTempPath, V.Ambient.Now.FormatYYYY-MM-DD-HH-NN-SS, V.Local.sExtractPath)
		F.Intrinsic.Control.CallSub(CheckDirectories, "Directories", V.Local.sExtractPath)
		F.Automation.ZIPPro.SetProperty("ExtractToPath", V.Local.sExtractPath)
		F.Automation.ZIPPro.SetProperty("ArchiveFile", V.Local.sNewFile)
		F.Automation.ZIPPro.ExtractAll
		F.Intrinsic.File.DeleteFile(V.Local.sNewFile)
		
		'now get extracted files
		F.Intrinsic.File.GetFileList(V.Local.sExtractPath, V.Local.sFileList)
		F.Intrinsic.String.Split(V.Local.sFileList, ":", V.Local.sFileList)
		
		F.Intrinsic.Control.If(V.Local.sFileList.UBound, <, 5)
			F.Intrinsic.UI.Msgbox("There is a problem with this import file. The data required is either missing or corrupted. Please try a new import file.")
		F.Intrinsic.Control.Else
			'process each file
			F.Intrinsic.Control.For(V.Local.iCounter, 0, V.Local.sFileList.UBound, 1)
				F.Intrinsic.Control.If(V.Local.sFileList(V.Local.iCounter).Trim, !=, "")
					F.Intrinsic.String.Build("{0}{1}", V.Local.sExtractPath, V.Local.sFileList(V.Local.iCounter), V.Local.sFullPath)
					F.Intrinsic.String.Replace(V.Local.sFileList(V.Local.iCounter), ".xml", "", V.Local.sDataTableName)
					
					'format is datatablename - database name
					F.Intrinsic.String.Split(V.Local.sDataTableName, "-", V.Local.sDataTableName)
					F.Data.DataTable.CreateFromXML(V.Local.sDataTableName(0), V.Local.sFullPath)
					
					'delete old records
					F.Intrinsic.String.Build("delete from {0} where PROFILE = '{1}'", V.Local.sDataTableName(1), V.Global.sProfile, V.Local.sSQL)
					F.ODBC.Connection!Con.Execute(V.Local.sSQL)
					
					'now save new records
					F.Data.DataTable.SetValue(V.Local.sDataTableName(0), -1, "PROFILE", V.Global.sProfile)
					F.Data.DataTable.SaveToDB(V.Local.sDataTableName(0), "Con", V.Local.sDataTableName(1), "", 128)
					F.Data.DataTable.Close(V.Local.sDataTableName(0))
					V.Local.sDataTableName.Redim(0, 0)
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.Next(V.Local.iCounter)
			V.Local.sFileList.Redim(0, 0)
			
			'only mark it as default if there is no other
			F.Intrinsic.String.Build("select RTRIM(PROFILE) from GCG_4980_NESTPROFILE where DEFAULT_PROFILE = 1 and PROFILE <> '{0}'", V.Local.sProfile, V.Local.sSQL)
			F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
			F.Intrinsic.Control.If(V.Ambient.ExecuteAndReturnEOF)
				'mark as default
				F.Intrinsic.String.Build("update GCG_4980_NESTPROFILE set DEFAULT_PROFILE = 1 where PROFILE = '{0}'", V.Local.sProfile, V.Local.sSQL)
			F.Intrinsic.Control.Else
				'mark as not default
				F.Intrinsic.String.Build("update GCG_4980_NESTPROFILE set DEFAULT_PROFILE = 0 where PROFILE = '{0}'", V.Local.sProfile, V.Local.sSQL)
			F.Intrinsic.Control.EndIf
			F.ODBC.Connection!Con.Execute(V.Local.sSQL)
			
			F.Intrinsic.UI.Msgbox("Profile imported successfully.", "Success")
		F.Intrinsic.Control.EndIf
		
		F.Intrinsic.Control.CallSub(ClearDirectory, "Path", V.Local.sExtractPath)
		F.Intrinsic.File.DeleteDir(V.Local.sExtractPath)
		
		GUI.FormExportMaintenance..Enabled(False)
		F.Intrinsic.Control.CallSub(LoadProfile)
		V.Global.sProfile.Set("")
		GUI.FormExportMaintenance.ddlProfile.Text(V.Local.sProfile)
		F.Intrinsic.Control.CallSub(ddlProfile_Click)
		GUI.FormExportMaintenance..Enabled(True)
		GUI.FormExportMaintenance..SetFocus
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.cmdImportProfile_Click.End

Program.Sub.ClearDirectory.Start
'pass PATH
'deletes all files in a directory

F.Intrinsic.Control.Try

V.Local.sFileList.Declare(String)
V.Local.sFullPath.Declare(String)
V.Local.iCounter.Declare(Long)
V.Local.sPath.Declare(String)

F.Intrinsic.Control.If(V.Args.Path.Right1, !=, "\")
	F.Intrinsic.String.Build("{0}\", V.Args.Path, V.Local.sPath)
F.Intrinsic.Control.Else
	V.Local.sPath.Set(V.Args.Path)
F.Intrinsic.Control.EndIf

F.Intrinsic.File.GetFileList(V.Local.sPath, V.Local.sFileList)
F.Intrinsic.Control.If(V.Local.sFileList.Trim, !=, "")
	F.Intrinsic.String.Split(V.Local.sFileList, ":", V.Local.sFileList)
	F.Intrinsic.Control.For(V.Local.iCounter, 0, V.Local.sFileList.UBound, 1)
		F.Intrinsic.String.Build("{0}{1}", V.Local.sPath, V.Local.sFileList(V.Local.iCounter), V.Local.sFullPath)
		F.Intrinsic.File.DeleteFile(V.Local.sFullPath)
	F.Intrinsic.Control.Next(V.Local.iCounter)
	V.Local.sFileList.Redim(0, 0)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.ClearDirectory.End

Program.Sub.chkSheetWeightNestSummary_Click.Start
F.Intrinsic.Control.Try

F.Intrinsic.Control.If(V.Screen.FormImportMaintenance!chkSheetWeightNestSummary.CheckedAsBoolean)
	GUI.FormImportMaintenance.ddlWeight.Enabled(False)
F.Intrinsic.Control.Else
	'checking if mapping is enabled
	GUI.FormImportMaintenance.ddlWeight.Enabled(V.Screen.FormImportMaintenance!ddlNestID.Enabled)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.chkSheetWeightNestSummary_Click.End

Program.Sub.chkSheetAreaNestSummary_Click.Start
F.Intrinsic.Control.Try

F.Intrinsic.Control.If(V.Screen.FormImportMaintenance!chkSheetAreaNestSummary.CheckedAsBoolean)
	GUI.FormImportMaintenance.ddlSheetArea.Enabled(False)
F.Intrinsic.Control.Else
	'checking if mapping is enabled
	GUI.FormImportMaintenance.ddlSheetArea.Enabled(V.Screen.FormImportMaintenance!ddlNestID.Enabled)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.chkSheetAreaNestSummary_Click.End

Program.Sub.txtThreshold_LostFocus.Start
'make sure the entry is valid

F.Intrinsic.Control.Try

V.Local.sValue.Declare(String)

V.Local.sValue.Set(V.Screen.FormImportMaintenance!txtThreshold.Text.Trim)

F.Intrinsic.Control.If(V.Local.sValue.Long, >, 100)
	F.Intrinsic.UI.Msgbox("Usage Percentage Threshold must be between 0 and 100.")
	GUI.FormImportMaintenance.txtThreshold.Text(100)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.txtThreshold_LostFocus.End

Program.Sub.FormImportMaintenance_SaveButtonClick.Start
F.Intrinsic.Control.Try

F.Intrinsic.Control.CallSub(cmdSaveImpConf_Click)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.FormImportMaintenance_SaveButtonClick.End

Program.Sub.FormExportMaintenance_SaveButtonClick.Start
F.Intrinsic.Control.Try

F.Intrinsic.Control.CallSub(cmdSaveMap_Click)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.FormExportMaintenance_SaveButtonClick.End

Program.Sub.FormExportMaintenance_UserButtonClicked.Start
F.Intrinsic.Control.Try

F.Intrinsic.Control.SelectCase(V.Args.Button)
	F.Intrinsic.Control.Case("ProfileMaintenance")
		F.Intrinsic.Control.CallSub(cmdProfileMaint_Click)
	F.Intrinsic.Control.Case("ImportMaintenance")
		F.Intrinsic.Control.CallSub(cmdImportMaint_Click)
	F.Intrinsic.Control.Case("ExportProfile")
		F.Intrinsic.Control.CallSub(cmdExportProfile_Click)
	F.Intrinsic.Control.Case("ImportProfile")
		F.Intrinsic.Control.CallSub(cmdImportProfile_Click)
F.Intrinsic.Control.EndSelect

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.FormExportMaintenance_UserButtonClicked.End

Program.Sub.txtXPPath_LostFocus.Start
F.Intrinsic.Control.Try

V.Local.bAccess.Declare(Boolean, False)

'check path
F.Intrinsic.Control.If(V.Screen.FormExportMaintenance!txtXPPath.Text.Trim, !=, "")
	F.Intrinsic.File.DirExists(V.Screen.FormExportMaintenance!txtXPPath.Text.Trim, V.Local.bAccess)
	
	F.Intrinsic.Control.If(V.Local.bAccess)
		GUI.FormExportMaintenance.txtXPPath.BackColor(V.Global.iGreen)
	F.Intrinsic.Control.Else
		GUI.FormExportMaintenance.txtXPPath.BackColor(V.Global.iRed)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Else
	GUI.FormExportMaintenance.txtXPPath.BackColor(V.Global.iRed)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.txtXPPath_LostFocus.End

Program.Sub.txtImpPath_LostFocus.Start
F.Intrinsic.Control.Try

V.Local.bAccess.Declare(Boolean, False)

'check path
F.Intrinsic.Control.If(V.Screen.FormImportMaintenance!txtImpPath.Text.Trim, !=, "")
	F.Intrinsic.File.DirExists(V.Screen.FormImportMaintenance!txtImpPath.Text.Trim, V.Local.bAccess)
	
	F.Intrinsic.Control.If(V.Local.bAccess)
		GUI.FormImportMaintenance.txtImpPath.BackColor(V.Global.iGreen)
	F.Intrinsic.Control.Else
		GUI.FormImportMaintenance.txtImpPath.BackColor(V.Global.iRed)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Else
	GUI.FormImportMaintenance.txtImpPath.BackColor(V.Global.iRed)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.txtImpPath_LostFocus.End

Program.Sub.txtRemPath_LostFocus.Start
F.Intrinsic.Control.Try

V.Local.bAccess.Declare(Boolean, False)

'check path
F.Intrinsic.Control.If(V.Screen.FormImportMaintenance!txtRemPath.Text.Trim, !=, "")
	F.Intrinsic.File.DirExists(V.Screen.FormImportMaintenance!txtRemPath.Text.Trim, V.Local.bAccess)
	
	F.Intrinsic.Control.If(V.Local.bAccess)
		GUI.FormImportMaintenance.txtRemPath.BackColor(V.Global.iGreen)
	F.Intrinsic.Control.Else
		GUI.FormImportMaintenance.txtRemPath.BackColor(V.Global.iRed)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Else
	GUI.FormImportMaintenance.txtRemPath.BackColor(V.Global.iRed)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.txtRemPath_LostFocus.End

Program.Sub.txtPartSeparationPath_LostFocus.Start
F.Intrinsic.Control.Try

V.Local.bAccess.Declare(Boolean, False)

'check path
F.Intrinsic.Control.If(V.Screen.FormImportMaintenance!txtPartSeparationPath.Text.Trim, !=, "")
	F.Intrinsic.File.DirExists(V.Screen.FormImportMaintenance!txtPartSeparationPath.Text.Trim, V.Local.bAccess)
	
	F.Intrinsic.Control.If(V.Local.bAccess)
		GUI.FormImportMaintenance.txtPartSeparationPath.BackColor(V.Global.iGreen)
	F.Intrinsic.Control.Else
		GUI.FormImportMaintenance.txtPartSeparationPath.BackColor(V.Global.iRed)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Else
	GUI.FormImportMaintenance.txtPartSeparationPath.BackColor(V.Global.iRed)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "CallBack", "Unload_All", "WRITE_LOG_FILE", True, "PROJECT", "4980", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.txtPartSeparationPath_LostFocus.End

Program.Sub.Comments.Start
${$5$}$2.0.0.0$}$2
${$6$}$rseddon$}$20240202162523550$}$DkKb6sybY9hE3N0enyRwKJuHSlMGTgRbkwdKLri347QMfnErbYsfTQcoBYdTGKR2SDVaDA4RlwU=
Program.Sub.Comments.End
